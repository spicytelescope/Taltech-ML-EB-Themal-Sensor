
Lab8_1_STM32_MNIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008120  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005aba4  080082d0  080082d0  000182d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08062e74  08062e74  00072e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08062e7c  08062e7c  00072e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08062e80  08062e80  00072e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000818  20000000  08062e84  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00080818  2**0
                  CONTENTS
  8 .bss          000017a4  20000818  20000818  00080818  2**2
                  ALLOC
  9 ._user_heap_stack 00006004  20001fbc  20001fbc  00080818  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00080818  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002afee  00000000  00000000  00080848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004de6  00000000  00000000  000ab836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001a827  00000000  00000000  000b061c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  000cae48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  000cc798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009147  00000000  00000000  000cdf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b028  00000000  00000000  000d709f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7d8a  00000000  00000000  001020c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001f9e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005988  00000000  00000000  001f9f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000818 	.word	0x20000818
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080082b8 	.word	0x080082b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000081c 	.word	0x2000081c
 80001ec:	080082b8 	.word	0x080082b8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96e 	b.w	8000ebc <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468c      	mov	ip, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 8083 	bne.w	8000d0e <__udivmoddi4+0x116>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d947      	bls.n	8000c9e <__udivmoddi4+0xa6>
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	b142      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	f1c2 0020 	rsb	r0, r2, #32
 8000c18:	fa24 f000 	lsr.w	r0, r4, r0
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	4097      	lsls	r7, r2
 8000c20:	ea40 0c01 	orr.w	ip, r0, r1
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c30:	fa1f fe87 	uxth.w	lr, r7
 8000c34:	fb08 c116 	mls	r1, r8, r6, ip
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4a:	f080 8119 	bcs.w	8000e80 <__udivmoddi4+0x288>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8116 	bls.w	8000e80 <__udivmoddi4+0x288>
 8000c54:	3e02      	subs	r6, #2
 8000c56:	443b      	add	r3, r7
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c60:	fb08 3310 	mls	r3, r8, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8105 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8102 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c80:	3802      	subs	r0, #2
 8000c82:	443c      	add	r4, r7
 8000c84:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c88:	eba4 040e 	sub.w	r4, r4, lr
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	b11d      	cbz	r5, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c5 4300 	strd	r4, r3, [r5]
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xaa>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	d150      	bne.n	8000d4c <__udivmoddi4+0x154>
 8000caa:	1bcb      	subs	r3, r1, r7
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f f887 	uxth.w	r8, r7
 8000cb4:	2601      	movs	r6, #1
 8000cb6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cba:	0c21      	lsrs	r1, r4, #16
 8000cbc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0xe2>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	f200 80e9 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000cda:	4684      	mov	ip, r0
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	b2a3      	uxth	r3, r4
 8000ce0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ce8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cec:	fb08 f800 	mul.w	r8, r8, r0
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x10c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x10a>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f200 80d9 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d02:	4618      	mov	r0, r3
 8000d04:	eba4 0408 	sub.w	r4, r4, r8
 8000d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d0c:	e7bf      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x12e>
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	f000 80b1 	beq.w	8000e7a <__udivmoddi4+0x282>
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1e:	4630      	mov	r0, r6
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f683 	clz	r6, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d14a      	bne.n	8000dc4 <__udivmoddi4+0x1cc>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0x140>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80b8 	bhi.w	8000ea8 <__udivmoddi4+0x2b0>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	468c      	mov	ip, r1
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d0a8      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000d46:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4a:	e7a5      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f603 	lsr.w	r6, r0, r3
 8000d54:	4097      	lsls	r7, r2
 8000d56:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5e:	40d9      	lsrs	r1, r3
 8000d60:	4330      	orrs	r0, r6
 8000d62:	0c03      	lsrs	r3, r0, #16
 8000d64:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d68:	fa1f f887 	uxth.w	r8, r7
 8000d6c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb06 f108 	mul.w	r1, r6, r8
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x19c>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d86:	f080 808d 	bcs.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 808a 	bls.w	8000ea4 <__udivmoddi4+0x2ac>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b281      	uxth	r1, r0
 8000d98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb00 f308 	mul.w	r3, r0, r8
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x1c4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db2:	d273      	bcs.n	8000e9c <__udivmoddi4+0x2a4>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d971      	bls.n	8000e9c <__udivmoddi4+0x2a4>
 8000db8:	3802      	subs	r0, #2
 8000dba:	4439      	add	r1, r7
 8000dbc:	1acb      	subs	r3, r1, r3
 8000dbe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc2:	e778      	b.n	8000cb6 <__udivmoddi4+0xbe>
 8000dc4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dc8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dcc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd0:	431c      	orrs	r4, r3
 8000dd2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dda:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dde:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de2:	431f      	orrs	r7, r3
 8000de4:	0c3b      	lsrs	r3, r7, #16
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fa1f f884 	uxth.w	r8, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000df6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfa:	458a      	cmp	sl, r1
 8000dfc:	fa02 f206 	lsl.w	r2, r2, r6
 8000e00:	fa00 f306 	lsl.w	r3, r0, r6
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x220>
 8000e06:	1861      	adds	r1, r4, r1
 8000e08:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e0c:	d248      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e0e:	458a      	cmp	sl, r1
 8000e10:	d946      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4421      	add	r1, r4
 8000e18:	eba1 010a 	sub.w	r1, r1, sl
 8000e1c:	b2bf      	uxth	r7, r7
 8000e1e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e22:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e26:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2a:	fb00 f808 	mul.w	r8, r0, r8
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x24a>
 8000e32:	19e7      	adds	r7, r4, r7
 8000e34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e38:	d22e      	bcs.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3a:	45b8      	cmp	r8, r7
 8000e3c:	d92c      	bls.n	8000e98 <__udivmoddi4+0x2a0>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4427      	add	r7, r4
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	eba7 0708 	sub.w	r7, r7, r8
 8000e4a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4e:	454f      	cmp	r7, r9
 8000e50:	46c6      	mov	lr, r8
 8000e52:	4649      	mov	r1, r9
 8000e54:	d31a      	bcc.n	8000e8c <__udivmoddi4+0x294>
 8000e56:	d017      	beq.n	8000e88 <__udivmoddi4+0x290>
 8000e58:	b15d      	cbz	r5, 8000e72 <__udivmoddi4+0x27a>
 8000e5a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e5e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e62:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e66:	40f2      	lsrs	r2, r6
 8000e68:	ea4c 0202 	orr.w	r2, ip, r2
 8000e6c:	40f7      	lsrs	r7, r6
 8000e6e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e72:	2600      	movs	r6, #0
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e70b      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e9      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6fd      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e88:	4543      	cmp	r3, r8
 8000e8a:	d2e5      	bcs.n	8000e58 <__udivmoddi4+0x260>
 8000e8c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e90:	eb69 0104 	sbc.w	r1, r9, r4
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7df      	b.n	8000e58 <__udivmoddi4+0x260>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e7d2      	b.n	8000e42 <__udivmoddi4+0x24a>
 8000e9c:	4660      	mov	r0, ip
 8000e9e:	e78d      	b.n	8000dbc <__udivmoddi4+0x1c4>
 8000ea0:	4681      	mov	r9, r0
 8000ea2:	e7b9      	b.n	8000e18 <__udivmoddi4+0x220>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	e775      	b.n	8000d94 <__udivmoddi4+0x19c>
 8000ea8:	4630      	mov	r0, r6
 8000eaa:	e74a      	b.n	8000d42 <__udivmoddi4+0x14a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	4439      	add	r1, r7
 8000eb2:	e713      	b.n	8000cdc <__udivmoddi4+0xe4>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	443c      	add	r4, r7
 8000eb8:	e724      	b.n	8000d04 <__udivmoddi4+0x10c>
 8000eba:	bf00      	nop

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8000ec0:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000ec2:	4b02      	ldr	r3, [pc, #8]	; (8000ecc <BSP_LCD_GetXSize+0xc>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec8:	4798      	blx	r3
}
 8000eca:	bd08      	pop	{r3, pc}
 8000ecc:	20001cf8 	.word	0x20001cf8

08000ed0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <BSP_LCD_SetTextColor+0x10>)
 8000ed2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ed4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000ed8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000edc:	6418      	str	r0, [r3, #64]	; 0x40
}
 8000ede:	4770      	bx	lr
 8000ee0:	20000834 	.word	0x20000834

08000ee4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
  DrawProp[ActiveLayer].BackColor = Color;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <BSP_LCD_SetBackColor+0x10>)
 8000ee6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ee8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000eec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000ef0:	6458      	str	r0, [r3, #68]	; 0x44
}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000834 	.word	0x20000834

08000ef8 <BSP_LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
  DrawProp[ActiveLayer].pFont = pFonts;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <BSP_LCD_SetFont+0x10>)
 8000efa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000efc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f04:	6498      	str	r0, [r3, #72]	; 0x48
}
 8000f06:	4770      	bx	lr
 8000f08:	20000834 	.word	0x20000834

08000f0c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	4606      	mov	r6, r0
 8000f10:	460c      	mov	r4, r1
 8000f12:	4615      	mov	r5, r2
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <BSP_LCD_DrawPixel+0x24>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <BSP_LCD_DrawPixel+0x28>)
 8000f1a:	2134      	movs	r1, #52	; 0x34
 8000f1c:	fb01 2303 	mla	r3, r1, r3, r2
 8000f20:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 8000f22:	f7ff ffcd 	bl	8000ec0 <BSP_LCD_GetXSize>
 8000f26:	fb00 6004 	mla	r0, r0, r4, r6
 8000f2a:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8000f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f30:	20000834 	.word	0x20000834
 8000f34:	20001c50 	.word	0x20001c50

08000f38 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8000f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	4681      	mov	r9, r0
 8000f40:	460e      	mov	r6, r1
 8000f42:	9200      	str	r2, [sp, #0]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;

  height = DrawProp[ActiveLayer].pFont->Height;
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <DrawChar+0xdc>)
 8000f46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f4c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f52:	88da      	ldrh	r2, [r3, #6]
 8000f54:	9201      	str	r2, [sp, #4]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8000f56:	889d      	ldrh	r5, [r3, #4]

  offset = 8 *((width + 7)/8) -  width ;
 8000f58:	f105 0b07 	add.w	fp, r5, #7
 8000f5c:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000f60:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 8000f64:	fa5f f888 	uxtb.w	r8, r8
 8000f68:	b2eb      	uxtb	r3, r5
 8000f6a:	eba8 0803 	sub.w	r8, r8, r3
 8000f6e:	fa5f f888 	uxtb.w	r8, r8

  for(i = 0; i < height; i++)
 8000f72:	f04f 0a00 	mov.w	sl, #0
 8000f76:	e033      	b.n	8000fe0 <DrawChar+0xa8>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);

    switch(((width + 7)/8))
    {
    case 1:
      line =  pchar[0];      
 8000f78:	9a00      	ldr	r2, [sp, #0]
 8000f7a:	5cd7      	ldrb	r7, [r2, r3]
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
      break;
    }

    for (j = 0; j < width; j++)
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	e013      	b.n	8000fa8 <DrawChar+0x70>
      line =  (pchar[0]<< 8) | pchar[1];
 8000f80:	9900      	ldr	r1, [sp, #0]
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	7857      	ldrb	r7, [r2, #1]
 8000f86:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
      break;
 8000f8a:	e7f7      	b.n	8000f7c <DrawChar+0x44>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <DrawChar+0xdc>)
 8000f8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000f94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f98:	eb09 0004 	add.w	r0, r9, r4
 8000f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f9e:	4631      	mov	r1, r6
 8000fa0:	b280      	uxth	r0, r0
 8000fa2:	f7ff ffb3 	bl	8000f0c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8000fa6:	3401      	adds	r4, #1
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	d915      	bls.n	8000fd8 <DrawChar+0xa0>
      if(line & (1 << (width- j + offset- 1))) 
 8000fac:	1b2b      	subs	r3, r5, r4
 8000fae:	4443      	add	r3, r8
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	423b      	tst	r3, r7
 8000fba:	d0e7      	beq.n	8000f8c <DrawChar+0x54>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <DrawChar+0xdc>)
 8000fbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000fc4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fc8:	eb09 0004 	add.w	r0, r9, r4
 8000fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fce:	4631      	mov	r1, r6
 8000fd0:	b280      	uxth	r0, r0
 8000fd2:	f7ff ff9b 	bl	8000f0c <BSP_LCD_DrawPixel>
 8000fd6:	e7e6      	b.n	8000fa6 <DrawChar+0x6e>
      } 
    }
    Ypos++;
 8000fd8:	3601      	adds	r6, #1
 8000fda:	b2b6      	uxth	r6, r6
  for(i = 0; i < height; i++)
 8000fdc:	f10a 0a01 	add.w	sl, sl, #1
 8000fe0:	9b01      	ldr	r3, [sp, #4]
 8000fe2:	4553      	cmp	r3, sl
 8000fe4:	d912      	bls.n	800100c <DrawChar+0xd4>
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8000fe6:	fb0a f30b 	mul.w	r3, sl, fp
 8000fea:	9a00      	ldr	r2, [sp, #0]
 8000fec:	441a      	add	r2, r3
    switch(((width + 7)/8))
 8000fee:	f1bb 0f01 	cmp.w	fp, #1
 8000ff2:	d0c1      	beq.n	8000f78 <DrawChar+0x40>
 8000ff4:	f1bb 0f02 	cmp.w	fp, #2
 8000ff8:	d0c2      	beq.n	8000f80 <DrawChar+0x48>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8000ffa:	9900      	ldr	r1, [sp, #0]
 8000ffc:	5ccb      	ldrb	r3, [r1, r3]
 8000ffe:	7857      	ldrb	r7, [r2, #1]
 8001000:	023f      	lsls	r7, r7, #8
 8001002:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8001006:	7893      	ldrb	r3, [r2, #2]
 8001008:	431f      	orrs	r7, r3
      break;
 800100a:	e7b7      	b.n	8000f7c <DrawChar+0x44>
  }
}
 800100c:	b003      	add	sp, #12
 800100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001012:	bf00      	nop
 8001014:	20000834 	.word	0x20000834

08001018 <BSP_LCD_DisplayChar>:
{
 8001018:	b538      	push	{r3, r4, r5, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <BSP_LCD_DisplayChar+0x2c>)
 800101c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800101e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001022:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001026:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001028:	6825      	ldr	r5, [r4, #0]
 800102a:	3a20      	subs	r2, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800102c:	88e3      	ldrh	r3, [r4, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800102e:	fb03 f202 	mul.w	r2, r3, r2
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001032:	88a3      	ldrh	r3, [r4, #4]
 8001034:	3307      	adds	r3, #7
 8001036:	10db      	asrs	r3, r3, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001038:	fb03 5202 	mla	r2, r3, r2, r5
 800103c:	f7ff ff7c 	bl	8000f38 <DrawChar>
}
 8001040:	bd38      	pop	{r3, r4, r5, pc}
 8001042:	bf00      	nop
 8001044:	20000834 	.word	0x20000834

08001048 <BSP_LCD_DisplayStringAt>:
{
 8001048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800104c:	4606      	mov	r6, r0
 800104e:	460f      	mov	r7, r1
 8001050:	4615      	mov	r5, r2
 8001052:	4698      	mov	r8, r3
  uint32_t size = 0, xsize = 0; 
 8001054:	2400      	movs	r4, #0
  while (*ptr++) size ++ ;
 8001056:	f812 1b01 	ldrb.w	r1, [r2], #1
 800105a:	b109      	cbz	r1, 8001060 <BSP_LCD_DisplayStringAt+0x18>
 800105c:	3401      	adds	r4, #1
 800105e:	e7fa      	b.n	8001056 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001060:	f7ff ff2e 	bl	8000ec0 <BSP_LCD_GetXSize>
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <BSP_LCD_DisplayStringAt+0xb8>)
 8001066:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001068:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800106c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001072:	889b      	ldrh	r3, [r3, #4]
 8001074:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 8001078:	f1b8 0f01 	cmp.w	r8, #1
 800107c:	d02e      	beq.n	80010dc <BSP_LCD_DisplayStringAt+0x94>
 800107e:	f1b8 0f02 	cmp.w	r8, #2
 8001082:	d033      	beq.n	80010ec <BSP_LCD_DisplayStringAt+0xa4>
  while (*ptr++) size ++ ;
 8001084:	2400      	movs	r4, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001086:	f895 8000 	ldrb.w	r8, [r5]
 800108a:	f7ff ff19 	bl	8000ec0 <BSP_LCD_GetXSize>
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <BSP_LCD_DisplayStringAt+0xb8>)
 8001090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001092:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001096:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800109a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109c:	889a      	ldrh	r2, [r3, #4]
 800109e:	fb02 0314 	mls	r3, r2, r4, r0
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4293      	cmp	r3, r2
 80010a6:	bf34      	ite	cc
 80010a8:	2300      	movcc	r3, #0
 80010aa:	2301      	movcs	r3, #1
 80010ac:	f1b8 0f00 	cmp.w	r8, #0
 80010b0:	bf08      	it	eq
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b30b      	cbz	r3, 80010fa <BSP_LCD_DisplayStringAt+0xb2>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80010b6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80010ba:	4639      	mov	r1, r7
 80010bc:	4630      	mov	r0, r6
 80010be:	f7ff ffab 	bl	8001018 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <BSP_LCD_DisplayStringAt+0xb8>)
 80010c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80010ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80010ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d0:	8898      	ldrh	r0, [r3, #4]
 80010d2:	4406      	add	r6, r0
 80010d4:	b2b6      	uxth	r6, r6
    i++;
 80010d6:	3401      	adds	r4, #1
 80010d8:	b2a4      	uxth	r4, r4
 80010da:	e7d4      	b.n	8001086 <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80010dc:	1b00      	subs	r0, r0, r4
 80010de:	fb00 f303 	mul.w	r3, r0, r3
 80010e2:	f3c3 034f 	ubfx	r3, r3, #1, #16
 80010e6:	441e      	add	r6, r3
 80010e8:	b2b6      	uxth	r6, r6
      break;
 80010ea:	e7cb      	b.n	8001084 <BSP_LCD_DisplayStringAt+0x3c>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80010ec:	1b00      	subs	r0, r0, r4
 80010ee:	fb10 f003 	smulbb	r0, r0, r3
 80010f2:	fa16 f680 	uxtah	r6, r6, r0
 80010f6:	b2b6      	uxth	r6, r6
      break;
 80010f8:	e7c4      	b.n	8001084 <BSP_LCD_DisplayStringAt+0x3c>
}
 80010fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010fe:	bf00      	nop
 8001100:	20000834 	.word	0x20000834

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_Init+0x30>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800110e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001116:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800111e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f82f 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	2000      	movs	r0, #0
 8001128:	f002 fcb4 	bl	8003a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f002 fc96 	bl	8003a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001130:	2000      	movs	r0, #0
 8001132:	bd08      	pop	{r3, pc}
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001138:	4a03      	ldr	r2, [pc, #12]	; (8001148 <HAL_IncTick+0x10>)
 800113a:	6811      	ldr	r1, [r2, #0]
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <HAL_IncTick+0x14>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	440b      	add	r3, r1
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20001cfc 	.word	0x20001cfc
 800114c:	20000028 	.word	0x20000028

08001150 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001150:	4b01      	ldr	r3, [pc, #4]	; (8001158 <HAL_GetTick+0x8>)
 8001152:	6818      	ldr	r0, [r3, #0]
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20001cfc 	.word	0x20001cfc

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff fff6 	bl	8001150 <HAL_GetTick>
 8001164:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	f1b4 3fff 	cmp.w	r4, #4294967295
 800116a:	d002      	beq.n	8001172 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800116c:	4b04      	ldr	r3, [pc, #16]	; (8001180 <HAL_Delay+0x24>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	f7ff ffed 	bl	8001150 <HAL_GetTick>
 8001176:	1b40      	subs	r0, r0, r5
 8001178:	42a0      	cmp	r0, r4
 800117a:	d3fa      	bcc.n	8001172 <HAL_Delay+0x16>
  {
  }
}
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop
 8001180:	20000028 	.word	0x20000028

08001184 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001186:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001188:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800118c:	041b      	lsls	r3, r3, #16
 800118e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	0200      	lsls	r0, r0, #8
 8001192:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001196:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80011a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_NVIC_SetPriority+0x60>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b2:	f1c3 0407 	rsb	r4, r3, #7
 80011b6:	2c04      	cmp	r4, #4
 80011b8:	bf28      	it	cs
 80011ba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011bc:	1d1d      	adds	r5, r3, #4
 80011be:	2d06      	cmp	r5, #6
 80011c0:	d918      	bls.n	80011f4 <HAL_NVIC_SetPriority+0x4c>
 80011c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 35ff 	mov.w	r5, #4294967295
 80011c8:	fa05 f404 	lsl.w	r4, r5, r4
 80011cc:	ea21 0104 	bic.w	r1, r1, r4
 80011d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d2:	fa05 f303 	lsl.w	r3, r5, r3
 80011d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80011dc:	2800      	cmp	r0, #0
 80011de:	db0b      	blt.n	80011f8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	0109      	lsls	r1, r1, #4
 80011e2:	b2c9      	uxtb	r1, r1
 80011e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80011e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80011ec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011f0:	bc30      	pop	{r4, r5}
 80011f2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f4:	2300      	movs	r3, #0
 80011f6:	e7e5      	b.n	80011c4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	f000 000f 	and.w	r0, r0, #15
 80011fc:	0109      	lsls	r1, r1, #4
 80011fe:	b2c9      	uxtb	r1, r1
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_NVIC_SetPriority+0x64>)
 8001202:	5419      	strb	r1, [r3, r0]
 8001204:	e7f4      	b.n	80011f0 <HAL_NVIC_SetPriority+0x48>
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	e000ed14 	.word	0xe000ed14

08001210 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001210:	2800      	cmp	r0, #0
 8001212:	db07      	blt.n	8001224 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001214:	f000 021f 	and.w	r2, r0, #31
 8001218:	0940      	lsrs	r0, r0, #5
 800121a:	2301      	movs	r3, #1
 800121c:	4093      	lsls	r3, r2
 800121e:	4a02      	ldr	r2, [pc, #8]	; (8001228 <HAL_NVIC_EnableIRQ+0x18>)
 8001220:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800122c:	b158      	cbz	r0, 8001246 <HAL_CRC_Init+0x1a>
{
 800122e:	b510      	push	{r4, lr}
 8001230:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001232:	7943      	ldrb	r3, [r0, #5]
 8001234:	b11b      	cbz	r3, 800123e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001236:	2301      	movs	r3, #1
 8001238:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800123a:	2000      	movs	r0, #0
}
 800123c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800123e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001240:	f001 fe04 	bl	8002e4c <HAL_CRC_MspInit>
 8001244:	e7f7      	b.n	8001236 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
}
 8001248:	4770      	bx	lr

0800124a <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800124a:	b348      	cbz	r0, 80012a0 <HAL_DMA2D_Init+0x56>
{
 800124c:	b510      	push	{r4, lr}
 800124e:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001250:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001254:	b1fb      	cbz	r3, 8001296 <HAL_DMA2D_Init+0x4c>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001256:	2302      	movs	r3, #2
 8001258:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800125c:	6822      	ldr	r2, [r4, #0]
 800125e:	6813      	ldr	r3, [r2, #0]
 8001260:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001264:	6861      	ldr	r1, [r4, #4]
 8001266:	430b      	orrs	r3, r1
 8001268:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800126e:	f023 0307 	bic.w	r3, r3, #7
 8001272:	68a1      	ldr	r1, [r4, #8]
 8001274:	430b      	orrs	r3, r1
 8001276:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800127c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001284:	68e1      	ldr	r1, [r4, #12]
 8001286:	430b      	orrs	r3, r1
 8001288:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800128a:	2000      	movs	r0, #0
 800128c:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800128e:	2301      	movs	r3, #1
 8001290:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8001294:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8001296:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800129a:	f001 fe0f 	bl	8002ebc <HAL_DMA2D_MspInit>
 800129e:	e7da      	b.n	8001256 <HAL_DMA2D_Init+0xc>
    return HAL_ERROR;
 80012a0:	2001      	movs	r0, #1
}
 80012a2:	4770      	bx	lr

080012a4 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d059      	beq.n	8001360 <HAL_DMA2D_ConfigLayer+0xbc>
{
 80012ac:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80012ae:	2301      	movs	r3, #1
 80012b0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80012ba:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80012be:	69da      	ldr	r2, [r3, #28]
 80012c0:	1c8b      	adds	r3, r1, #2
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	58c3      	ldr	r3, [r0, r3]
 80012c6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012ca:	3a09      	subs	r2, #9
 80012cc:	2a01      	cmp	r2, #1
 80012ce:	d91e      	bls.n	800130e <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80012d0:	1c8a      	adds	r2, r1, #2
 80012d2:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80012d6:	6852      	ldr	r2, [r2, #4]
 80012d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80012dc:	bb41      	cbnz	r1, 8001330 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80012de:	6804      	ldr	r4, [r0, #0]
 80012e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80012e2:	4a20      	ldr	r2, [pc, #128]	; (8001364 <HAL_DMA2D_ConfigLayer+0xc0>)
 80012e4:	402a      	ands	r2, r5
 80012e6:	4313      	orrs	r3, r2
 80012e8:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80012ea:	6802      	ldr	r2, [r0, #0]
 80012ec:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80012f0:	699c      	ldr	r4, [r3, #24]
 80012f2:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	3b09      	subs	r3, #9
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d910      	bls.n	800131e <HAL_DMA2D_ConfigLayer+0x7a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001302:	2300      	movs	r3, #0
 8001304:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001308:	4618      	mov	r0, r3
}
 800130a:	bc30      	pop	{r4, r5}
 800130c:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800130e:	1c8a      	adds	r2, r1, #2
 8001310:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001314:	6852      	ldr	r2, [r2, #4]
 8001316:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800131a:	4313      	orrs	r3, r2
 800131c:	e7de      	b.n	80012dc <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800131e:	3102      	adds	r1, #2
 8001320:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001324:	684b      	ldr	r3, [r1, #4]
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800132c:	6293      	str	r3, [r2, #40]	; 0x28
 800132e:	e7e5      	b.n	80012fc <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001330:	6804      	ldr	r4, [r0, #0]
 8001332:	69e5      	ldr	r5, [r4, #28]
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_DMA2D_ConfigLayer+0xc0>)
 8001336:	402a      	ands	r2, r5
 8001338:	4313      	orrs	r3, r2
 800133a:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800133c:	6802      	ldr	r2, [r0, #0]
 800133e:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8001342:	699c      	ldr	r4, [r3, #24]
 8001344:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	3b09      	subs	r3, #9
 800134a:	2b01      	cmp	r3, #1
 800134c:	d8d6      	bhi.n	80012fc <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800134e:	3102      	adds	r1, #2
 8001350:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8001354:	684b      	ldr	r3, [r1, #4]
 8001356:	6802      	ldr	r2, [r0, #0]
 8001358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800135c:	6213      	str	r3, [r2, #32]
 800135e:	e7cd      	b.n	80012fc <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8001360:	2002      	movs	r0, #2
}
 8001362:	4770      	bx	lr
 8001364:	00fcfff0 	.word	0x00fcfff0

08001368 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001368:	2300      	movs	r3, #0
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f200 80ea 	bhi.w	8001544 <HAL_GPIO_Init+0x1dc>
{
 8001370:	b4f0      	push	{r4, r5, r6, r7}
 8001372:	b082      	sub	sp, #8
 8001374:	e05e      	b.n	8001434 <HAL_GPIO_Init+0xcc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001378:	005f      	lsls	r7, r3, #1
 800137a:	2403      	movs	r4, #3
 800137c:	40bc      	lsls	r4, r7
 800137e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001382:	68cc      	ldr	r4, [r1, #12]
 8001384:	40bc      	lsls	r4, r7
 8001386:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8001388:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138c:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001390:	684c      	ldr	r4, [r1, #4]
 8001392:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001396:	409a      	lsls	r2, r3
 8001398:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800139a:	6042      	str	r2, [r0, #4]
 800139c:	e058      	b.n	8001450 <HAL_GPIO_Init+0xe8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139e:	08dc      	lsrs	r4, r3, #3
 80013a0:	3408      	adds	r4, #8
 80013a2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a6:	f003 0207 	and.w	r2, r3, #7
 80013aa:	0096      	lsls	r6, r2, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	40b2      	lsls	r2, r6
 80013b0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b4:	690a      	ldr	r2, [r1, #16]
 80013b6:	40b2      	lsls	r2, r6
 80013b8:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80013be:	e05b      	b.n	8001478 <HAL_GPIO_Init+0x110>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c0:	2209      	movs	r2, #9
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 80013c4:	2200      	movs	r2, #0
 80013c6:	40b2      	lsls	r2, r6
 80013c8:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ca:	3402      	adds	r4, #2
 80013cc:	4e5e      	ldr	r6, [pc, #376]	; (8001548 <HAL_GPIO_Init+0x1e0>)
 80013ce:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4a5e      	ldr	r2, [pc, #376]	; (800154c <HAL_GPIO_Init+0x1e4>)
 80013d4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	43ea      	mvns	r2, r5
 80013d8:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013dc:	684f      	ldr	r7, [r1, #4]
 80013de:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80013e2:	d001      	beq.n	80013e8 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 80013e4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80013e8:	4c58      	ldr	r4, [pc, #352]	; (800154c <HAL_GPIO_Init+0x1e4>)
 80013ea:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80013ec:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80013ee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f2:	684f      	ldr	r7, [r1, #4]
 80013f4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80013f8:	d001      	beq.n	80013fe <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 80013fa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80013fe:	4c53      	ldr	r4, [pc, #332]	; (800154c <HAL_GPIO_Init+0x1e4>)
 8001400:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001404:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001408:	684f      	ldr	r7, [r1, #4]
 800140a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800140e:	d001      	beq.n	8001414 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8001410:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001414:	4c4d      	ldr	r4, [pc, #308]	; (800154c <HAL_GPIO_Init+0x1e4>)
 8001416:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001418:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800141a:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800141c:	684e      	ldr	r6, [r1, #4]
 800141e:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001422:	d001      	beq.n	8001428 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8001424:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001428:	4c48      	ldr	r4, [pc, #288]	; (800154c <HAL_GPIO_Init+0x1e4>)
 800142a:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142c:	3301      	adds	r3, #1
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f200 8085 	bhi.w	800153e <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001438:	680c      	ldr	r4, [r1, #0]
 800143a:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 800143e:	ea32 0404 	bics.w	r4, r2, r4
 8001442:	d1f3      	bne.n	800142c <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001444:	684c      	ldr	r4, [r1, #4]
 8001446:	f004 0403 	and.w	r4, r4, #3
 800144a:	3c01      	subs	r4, #1
 800144c:	2c01      	cmp	r4, #1
 800144e:	d992      	bls.n	8001376 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001450:	684a      	ldr	r2, [r1, #4]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	2a03      	cmp	r2, #3
 8001458:	d009      	beq.n	800146e <HAL_GPIO_Init+0x106>
        temp = GPIOx->PUPDR;
 800145a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145c:	005e      	lsls	r6, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	40b2      	lsls	r2, r6
 8001462:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001466:	688a      	ldr	r2, [r1, #8]
 8001468:	40b2      	lsls	r2, r6
 800146a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800146c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146e:	684a      	ldr	r2, [r1, #4]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	2a02      	cmp	r2, #2
 8001476:	d092      	beq.n	800139e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8001478:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	005e      	lsls	r6, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	40b2      	lsls	r2, r6
 8001480:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001484:	684a      	ldr	r2, [r1, #4]
 8001486:	f002 0203 	and.w	r2, r2, #3
 800148a:	40b2      	lsls	r2, r6
 800148c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800148e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001490:	684a      	ldr	r2, [r1, #4]
 8001492:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001496:	d0c9      	beq.n	800142c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	2200      	movs	r2, #0
 800149a:	9201      	str	r2, [sp, #4]
 800149c:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <HAL_GPIO_Init+0x1e8>)
 800149e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80014a0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80014a4:	6454      	str	r4, [r2, #68]	; 0x44
 80014a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014ac:	9201      	str	r2, [sp, #4]
 80014ae:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014b0:	089c      	lsrs	r4, r3, #2
 80014b2:	1ca6      	adds	r6, r4, #2
 80014b4:	4a24      	ldr	r2, [pc, #144]	; (8001548 <HAL_GPIO_Init+0x1e0>)
 80014b6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ba:	f003 0203 	and.w	r2, r3, #3
 80014be:	0096      	lsls	r6, r2, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	40b2      	lsls	r2, r6
 80014c4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c8:	4a22      	ldr	r2, [pc, #136]	; (8001554 <HAL_GPIO_Init+0x1ec>)
 80014ca:	4290      	cmp	r0, r2
 80014cc:	f43f af7a 	beq.w	80013c4 <HAL_GPIO_Init+0x5c>
 80014d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014d4:	4290      	cmp	r0, r2
 80014d6:	d022      	beq.n	800151e <HAL_GPIO_Init+0x1b6>
 80014d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014dc:	4290      	cmp	r0, r2
 80014de:	d020      	beq.n	8001522 <HAL_GPIO_Init+0x1ba>
 80014e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014e4:	4290      	cmp	r0, r2
 80014e6:	d01e      	beq.n	8001526 <HAL_GPIO_Init+0x1be>
 80014e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014ec:	4290      	cmp	r0, r2
 80014ee:	d01c      	beq.n	800152a <HAL_GPIO_Init+0x1c2>
 80014f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014f4:	4290      	cmp	r0, r2
 80014f6:	d01a      	beq.n	800152e <HAL_GPIO_Init+0x1c6>
 80014f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014fc:	4290      	cmp	r0, r2
 80014fe:	d018      	beq.n	8001532 <HAL_GPIO_Init+0x1ca>
 8001500:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001504:	4290      	cmp	r0, r2
 8001506:	d016      	beq.n	8001536 <HAL_GPIO_Init+0x1ce>
 8001508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800150c:	4290      	cmp	r0, r2
 800150e:	d014      	beq.n	800153a <HAL_GPIO_Init+0x1d2>
 8001510:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001514:	4290      	cmp	r0, r2
 8001516:	f43f af53 	beq.w	80013c0 <HAL_GPIO_Init+0x58>
 800151a:	220a      	movs	r2, #10
 800151c:	e753      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 800151e:	2201      	movs	r2, #1
 8001520:	e751      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 8001522:	2202      	movs	r2, #2
 8001524:	e74f      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 8001526:	2203      	movs	r2, #3
 8001528:	e74d      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 800152a:	2204      	movs	r2, #4
 800152c:	e74b      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 800152e:	2205      	movs	r2, #5
 8001530:	e749      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 8001532:	2206      	movs	r2, #6
 8001534:	e747      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 8001536:	2207      	movs	r2, #7
 8001538:	e745      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
 800153a:	2208      	movs	r2, #8
 800153c:	e743      	b.n	80013c6 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 800153e:	b002      	add	sp, #8
 8001540:	bcf0      	pop	{r4, r5, r6, r7}
 8001542:	4770      	bx	lr
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40013800 	.word	0x40013800
 800154c:	40013c00 	.word	0x40013c00
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000

08001558 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	b10a      	cbz	r2, 800155e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155a:	6181      	str	r1, [r0, #24]
 800155c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155e:	0409      	lsls	r1, r1, #16
 8001560:	6181      	str	r1, [r0, #24]
  }
}
 8001562:	4770      	bx	lr

08001564 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001564:	2800      	cmp	r0, #0
 8001566:	f000 80cc 	beq.w	8001702 <HAL_I2C_Init+0x19e>
{
 800156a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156c:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001572:	2b00      	cmp	r3, #0
 8001574:	d077      	beq.n	8001666 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001576:	2324      	movs	r3, #36	; 0x24
 8001578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800157c:	6822      	ldr	r2, [r4, #0]
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001590:	6822      	ldr	r2, [r4, #0]
 8001592:	6813      	ldr	r3, [r2, #0]
 8001594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001598:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800159a:	f000 fd9b 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800159e:	6862      	ldr	r2, [r4, #4]
 80015a0:	4b5a      	ldr	r3, [pc, #360]	; (800170c <HAL_I2C_Init+0x1a8>)
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d864      	bhi.n	8001670 <HAL_I2C_Init+0x10c>
 80015a6:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <HAL_I2C_Init+0x1ac>)
 80015a8:	4298      	cmp	r0, r3
 80015aa:	bf8c      	ite	hi
 80015ac:	2300      	movhi	r3, #0
 80015ae:	2301      	movls	r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f040 80a8 	bne.w	8001706 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015b6:	4d57      	ldr	r5, [pc, #348]	; (8001714 <HAL_I2C_Init+0x1b0>)
 80015b8:	fba5 3500 	umull	r3, r5, r5, r0
 80015bc:	0caf      	lsrs	r7, r5, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015be:	6826      	ldr	r6, [r4, #0]
 80015c0:	6871      	ldr	r1, [r6, #4]
 80015c2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80015c6:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80015ca:	6071      	str	r1, [r6, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015cc:	6821      	ldr	r1, [r4, #0]
 80015ce:	6a0b      	ldr	r3, [r1, #32]
 80015d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d4:	6865      	ldr	r5, [r4, #4]
 80015d6:	4a4d      	ldr	r2, [pc, #308]	; (800170c <HAL_I2C_Init+0x1a8>)
 80015d8:	4295      	cmp	r5, r2
 80015da:	d84f      	bhi.n	800167c <HAL_I2C_Init+0x118>
 80015dc:	1c7a      	adds	r2, r7, #1
 80015de:	4313      	orrs	r3, r2
 80015e0:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e2:	6825      	ldr	r5, [r4, #0]
 80015e4:	69e9      	ldr	r1, [r5, #28]
 80015e6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80015ea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	4a46      	ldr	r2, [pc, #280]	; (800170c <HAL_I2C_Init+0x1a8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d84c      	bhi.n	8001690 <HAL_I2C_Init+0x12c>
 80015f6:	3801      	subs	r0, #1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80015fe:	3001      	adds	r0, #1
 8001600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001604:	4218      	tst	r0, r3
 8001606:	d078      	beq.n	80016fa <HAL_I2C_Init+0x196>
 8001608:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800160c:	430b      	orrs	r3, r1
 800160e:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001610:	6821      	ldr	r1, [r4, #0]
 8001612:	680b      	ldr	r3, [r1, #0]
 8001614:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001618:	69e2      	ldr	r2, [r4, #28]
 800161a:	6a20      	ldr	r0, [r4, #32]
 800161c:	4302      	orrs	r2, r0
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001622:	6821      	ldr	r1, [r4, #0]
 8001624:	688b      	ldr	r3, [r1, #8]
 8001626:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800162a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800162e:	6922      	ldr	r2, [r4, #16]
 8001630:	68e0      	ldr	r0, [r4, #12]
 8001632:	4302      	orrs	r2, r0
 8001634:	4313      	orrs	r3, r2
 8001636:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001638:	6821      	ldr	r1, [r4, #0]
 800163a:	68cb      	ldr	r3, [r1, #12]
 800163c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001640:	6962      	ldr	r2, [r4, #20]
 8001642:	69a0      	ldr	r0, [r4, #24]
 8001644:	4302      	orrs	r2, r0
 8001646:	4313      	orrs	r3, r2
 8001648:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800164a:	6822      	ldr	r2, [r4, #0]
 800164c:	6813      	ldr	r3, [r2, #0]
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001654:	2000      	movs	r0, #0
 8001656:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001658:	2320      	movs	r3, #32
 800165a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800165e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8001664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001666:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800166a:	f001 fdf9 	bl	8003260 <HAL_I2C_MspInit>
 800166e:	e782      	b.n	8001576 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001670:	4b29      	ldr	r3, [pc, #164]	; (8001718 <HAL_I2C_Init+0x1b4>)
 8001672:	4298      	cmp	r0, r3
 8001674:	bf8c      	ite	hi
 8001676:	2300      	movhi	r3, #0
 8001678:	2301      	movls	r3, #1
 800167a:	e799      	b.n	80015b0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800167c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001680:	fb02 f207 	mul.w	r2, r2, r7
 8001684:	4d25      	ldr	r5, [pc, #148]	; (800171c <HAL_I2C_Init+0x1b8>)
 8001686:	fba5 5202 	umull	r5, r2, r5, r2
 800168a:	0992      	lsrs	r2, r2, #6
 800168c:	3201      	adds	r2, #1
 800168e:	e7a6      	b.n	80015de <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001690:	68a2      	ldr	r2, [r4, #8]
 8001692:	b9ba      	cbnz	r2, 80016c4 <HAL_I2C_Init+0x160>
 8001694:	1e46      	subs	r6, r0, #1
 8001696:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800169a:	fbb6 f6f7 	udiv	r6, r6, r7
 800169e:	3601      	adds	r6, #1
 80016a0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80016a4:	fab6 f686 	clz	r6, r6
 80016a8:	0976      	lsrs	r6, r6, #5
 80016aa:	bb46      	cbnz	r6, 80016fe <HAL_I2C_Init+0x19a>
 80016ac:	b9c2      	cbnz	r2, 80016e0 <HAL_I2C_Init+0x17c>
 80016ae:	1e42      	subs	r2, r0, #1
 80016b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b8:	3201      	adds	r2, #1
 80016ba:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80016be:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80016c2:	e7a3      	b.n	800160c <HAL_I2C_Init+0xa8>
 80016c4:	1e46      	subs	r6, r0, #1
 80016c6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80016ca:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80016ce:	fbb6 f6f7 	udiv	r6, r6, r7
 80016d2:	3601      	adds	r6, #1
 80016d4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80016d8:	fab6 f686 	clz	r6, r6
 80016dc:	0976      	lsrs	r6, r6, #5
 80016de:	e7e4      	b.n	80016aa <HAL_I2C_Init+0x146>
 80016e0:	1e42      	subs	r2, r0, #1
 80016e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ee:	3201      	adds	r2, #1
 80016f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80016f4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80016f8:	e788      	b.n	800160c <HAL_I2C_Init+0xa8>
 80016fa:	2304      	movs	r3, #4
 80016fc:	e786      	b.n	800160c <HAL_I2C_Init+0xa8>
 80016fe:	2301      	movs	r3, #1
 8001700:	e784      	b.n	800160c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8001702:	2001      	movs	r0, #1
}
 8001704:	4770      	bx	lr
    return HAL_ERROR;
 8001706:	2001      	movs	r0, #1
 8001708:	e7ac      	b.n	8001664 <HAL_I2C_Init+0x100>
 800170a:	bf00      	nop
 800170c:	000186a0 	.word	0x000186a0
 8001710:	001e847f 	.word	0x001e847f
 8001714:	431bde83 	.word	0x431bde83
 8001718:	003d08ff 	.word	0x003d08ff
 800171c:	10624dd3 	.word	0x10624dd3

08001720 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001720:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	d001      	beq.n	800172e <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800172a:	2002      	movs	r0, #2
  }
}
 800172c:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 800172e:	2324      	movs	r3, #36	; 0x24
 8001730:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001734:	6802      	ldr	r2, [r0, #0]
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800173e:	6802      	ldr	r2, [r0, #0]
 8001740:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001742:	f023 0310 	bic.w	r3, r3, #16
 8001746:	6253      	str	r3, [r2, #36]	; 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8001748:	6802      	ldr	r2, [r0, #0]
 800174a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800174c:	4319      	orrs	r1, r3
 800174e:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8001750:	6802      	ldr	r2, [r0, #0]
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800175a:	2320      	movs	r3, #32
 800175c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 8001760:	2000      	movs	r0, #0
 8001762:	4770      	bx	lr

08001764 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001764:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	d001      	beq.n	8001772 <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800176e:	2002      	movs	r0, #2
  }
}
 8001770:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001772:	2324      	movs	r3, #36	; 0x24
 8001774:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8001778:	6802      	ldr	r2, [r0, #0]
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 8001782:	6802      	ldr	r2, [r0, #0]
 8001784:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001786:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8001788:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 800178c:	4319      	orrs	r1, r3
 800178e:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8001790:	6251      	str	r1, [r2, #36]	; 0x24
    __HAL_I2C_ENABLE(hi2c);
 8001792:	6802      	ldr	r2, [r0, #0]
 8001794:	6813      	ldr	r3, [r2, #0]
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800179c:	2320      	movs	r3, #32
 800179e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    return HAL_OK;
 80017a2:	2000      	movs	r0, #0
 80017a4:	4770      	bx	lr

080017a6 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80017a6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80017a8:	684e      	ldr	r6, [r1, #4]
 80017aa:	6805      	ldr	r5, [r0, #0]
 80017ac:	68eb      	ldr	r3, [r5, #12]
 80017ae:	f3c3 430b 	ubfx	r3, r3, #16, #12
 80017b2:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80017b4:	01d4      	lsls	r4, r2, #7
 80017b6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80017ba:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80017be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80017c2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80017c6:	680b      	ldr	r3, [r1, #0]
 80017c8:	6805      	ldr	r5, [r0, #0]
 80017ca:	68ef      	ldr	r7, [r5, #12]
 80017cc:	f3c7 470b 	ubfx	r7, r7, #16, #12
 80017d0:	443b      	add	r3, r7
 80017d2:	3301      	adds	r3, #1
 80017d4:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80017d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80017dc:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80017e0:	68ce      	ldr	r6, [r1, #12]
 80017e2:	6805      	ldr	r5, [r0, #0]
 80017e4:	68eb      	ldr	r3, [r5, #12]
 80017e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017ea:	441e      	add	r6, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80017ec:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80017f0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80017f4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80017f8:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80017fc:	688b      	ldr	r3, [r1, #8]
 80017fe:	6805      	ldr	r5, [r0, #0]
 8001800:	68ef      	ldr	r7, [r5, #12]
 8001802:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8001806:	443b      	add	r3, r7
 8001808:	3301      	adds	r3, #1
 800180a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 800180e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001812:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001816:	6803      	ldr	r3, [r0, #0]
 8001818:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800181c:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8001820:	f025 0507 	bic.w	r5, r5, #7
 8001824:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001828:	6803      	ldr	r3, [r0, #0]
 800182a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800182e:	690d      	ldr	r5, [r1, #16]
 8001830:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001834:	f891 e031 	ldrb.w	lr, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001838:	f891 c032 	ldrb.w	ip, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800183c:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800183e:	6806      	ldr	r6, [r0, #0]
 8001840:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8001844:	f8d6 309c 	ldr.w	r3, [r6, #156]	; 0x9c
 8001848:	2500      	movs	r5, #0
 800184a:	f8c6 509c 	str.w	r5, [r6, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800184e:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8001852:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8001856:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800185a:	6806      	ldr	r6, [r0, #0]
 800185c:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
 8001860:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8001864:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001868:	6803      	ldr	r3, [r0, #0]
 800186a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800186e:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8001872:	f026 06ff 	bic.w	r6, r6, #255	; 0xff
 8001876:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800187a:	6803      	ldr	r3, [r0, #0]
 800187c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001880:	694e      	ldr	r6, [r1, #20]
 8001882:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001886:	6803      	ldr	r3, [r0, #0]
 8001888:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800188c:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8001890:	f426 66e0 	bic.w	r6, r6, #1792	; 0x700
 8001894:	f026 0607 	bic.w	r6, r6, #7
 8001898:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800189c:	69ce      	ldr	r6, [r1, #28]
 800189e:	6a0f      	ldr	r7, [r1, #32]
 80018a0:	6803      	ldr	r3, [r0, #0]
 80018a2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80018a6:	433e      	orrs	r6, r7
 80018a8:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80018b2:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 80018b6:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80018ba:	6803      	ldr	r3, [r0, #0]
 80018bc:	eb03 12c2 	add.w	r2, r3, r2, lsl #7
 80018c0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80018c2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80018c6:	690b      	ldr	r3, [r1, #16]
 80018c8:	b16b      	cbz	r3, 80018e6 <LTDC_SetConfig+0x140>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d03b      	beq.n	8001946 <LTDC_SetConfig+0x1a0>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d03b      	beq.n	800194a <LTDC_SetConfig+0x1a4>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d008      	beq.n	80018e8 <LTDC_SetConfig+0x142>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d039      	beq.n	800194e <LTDC_SetConfig+0x1a8>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80018da:	2b07      	cmp	r3, #7
 80018dc:	d001      	beq.n	80018e2 <LTDC_SetConfig+0x13c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80018de:	2301      	movs	r3, #1
 80018e0:	e002      	b.n	80018e8 <LTDC_SetConfig+0x142>
    tmp = 2U;
 80018e2:	2302      	movs	r3, #2
 80018e4:	e000      	b.n	80018e8 <LTDC_SetConfig+0x142>
    tmp = 4U;
 80018e6:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80018e8:	6802      	ldr	r2, [r0, #0]
 80018ea:	4422      	add	r2, r4
 80018ec:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
 80018f0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80018f4:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80018f8:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80018fa:	fb03 f502 	mul.w	r5, r3, r2
 80018fe:	684a      	ldr	r2, [r1, #4]
 8001900:	680e      	ldr	r6, [r1, #0]
 8001902:	1b92      	subs	r2, r2, r6
 8001904:	fb03 f302 	mul.w	r3, r3, r2
 8001908:	3303      	adds	r3, #3
 800190a:	6802      	ldr	r2, [r0, #0]
 800190c:	4422      	add	r2, r4
 800190e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001912:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001916:	6803      	ldr	r3, [r0, #0]
 8001918:	4423      	add	r3, r4
 800191a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800191e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8001922:	f022 0207 	bic.w	r2, r2, #7
 8001926:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800192a:	6803      	ldr	r3, [r0, #0]
 800192c:	4423      	add	r3, r4
 800192e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001930:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001934:	6803      	ldr	r3, [r0, #0]
 8001936:	441c      	add	r4, r3
 8001938:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 3U;
 8001946:	2303      	movs	r3, #3
 8001948:	e7ce      	b.n	80018e8 <LTDC_SetConfig+0x142>
    tmp = 2U;
 800194a:	2302      	movs	r3, #2
 800194c:	e7cc      	b.n	80018e8 <LTDC_SetConfig+0x142>
 800194e:	2302      	movs	r3, #2
 8001950:	e7ca      	b.n	80018e8 <LTDC_SetConfig+0x142>
	...

08001954 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8001954:	2800      	cmp	r0, #0
 8001956:	d072      	beq.n	8001a3e <HAL_LTDC_Init+0xea>
{
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800195c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d067      	beq.n	8001a34 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001964:	2302      	movs	r3, #2
 8001966:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800196a:	6822      	ldr	r2, [r4, #0]
 800196c:	6993      	ldr	r3, [r2, #24]
 800196e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001972:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001974:	6821      	ldr	r1, [r4, #0]
 8001976:	698a      	ldr	r2, [r1, #24]
 8001978:	6863      	ldr	r3, [r4, #4]
 800197a:	68a0      	ldr	r0, [r4, #8]
 800197c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800197e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001980:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001982:	6920      	ldr	r0, [r4, #16]
 8001984:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001986:	4313      	orrs	r3, r2
 8001988:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800198a:	6821      	ldr	r1, [r4, #0]
 800198c:	688a      	ldr	r2, [r1, #8]
 800198e:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_LTDC_Init+0xf0>)
 8001990:	401a      	ands	r2, r3
 8001992:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001994:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001996:	6820      	ldr	r0, [r4, #0]
 8001998:	6882      	ldr	r2, [r0, #8]
 800199a:	69a1      	ldr	r1, [r4, #24]
 800199c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80019a0:	430a      	orrs	r2, r1
 80019a2:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80019a4:	6821      	ldr	r1, [r4, #0]
 80019a6:	68ca      	ldr	r2, [r1, #12]
 80019a8:	401a      	ands	r2, r3
 80019aa:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80019ac:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80019ae:	6820      	ldr	r0, [r4, #0]
 80019b0:	68c2      	ldr	r2, [r0, #12]
 80019b2:	6a21      	ldr	r1, [r4, #32]
 80019b4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80019b8:	430a      	orrs	r2, r1
 80019ba:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80019bc:	6821      	ldr	r1, [r4, #0]
 80019be:	690a      	ldr	r2, [r1, #16]
 80019c0:	401a      	ands	r2, r3
 80019c2:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80019c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80019c6:	6820      	ldr	r0, [r4, #0]
 80019c8:	6902      	ldr	r2, [r0, #16]
 80019ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80019cc:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80019d0:	430a      	orrs	r2, r1
 80019d2:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80019d4:	6821      	ldr	r1, [r4, #0]
 80019d6:	694a      	ldr	r2, [r1, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80019dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80019de:	6821      	ldr	r1, [r4, #0]
 80019e0:	694b      	ldr	r3, [r1, #20]
 80019e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019e4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80019e8:	4313      	orrs	r3, r2
 80019ea:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80019ec:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80019f0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80019f4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80019f6:	6821      	ldr	r1, [r4, #0]
 80019f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80019fa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80019fe:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001a00:	6821      	ldr	r1, [r4, #0]
 8001a02:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001a04:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001a08:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001a0c:	4303      	orrs	r3, r0
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001a16:	f043 0306 	orr.w	r3, r3, #6
 8001a1a:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001a1c:	6822      	ldr	r2, [r4, #0]
 8001a1e:	6993      	ldr	r3, [r2, #24]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001a26:	2000      	movs	r0, #0
 8001a28:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8001a34:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001a38:	f001 fcbe 	bl	80033b8 <HAL_LTDC_MspInit>
 8001a3c:	e792      	b.n	8001964 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	f000f800 	.word	0xf000f800

08001a48 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8001a48:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d027      	beq.n	8001aa0 <HAL_LTDC_ConfigLayer+0x58>
{
 8001a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a54:	4606      	mov	r6, r0
 8001a56:	460f      	mov	r7, r1
 8001a58:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8001a5a:	f04f 0801 	mov.w	r8, #1
 8001a5e:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001a62:	2302      	movs	r3, #2
 8001a64:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001a68:	2434      	movs	r4, #52	; 0x34
 8001a6a:	fb04 0402 	mla	r4, r4, r2, r0
 8001a6e:	3438      	adds	r4, #56	; 0x38
 8001a70:	460d      	mov	r5, r1
 8001a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7e:	682b      	ldr	r3, [r5, #0]
 8001a80:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001a82:	4662      	mov	r2, ip
 8001a84:	4639      	mov	r1, r7
 8001a86:	4630      	mov	r0, r6
 8001a88:	f7ff fe8d 	bl	80017a6 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001a8c:	6833      	ldr	r3, [r6, #0]
 8001a8e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001a92:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8001aa0:	2002      	movs	r0, #2
}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa4:	2800      	cmp	r0, #0
 8001aa6:	f000 81df 	beq.w	8001e68 <HAL_RCC_OscConfig+0x3c4>
{
 8001aaa:	b570      	push	{r4, r5, r6, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	f013 0f01 	tst.w	r3, #1
 8001ab6:	d03b      	beq.n	8001b30 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab8:	4ba6      	ldr	r3, [pc, #664]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d02c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac4:	4ba3      	ldr	r3, [pc, #652]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d021      	beq.n	8001b14 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	6863      	ldr	r3, [r4, #4]
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d04f      	beq.n	8001b78 <HAL_RCC_OscConfig+0xd4>
 8001ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001adc:	d052      	beq.n	8001b84 <HAL_RCC_OscConfig+0xe0>
 8001ade:	4b9d      	ldr	r3, [pc, #628]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d050      	beq.n	8001b98 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb2b 	bl	8001150 <HAL_GetTick>
 8001afa:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afc:	4b95      	ldr	r3, [pc, #596]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b04:	d114      	bne.n	8001b30 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b06:	f7ff fb23 	bl	8001150 <HAL_GetTick>
 8001b0a:	1b40      	subs	r0, r0, r5
 8001b0c:	2864      	cmp	r0, #100	; 0x64
 8001b0e:	d9f5      	bls.n	8001afc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	e1b0      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b14:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b1c:	d0d8      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b8d      	ldr	r3, [pc, #564]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001b26:	d003      	beq.n	8001b30 <HAL_RCC_OscConfig+0x8c>
 8001b28:	6863      	ldr	r3, [r4, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 819e 	beq.w	8001e6c <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	f013 0f02 	tst.w	r3, #2
 8001b36:	d054      	beq.n	8001be2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f013 0f0c 	tst.w	r3, #12
 8001b40:	d03e      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b42:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d033      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b4e:	68e3      	ldr	r3, [r4, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d067      	beq.n	8001c24 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b54:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <HAL_RCC_OscConfig+0x2b4>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5a:	f7ff faf9 	bl	8001150 <HAL_GetTick>
 8001b5e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	4b7c      	ldr	r3, [pc, #496]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f013 0f02 	tst.w	r3, #2
 8001b68:	d153      	bne.n	8001c12 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b6a:	f7ff faf1 	bl	8001150 <HAL_GetTick>
 8001b6e:	1b40      	subs	r0, r0, r5
 8001b70:	2802      	cmp	r0, #2
 8001b72:	d9f5      	bls.n	8001b60 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b74:	2003      	movs	r0, #3
 8001b76:	e17e      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	4a76      	ldr	r2, [pc, #472]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e7b5      	b.n	8001af0 <HAL_RCC_OscConfig+0x4c>
 8001b84:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e7ab      	b.n	8001af0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001b98:	f7ff fada 	bl	8001150 <HAL_GetTick>
 8001b9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ba6:	d0c3      	beq.n	8001b30 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fad2 	bl	8001150 <HAL_GetTick>
 8001bac:	1b40      	subs	r0, r0, r5
 8001bae:	2864      	cmp	r0, #100	; 0x64
 8001bb0:	d9f5      	bls.n	8001b9e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	e15f      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001bbe:	d1c6      	bne.n	8001b4e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f013 0f02 	tst.w	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
 8001bca:	68e3      	ldr	r3, [r4, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f040 814f 	bne.w	8001e70 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4a60      	ldr	r2, [pc, #384]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001bd4:	6813      	ldr	r3, [r2, #0]
 8001bd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bda:	6921      	ldr	r1, [r4, #16]
 8001bdc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001be0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	f013 0f08 	tst.w	r3, #8
 8001be8:	d040      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bea:	6963      	ldr	r3, [r4, #20]
 8001bec:	b363      	cbz	r3, 8001c48 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff faac 	bl	8001150 <HAL_GetTick>
 8001bf8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfe:	f013 0f02 	tst.w	r3, #2
 8001c02:	d133      	bne.n	8001c6c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff faa4 	bl	8001150 <HAL_GetTick>
 8001c08:	1b40      	subs	r0, r0, r5
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f5      	bls.n	8001bfa <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e131      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4a50      	ldr	r2, [pc, #320]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c14:	6813      	ldr	r3, [r2, #0]
 8001c16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c1a:	6921      	ldr	r1, [r4, #16]
 8001c1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e7de      	b.n	8001be2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001c24:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <HAL_RCC_OscConfig+0x2b4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fa91 	bl	8001150 <HAL_GetTick>
 8001c2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f013 0f02 	tst.w	r3, #2
 8001c38:	d0d3      	beq.n	8001be2 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3a:	f7ff fa89 	bl	8001150 <HAL_GetTick>
 8001c3e:	1b40      	subs	r0, r0, r5
 8001c40:	2802      	cmp	r0, #2
 8001c42:	d9f5      	bls.n	8001c30 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8001c44:	2003      	movs	r0, #3
 8001c46:	e116      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_OscConfig+0x2b8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fa7f 	bl	8001150 <HAL_GetTick>
 8001c52:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f013 0f02 	tst.w	r3, #2
 8001c5c:	d006      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fa77 	bl	8001150 <HAL_GetTick>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	2802      	cmp	r0, #2
 8001c66:	d9f5      	bls.n	8001c54 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8001c68:	2003      	movs	r0, #3
 8001c6a:	e104      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	f013 0f04 	tst.w	r3, #4
 8001c72:	d078      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001c7c:	d10d      	bne.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c96:	2501      	movs	r5, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8001c9a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_RCC_OscConfig+0x2bc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ca4:	d021      	beq.n	8001cea <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca6:	68a3      	ldr	r3, [r4, #8]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d032      	beq.n	8001d12 <HAL_RCC_OscConfig+0x26e>
 8001cac:	2b05      	cmp	r3, #5
 8001cae:	d036      	beq.n	8001d1e <HAL_RCC_OscConfig+0x27a>
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001cb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	671a      	str	r2, [r3, #112]	; 0x70
 8001cba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cbc:	f022 0204 	bic.w	r2, r2, #4
 8001cc0:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc2:	68a3      	ldr	r3, [r4, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d034      	beq.n	8001d32 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fa42 	bl	8001150 <HAL_GetTick>
 8001ccc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cce:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	f013 0f02 	tst.w	r3, #2
 8001cd6:	d145      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fa3a 	bl	8001150 <HAL_GetTick>
 8001cdc:	1b80      	subs	r0, r0, r6
 8001cde:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ce2:	4298      	cmp	r0, r3
 8001ce4:	d9f3      	bls.n	8001cce <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001ce6:	2003      	movs	r0, #3
 8001ce8:	e0c5      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x2bc>)
 8001cec:	6813      	ldr	r3, [r2, #0]
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fa2c 	bl	8001150 <HAL_GetTick>
 8001cf8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x2bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001d02:	d1d0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d04:	f7ff fa24 	bl	8001150 <HAL_GetTick>
 8001d08:	1b80      	subs	r0, r0, r6
 8001d0a:	2802      	cmp	r0, #2
 8001d0c:	d9f5      	bls.n	8001cfa <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8001d0e:	2003      	movs	r0, #3
 8001d10:	e0b1      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d12:	4a10      	ldr	r2, [pc, #64]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001d14:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1c:	e7d1      	b.n	8001cc2 <HAL_RCC_OscConfig+0x21e>
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001d20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d22:	f042 0204 	orr.w	r2, r2, #4
 8001d26:	671a      	str	r2, [r3, #112]	; 0x70
 8001d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	671a      	str	r2, [r3, #112]	; 0x70
 8001d30:	e7c7      	b.n	8001cc2 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fa0d 	bl	8001150 <HAL_GetTick>
 8001d36:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_OscConfig+0x2b0>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	f013 0f02 	tst.w	r3, #2
 8001d40:	d010      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fa05 	bl	8001150 <HAL_GetTick>
 8001d46:	1b80      	subs	r0, r0, r6
 8001d48:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d4c:	4298      	cmp	r0, r3
 8001d4e:	d9f3      	bls.n	8001d38 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8001d50:	2003      	movs	r0, #3
 8001d52:	e090      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
 8001d54:	40023800 	.word	0x40023800
 8001d58:	42470000 	.word	0x42470000
 8001d5c:	42470e80 	.word	0x42470e80
 8001d60:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d64:	b9ed      	cbnz	r5, 8001da2 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d66:	69a3      	ldr	r3, [r4, #24]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8083 	beq.w	8001e74 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6e:	4a49      	ldr	r2, [pc, #292]	; (8001e94 <HAL_RCC_OscConfig+0x3f0>)
 8001d70:	6892      	ldr	r2, [r2, #8]
 8001d72:	f002 020c 	and.w	r2, r2, #12
 8001d76:	2a08      	cmp	r2, #8
 8001d78:	d051      	beq.n	8001e1e <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d017      	beq.n	8001dae <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <HAL_RCC_OscConfig+0x3f4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff f9e4 	bl	8001150 <HAL_GetTick>
 8001d88:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <HAL_RCC_OscConfig+0x3f0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d92:	d042      	beq.n	8001e1a <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff f9dc 	bl	8001150 <HAL_GetTick>
 8001d98:	1b00      	subs	r0, r0, r4
 8001d9a:	2802      	cmp	r0, #2
 8001d9c:	d9f5      	bls.n	8001d8a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001d9e:	2003      	movs	r0, #3
 8001da0:	e069      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da2:	4a3c      	ldr	r2, [pc, #240]	; (8001e94 <HAL_RCC_OscConfig+0x3f0>)
 8001da4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	e7db      	b.n	8001d66 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_RCC_OscConfig+0x3f4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001db4:	f7ff f9cc 	bl	8001150 <HAL_GetTick>
 8001db8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x3f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001dc2:	d006      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff f9c4 	bl	8001150 <HAL_GetTick>
 8001dc8:	1b40      	subs	r0, r0, r5
 8001dca:	2802      	cmp	r0, #2
 8001dcc:	d9f5      	bls.n	8001dba <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001dce:	2003      	movs	r0, #3
 8001dd0:	e051      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dd2:	69e3      	ldr	r3, [r4, #28]
 8001dd4:	6a22      	ldr	r2, [r4, #32]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dda:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001dde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001de0:	0852      	lsrs	r2, r2, #1
 8001de2:	3a01      	subs	r2, #1
 8001de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001de8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001dee:	4a29      	ldr	r2, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x3f0>)
 8001df0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001df2:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <HAL_RCC_OscConfig+0x3f4>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001df8:	f7ff f9aa 	bl	8001150 <HAL_GetTick>
 8001dfc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_OscConfig+0x3f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f9a2 	bl	8001150 <HAL_GetTick>
 8001e0c:	1b00      	subs	r0, r0, r4
 8001e0e:	2802      	cmp	r0, #2
 8001e10:	d9f5      	bls.n	8001dfe <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	e02f      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001e16:	2000      	movs	r0, #0
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	e02b      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d02b      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_RCC_OscConfig+0x3f0>)
 8001e24:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001e2a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2c:	4291      	cmp	r1, r2
 8001e2e:	d126      	bne.n	8001e7e <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e34:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	428a      	cmp	r2, r1
 8001e38:	d123      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001e40:	401a      	ands	r2, r3
 8001e42:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001e46:	d11e      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001e4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e4e:	0852      	lsrs	r2, r2, #1
 8001e50:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e52:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001e56:	d118      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e58:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001e5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8001e62:	d114      	bne.n	8001e8e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8001e64:	2000      	movs	r0, #0
 8001e66:	e006      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
}
 8001e6a:	4770      	bx	lr
        return HAL_ERROR;
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	e002      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8001e70:	2001      	movs	r0, #1
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8001e74:	2000      	movs	r0, #0
}
 8001e76:	b002      	add	sp, #8
 8001e78:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	e7fb      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e7f9      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
 8001e82:	2001      	movs	r0, #1
 8001e84:	e7f7      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
 8001e86:	2001      	movs	r0, #1
 8001e88:	e7f5      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7f3      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
 8001e8e:	2001      	movs	r0, #1
 8001e90:	e7f1      	b.n	8001e76 <HAL_RCC_OscConfig+0x3d2>
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	42470060 	.word	0x42470060

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d053      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0xb6>
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d153      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eae:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ebc:	d028      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ec6:	0158      	lsls	r0, r3, #5
 8001ec8:	2100      	movs	r1, #0
 8001eca:	1ac0      	subs	r0, r0, r3
 8001ecc:	f161 0100 	sbc.w	r1, r1, #0
 8001ed0:	018e      	lsls	r6, r1, #6
 8001ed2:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8001ed6:	0187      	lsls	r7, r0, #6
 8001ed8:	1a3c      	subs	r4, r7, r0
 8001eda:	eb66 0501 	sbc.w	r5, r6, r1
 8001ede:	00e9      	lsls	r1, r5, #3
 8001ee0:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8001ee4:	00e0      	lsls	r0, r4, #3
 8001ee6:	18c0      	adds	r0, r0, r3
 8001ee8:	f141 0100 	adc.w	r1, r1, #0
 8001eec:	024b      	lsls	r3, r1, #9
 8001eee:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001ef2:	0244      	lsls	r4, r0, #9
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f7fe fe65 	bl	8000bc8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001f0a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001f0e:	e023      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001f18:	015c      	lsls	r4, r3, #5
 8001f1a:	2500      	movs	r5, #0
 8001f1c:	1ae4      	subs	r4, r4, r3
 8001f1e:	f165 0500 	sbc.w	r5, r5, #0
 8001f22:	01ae      	lsls	r6, r5, #6
 8001f24:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8001f28:	01a7      	lsls	r7, r4, #6
 8001f2a:	1b38      	subs	r0, r7, r4
 8001f2c:	eb66 0105 	sbc.w	r1, r6, r5
 8001f30:	00cc      	lsls	r4, r1, #3
 8001f32:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8001f36:	00c5      	lsls	r5, r0, #3
 8001f38:	18e8      	adds	r0, r5, r3
 8001f3a:	f144 0100 	adc.w	r1, r4, #0
 8001f3e:	028b      	lsls	r3, r1, #10
 8001f40:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001f44:	0284      	lsls	r4, r0, #10
 8001f46:	4620      	mov	r0, r4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f7fe fe3c 	bl	8000bc8 <__aeabi_uldivmod>
 8001f50:	e7d5      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	00f42400 	.word	0x00f42400

08001f68 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001f68:	2800      	cmp	r0, #0
 8001f6a:	f000 809b 	beq.w	80020a4 <HAL_RCC_ClockConfig+0x13c>
{
 8001f6e:	b570      	push	{r4, r5, r6, lr}
 8001f70:	460d      	mov	r5, r1
 8001f72:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <HAL_RCC_ClockConfig+0x14c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	428b      	cmp	r3, r1
 8001f7e:	d208      	bcs.n	8001f92 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f80:	b2cb      	uxtb	r3, r1
 8001f82:	4a4c      	ldr	r2, [pc, #304]	; (80020b4 <HAL_RCC_ClockConfig+0x14c>)
 8001f84:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	6813      	ldr	r3, [r2, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	428b      	cmp	r3, r1
 8001f8e:	f040 808b 	bne.w	80020a8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	f013 0f02 	tst.w	r3, #2
 8001f98:	d017      	beq.n	8001fca <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	f013 0f04 	tst.w	r3, #4
 8001f9e:	d004      	beq.n	8001faa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4a45      	ldr	r2, [pc, #276]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8001fa2:	6893      	ldr	r3, [r2, #8]
 8001fa4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	f013 0f08 	tst.w	r3, #8
 8001fb0:	d004      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb2:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8001fb4:	6893      	ldr	r3, [r2, #8]
 8001fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fba:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4a3e      	ldr	r2, [pc, #248]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8001fbe:	6893      	ldr	r3, [r2, #8]
 8001fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fc4:	68a1      	ldr	r1, [r4, #8]
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	6823      	ldr	r3, [r4, #0]
 8001fcc:	f013 0f01 	tst.w	r3, #1
 8001fd0:	d032      	beq.n	8002038 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd2:	6863      	ldr	r3, [r4, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d021      	beq.n	800201c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd8:	1e9a      	subs	r2, r3, #2
 8001fda:	2a01      	cmp	r2, #1
 8001fdc:	d925      	bls.n	800202a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	4a36      	ldr	r2, [pc, #216]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	f012 0f02 	tst.w	r2, #2
 8001fe6:	d061      	beq.n	80020ac <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fe8:	4933      	ldr	r1, [pc, #204]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8001fea:	688a      	ldr	r2, [r1, #8]
 8001fec:	f022 0203 	bic.w	r2, r2, #3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001ff4:	f7ff f8ac 	bl	8001150 <HAL_GetTick>
 8001ff8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	6862      	ldr	r2, [r4, #4]
 8002004:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002008:	d016      	beq.n	8002038 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200a:	f7ff f8a1 	bl	8001150 <HAL_GetTick>
 800200e:	1b80      	subs	r0, r0, r6
 8002010:	f241 3388 	movw	r3, #5000	; 0x1388
 8002014:	4298      	cmp	r0, r3
 8002016:	d9f0      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002018:	2003      	movs	r0, #3
 800201a:	e042      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201c:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002024:	d1e0      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002026:	2001      	movs	r0, #1
 8002028:	e03b      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002032:	d1d9      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002034:	2001      	movs	r0, #1
 8002036:	e034      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_ClockConfig+0x14c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	42ab      	cmp	r3, r5
 8002042:	d907      	bls.n	8002054 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002044:	b2ea      	uxtb	r2, r5
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCC_ClockConfig+0x14c>)
 8002048:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	42ab      	cmp	r3, r5
 8002052:	d12d      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	f013 0f04 	tst.w	r3, #4
 800205a:	d006      	beq.n	800206a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 800205e:	6893      	ldr	r3, [r2, #8]
 8002060:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002064:	68e1      	ldr	r1, [r4, #12]
 8002066:	430b      	orrs	r3, r1
 8002068:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	f013 0f08 	tst.w	r3, #8
 8002070:	d007      	beq.n	8002082 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002072:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8002074:	6893      	ldr	r3, [r2, #8]
 8002076:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800207a:	6921      	ldr	r1, [r4, #16]
 800207c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002080:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002082:	f7ff ff0b 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_RCC_ClockConfig+0x150>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x154>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	40d8      	lsrs	r0, r3
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x158>)
 8002096:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_ClockConfig+0x15c>)
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	f001 fcfa 	bl	8003a94 <HAL_InitTick>
  return HAL_OK;
 80020a0:	2000      	movs	r0, #0
}
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80020a4:	2001      	movs	r0, #1
}
 80020a6:	4770      	bx	lr
      return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
 80020aa:	e7fa      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
 80020ae:	e7f8      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
 80020b2:	e7f6      	b.n	80020a2 <HAL_RCC_ClockConfig+0x13a>
 80020b4:	40023c00 	.word	0x40023c00
 80020b8:	40023800 	.word	0x40023800
 80020bc:	08062798 	.word	0x08062798
 80020c0:	20000644 	.word	0x20000644
 80020c4:	2000002c 	.word	0x2000002c

080020c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80020c8:	4b01      	ldr	r3, [pc, #4]	; (80020d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000644 	.word	0x20000644

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020d6:	f7ff fff7 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020e2:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80020e4:	5cd3      	ldrb	r3, [r2, r3]
}
 80020e6:	40d8      	lsrs	r0, r3
 80020e8:	bd08      	pop	{r3, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	080627a8 	.word	0x080627a8

080020f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020f6:	f7ff ffe7 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_RCC_GetPCLK2Freq+0x18>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002102:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
}
 8002106:	40d8      	lsrs	r0, r3
 8002108:	bd08      	pop	{r3, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	080627a8 	.word	0x080627a8

08002114 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002114:	230f      	movs	r3, #15
 8002116:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_GetClockConfig+0x34>)
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002128:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002130:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800213a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <HAL_RCC_GetClockConfig+0x38>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	600b      	str	r3, [r1, #0]
}
 8002146:	4770      	bx	lr
 8002148:	40023800 	.word	0x40023800
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002150:	b530      	push	{r4, r5, lr}
 8002152:	b083      	sub	sp, #12
 8002154:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002156:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002158:	f013 0f43 	tst.w	r3, #67	; 0x43
 800215c:	d114      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x38>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f013 0f0c 	tst.w	r3, #12
 8002164:	d169      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xea>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	f013 0f20 	tst.w	r3, #32
 800216c:	f040 80be 	bne.w	80022ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	f013 0f10 	tst.w	r3, #16
 8002176:	f000 8120 	beq.w	80023ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800217a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800217e:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002180:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002182:	2000      	movs	r0, #0
}
 8002184:	b003      	add	sp, #12
 8002186:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002188:	4b8e      	ldr	r3, [pc, #568]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800218e:	f7fe ffdf 	bl	8001150 <HAL_GetTick>
 8002192:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002194:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800219c:	d006      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800219e:	f7fe ffd7 	bl	8001150 <HAL_GetTick>
 80021a2:	1b43      	subs	r3, r0, r5
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d9f5      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x44>
        return HAL_TIMEOUT;
 80021a8:	2003      	movs	r0, #3
 80021aa:	e7eb      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	f013 0f01 	tst.w	r3, #1
 80021b2:	d007      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80021b4:	6862      	ldr	r2, [r4, #4]
 80021b6:	68a3      	ldr	r3, [r4, #8]
 80021b8:	071b      	lsls	r3, r3, #28
 80021ba:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021be:	4a82      	ldr	r2, [pc, #520]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80021c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	f013 0f02 	tst.w	r3, #2
 80021ca:	d015      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021cc:	4a7e      	ldr	r2, [pc, #504]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80021ce:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80021d2:	6860      	ldr	r0, [r4, #4]
 80021d4:	68e3      	ldr	r3, [r4, #12]
 80021d6:	061b      	lsls	r3, r3, #24
 80021d8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80021dc:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80021e0:	430b      	orrs	r3, r1
 80021e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021e6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80021ea:	f023 031f 	bic.w	r3, r3, #31
 80021ee:	69e1      	ldr	r1, [r4, #28]
 80021f0:	3901      	subs	r1, #1
 80021f2:	430b      	orrs	r3, r1
 80021f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002200:	6862      	ldr	r2, [r4, #4]
 8002202:	68e3      	ldr	r3, [r4, #12]
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800220a:	68a2      	ldr	r2, [r4, #8]
 800220c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002210:	4a6d      	ldr	r2, [pc, #436]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002212:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002216:	4b6b      	ldr	r3, [pc, #428]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800221c:	f7fe ff98 	bl	8001150 <HAL_GetTick>
 8002220:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002222:	4b69      	ldr	r3, [pc, #420]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800222a:	d198      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800222c:	f7fe ff90 	bl	8001150 <HAL_GetTick>
 8002230:	1b40      	subs	r0, r0, r5
 8002232:	2802      	cmp	r0, #2
 8002234:	d9f5      	bls.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
 8002238:	e7a4      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLSAI_DISABLE();
 800223a:	4b64      	ldr	r3, [pc, #400]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002240:	f7fe ff86 	bl	8001150 <HAL_GetTick>
 8002244:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002246:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800224e:	d006      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002250:	f7fe ff7e 	bl	8001150 <HAL_GetTick>
 8002254:	1b43      	subs	r3, r0, r5
 8002256:	2b02      	cmp	r3, #2
 8002258:	d9f5      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0xf6>
        return HAL_TIMEOUT;
 800225a:	2003      	movs	r0, #3
 800225c:	e792      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x34>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	f013 0f04 	tst.w	r3, #4
 8002264:	d016      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x144>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002266:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002268:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800226c:	6920      	ldr	r0, [r4, #16]
 800226e:	6963      	ldr	r3, [r4, #20]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002276:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800227a:	430b      	orrs	r3, r1
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002280:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002284:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002288:	6a21      	ldr	r1, [r4, #32]
 800228a:	3901      	subs	r1, #1
 800228c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002290:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	f013 0f08 	tst.w	r3, #8
 800229a:	d014      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800229c:	4a4a      	ldr	r2, [pc, #296]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800229e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80022a2:	6921      	ldr	r1, [r4, #16]
 80022a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80022a8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80022ac:	69a1      	ldr	r1, [r4, #24]
 80022ae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80022b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022b6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80022ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80022be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80022c0:	430b      	orrs	r3, r1
 80022c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80022cc:	f7fe ff40 	bl	8001150 <HAL_GetTick>
 80022d0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80022da:	f47f af44 	bne.w	8002166 <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80022de:	f7fe ff37 	bl	8001150 <HAL_GetTick>
 80022e2:	1b40      	subs	r0, r0, r5
 80022e4:	2802      	cmp	r0, #2
 80022e6:	d9f4      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
        return HAL_TIMEOUT;
 80022e8:	2003      	movs	r0, #3
 80022ea:	e74b      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80022f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002304:	4a32      	ldr	r2, [pc, #200]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800230e:	f7fe ff1f 	bl	8001150 <HAL_GetTick>
 8002312:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002314:	4b2e      	ldr	r3, [pc, #184]	; (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f413 7f80 	tst.w	r3, #256	; 0x100
 800231c:	d106      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fe ff17 	bl	8001150 <HAL_GetTick>
 8002322:	1b40      	subs	r0, r0, r5
 8002324:	2802      	cmp	r0, #2
 8002326:	d9f5      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        return HAL_TIMEOUT;
 8002328:	2003      	movs	r0, #3
 800232a:	e72b      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x34>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800232c:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002330:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002334:	d012      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8002336:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002338:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800233c:	429a      	cmp	r2, r3
 800233e:	d00d      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x20c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002340:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002342:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002344:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002348:	4922      	ldr	r1, [pc, #136]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800234a:	2001      	movs	r0, #1
 800234c:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800234e:	2000      	movs	r0, #0
 8002350:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8002352:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f013 0f01 	tst.w	r3, #1
 800235a:	d112      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800235c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800235e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002362:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002366:	d01d      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002368:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800236a:	6893      	ldr	r3, [r2, #8]
 800236c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002370:	6093      	str	r3, [r2, #8]
 8002372:	4915      	ldr	r1, [pc, #84]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002374:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002376:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002378:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800237c:	4313      	orrs	r3, r2
 800237e:	670b      	str	r3, [r1, #112]	; 0x70
 8002380:	e6f6      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8002382:	f7fe fee5 	bl	8001150 <HAL_GetTick>
 8002386:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	f013 0f02 	tst.w	r3, #2
 8002390:	d1e4      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x20c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe fedd 	bl	8001150 <HAL_GetTick>
 8002396:	1b40      	subs	r0, r0, r5
 8002398:	f241 3388 	movw	r3, #5000	; 0x1388
 800239c:	4298      	cmp	r0, r3
 800239e:	d9f3      	bls.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x238>
            return HAL_TIMEOUT;
 80023a0:	2003      	movs	r0, #3
 80023a2:	e6ef      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023a4:	4908      	ldr	r1, [pc, #32]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80023a6:	688a      	ldr	r2, [r1, #8]
 80023a8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80023ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
 80023b8:	e7db      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x222>
  return HAL_OK;
 80023ba:	2000      	movs	r0, #0
 80023bc:	e6e2      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80023be:	bf00      	nop
 80023c0:	424711e0 	.word	0x424711e0
 80023c4:	42470068 	.word	0x42470068
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470070 	.word	0x42470070
 80023d0:	40007000 	.word	0x40007000
 80023d4:	42470e40 	.word	0x42470e40

080023d8 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80023d8:	b1e0      	cbz	r0, 8002414 <HAL_SDRAM_Init+0x3c>
{   
 80023da:	b538      	push	{r3, r4, r5, lr}
 80023dc:	460d      	mov	r5, r1
 80023de:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80023e0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80023e4:	b18b      	cbz	r3, 800240a <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80023ec:	4621      	mov	r1, r4
 80023ee:	f851 0b04 	ldr.w	r0, [r1], #4
 80023f2:	f000 fbc2 	bl	8002b7a <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80023f6:	6862      	ldr	r2, [r4, #4]
 80023f8:	4629      	mov	r1, r5
 80023fa:	6820      	ldr	r0, [r4, #0]
 80023fc:	f000 fbf9 	bl	8002bf2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002400:	2301      	movs	r3, #1
 8002402:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8002406:	2000      	movs	r0, #0
}
 8002408:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800240a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800240e:	f000 fe0d 	bl	800302c <HAL_SDRAM_MspInit>
 8002412:	e7e8      	b.n	80023e6 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8002414:	2001      	movs	r0, #1
}
 8002416:	4770      	bx	lr

08002418 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002418:	2800      	cmp	r0, #0
 800241a:	d05a      	beq.n	80024d2 <HAL_SPI_Init+0xba>
{
 800241c:	b510      	push	{r4, lr}
 800241e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002420:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002422:	b933      	cbnz	r3, 8002432 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002424:	6843      	ldr	r3, [r0, #4]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800242a:	d005      	beq.n	8002438 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800242c:	2300      	movs	r3, #0
 800242e:	61c3      	str	r3, [r0, #28]
 8002430:	e002      	b.n	8002438 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002436:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800243c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002440:	2b00      	cmp	r3, #0
 8002442:	d040      	beq.n	80024c6 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800244a:	6822      	ldr	r2, [r4, #0]
 800244c:	6813      	ldr	r3, [r2, #0]
 800244e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002452:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800245a:	68a2      	ldr	r2, [r4, #8]
 800245c:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8002460:	4313      	orrs	r3, r2
 8002462:	68e2      	ldr	r2, [r4, #12]
 8002464:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002468:	4313      	orrs	r3, r2
 800246a:	6922      	ldr	r2, [r4, #16]
 800246c:	f002 0202 	and.w	r2, r2, #2
 8002470:	4313      	orrs	r3, r2
 8002472:	6962      	ldr	r2, [r4, #20]
 8002474:	f002 0201 	and.w	r2, r2, #1
 8002478:	4313      	orrs	r3, r2
 800247a:	69a2      	ldr	r2, [r4, #24]
 800247c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002480:	4313      	orrs	r3, r2
 8002482:	69e2      	ldr	r2, [r4, #28]
 8002484:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002488:	4313      	orrs	r3, r2
 800248a:	6a22      	ldr	r2, [r4, #32]
 800248c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002490:	4313      	orrs	r3, r2
 8002492:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002494:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002498:	6821      	ldr	r1, [r4, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800249e:	8b63      	ldrh	r3, [r4, #26]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024a6:	f002 0210 	and.w	r2, r2, #16
 80024aa:	6821      	ldr	r1, [r4, #0]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024b0:	6822      	ldr	r2, [r4, #0]
 80024b2:	69d3      	ldr	r3, [r2, #28]
 80024b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024b8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ba:	2000      	movs	r0, #0
 80024bc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024be:	2301      	movs	r3, #1
 80024c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80024c4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80024c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80024ca:	4620      	mov	r0, r4
 80024cc:	f001 fa8e 	bl	80039ec <HAL_SPI_MspInit>
 80024d0:	e7b8      	b.n	8002444 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80024d2:	2001      	movs	r0, #1
}
 80024d4:	4770      	bx	lr

080024d6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d6:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024d8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024da:	6a05      	ldr	r5, [r0, #32]
 80024dc:	f025 0501 	bic.w	r5, r5, #1
 80024e0:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e2:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024e4:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024e8:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ec:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80024f0:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024f2:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80024f4:	6203      	str	r3, [r0, #32]
}
 80024f6:	bc30      	pop	{r4, r5}
 80024f8:	4770      	bx	lr

080024fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024fa:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fc:	6a05      	ldr	r5, [r0, #32]
 80024fe:	f025 0510 	bic.w	r5, r5, #16
 8002502:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002504:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002506:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002508:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800250c:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002510:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002514:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002518:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 800251a:	6203      	str	r3, [r0, #32]
}
 800251c:	bc30      	pop	{r4, r5}
 800251e:	4770      	bx	lr

08002520 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002520:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002526:	430b      	orrs	r3, r1
 8002528:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800252c:	6083      	str	r3, [r0, #8]
}
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002530:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d137      	bne.n	80025aa <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	6802      	ldr	r2, [r0, #0]
 8002542:	68d3      	ldr	r3, [r2, #12]
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_TIM_Base_Start_IT+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d020      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002556:	d01d      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
 8002558:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800255c:	4293      	cmp	r3, r2
 800255e:	d019      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
 8002560:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002564:	4293      	cmp	r3, r2
 8002566:	d015      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
 8002568:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800256c:	4293      	cmp	r3, r2
 800256e:	d011      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
 8002570:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
 8002578:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800257c:	4293      	cmp	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
 8002580:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002584:	4293      	cmp	r3, r2
 8002586:	d005      	beq.n	8002594 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002590:	2000      	movs	r0, #0
 8002592:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259a:	2a06      	cmp	r2, #6
 800259c:	d007      	beq.n	80025ae <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80025a6:	2000      	movs	r0, #0
 80025a8:	4770      	bx	lr
    return HAL_ERROR;
 80025aa:	2001      	movs	r0, #1
 80025ac:	4770      	bx	lr
  return HAL_OK;
 80025ae:	2000      	movs	r0, #0
}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40010000 	.word	0x40010000

080025b8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80025b8:	4770      	bx	lr

080025ba <HAL_TIM_IC_CaptureCallback>:
}
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80025bc:	4770      	bx	lr

080025be <HAL_TIM_TriggerCallback>:
}
 80025be:	4770      	bx	lr

080025c0 <HAL_TIM_IRQHandler>:
{
 80025c0:	b510      	push	{r4, lr}
 80025c2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025c4:	6803      	ldr	r3, [r0, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	f012 0f02 	tst.w	r2, #2
 80025cc:	d011      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	f012 0f02 	tst.w	r2, #2
 80025d4:	d00d      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025d6:	f06f 0202 	mvn.w	r2, #2
 80025da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025dc:	2301      	movs	r3, #1
 80025de:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025e0:	6803      	ldr	r3, [r0, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f013 0f03 	tst.w	r3, #3
 80025e8:	d070      	beq.n	80026cc <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	f7ff ffe6 	bl	80025ba <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	2300      	movs	r3, #0
 80025f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	f012 0f04 	tst.w	r2, #4
 80025fa:	d012      	beq.n	8002622 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	f012 0f04 	tst.w	r2, #4
 8002602:	d00e      	beq.n	8002622 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	f06f 0204 	mvn.w	r2, #4
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260a:	2302      	movs	r3, #2
 800260c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002616:	d05f      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff ffce 	bl	80025ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	2300      	movs	r3, #0
 8002620:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	f012 0f08 	tst.w	r2, #8
 800262a:	d012      	beq.n	8002652 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	f012 0f08 	tst.w	r2, #8
 8002632:	d00e      	beq.n	8002652 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002634:	f06f 0208 	mvn.w	r2, #8
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800263a:	2304      	movs	r3, #4
 800263c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f013 0f03 	tst.w	r3, #3
 8002646:	d04e      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002648:	4620      	mov	r0, r4
 800264a:	f7ff ffb6 	bl	80025ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	2300      	movs	r3, #0
 8002650:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	f012 0f10 	tst.w	r2, #16
 800265a:	d012      	beq.n	8002682 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	f012 0f10 	tst.w	r2, #16
 8002662:	d00e      	beq.n	8002682 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002664:	f06f 0210 	mvn.w	r2, #16
 8002668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800266a:	2308      	movs	r3, #8
 800266c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002676:	d03d      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff ff9e 	bl	80025ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	2300      	movs	r3, #0
 8002680:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002682:	6823      	ldr	r3, [r4, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	f012 0f01 	tst.w	r2, #1
 800268a:	d003      	beq.n	8002694 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	f012 0f01 	tst.w	r2, #1
 8002692:	d136      	bne.n	8002702 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	f012 0f80 	tst.w	r2, #128	; 0x80
 800269c:	d003      	beq.n	80026a6 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80026a4:	d134      	bne.n	8002710 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026ae:	d003      	beq.n	80026b8 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80026b6:	d132      	bne.n	800271e <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	f012 0f20 	tst.w	r2, #32
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	f012 0f20 	tst.w	r2, #32
 80026c8:	d130      	bne.n	800272c <HAL_TIM_IRQHandler+0x16c>
}
 80026ca:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026cc:	f7ff ff74 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff ff73 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
 80026d6:	e78a      	b.n	80025ee <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff ff6d 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026de:	4620      	mov	r0, r4
 80026e0:	f7ff ff6c 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
 80026e4:	e79b      	b.n	800261e <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7ff ff66 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff ff65 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
 80026f2:	e7ac      	b.n	800264e <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ff5f 	bl	80025b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fa:	4620      	mov	r0, r4
 80026fc:	f7ff ff5e 	bl	80025bc <HAL_TIM_PWM_PulseFinishedCallback>
 8002700:	e7bd      	b.n	800267e <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002702:	f06f 0201 	mvn.w	r2, #1
 8002706:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002708:	4620      	mov	r0, r4
 800270a:	f001 f863 	bl	80037d4 <HAL_TIM_PeriodElapsedCallback>
 800270e:	e7c1      	b.n	8002694 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002714:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002716:	4620      	mov	r0, r4
 8002718:	f000 f971 	bl	80029fe <HAL_TIMEx_BreakCallback>
 800271c:	e7c3      	b.n	80026a6 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800271e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002722:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff ff4a 	bl	80025be <HAL_TIM_TriggerCallback>
 800272a:	e7c5      	b.n	80026b8 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800272c:	f06f 0220 	mvn.w	r2, #32
 8002730:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002732:	4620      	mov	r0, r4
 8002734:	f000 f962 	bl	80029fc <HAL_TIMEx_CommutCallback>
}
 8002738:	e7c7      	b.n	80026ca <HAL_TIM_IRQHandler+0x10a>
	...

0800273c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800273c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800273e:	4a30      	ldr	r2, [pc, #192]	; (8002800 <TIM_Base_SetConfig+0xc4>)
 8002740:	4290      	cmp	r0, r2
 8002742:	d012      	beq.n	800276a <TIM_Base_SetConfig+0x2e>
 8002744:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002748:	d00f      	beq.n	800276a <TIM_Base_SetConfig+0x2e>
 800274a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800274e:	4290      	cmp	r0, r2
 8002750:	d00b      	beq.n	800276a <TIM_Base_SetConfig+0x2e>
 8002752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002756:	4290      	cmp	r0, r2
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0x2e>
 800275a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800275e:	4290      	cmp	r0, r2
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0x2e>
 8002762:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002766:	4290      	cmp	r0, r2
 8002768:	d103      	bne.n	8002772 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800276e:	684a      	ldr	r2, [r1, #4]
 8002770:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002772:	4a23      	ldr	r2, [pc, #140]	; (8002800 <TIM_Base_SetConfig+0xc4>)
 8002774:	4290      	cmp	r0, r2
 8002776:	d02a      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 8002778:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800277c:	d027      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 800277e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002782:	4290      	cmp	r0, r2
 8002784:	d023      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 8002786:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800278a:	4290      	cmp	r0, r2
 800278c:	d01f      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 800278e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002792:	4290      	cmp	r0, r2
 8002794:	d01b      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 8002796:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800279a:	4290      	cmp	r0, r2
 800279c:	d017      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 800279e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80027a2:	4290      	cmp	r0, r2
 80027a4:	d013      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 80027a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027aa:	4290      	cmp	r0, r2
 80027ac:	d00f      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 80027ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027b2:	4290      	cmp	r0, r2
 80027b4:	d00b      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 80027b6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80027ba:	4290      	cmp	r0, r2
 80027bc:	d007      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 80027be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027c2:	4290      	cmp	r0, r2
 80027c4:	d003      	beq.n	80027ce <TIM_Base_SetConfig+0x92>
 80027c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027ca:	4290      	cmp	r0, r2
 80027cc:	d103      	bne.n	80027d6 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d2:	68ca      	ldr	r2, [r1, #12]
 80027d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027da:	694a      	ldr	r2, [r1, #20]
 80027dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80027de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e0:	688b      	ldr	r3, [r1, #8]
 80027e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80027e4:	680b      	ldr	r3, [r1, #0]
 80027e6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <TIM_Base_SetConfig+0xc4>)
 80027ea:	4298      	cmp	r0, r3
 80027ec:	d003      	beq.n	80027f6 <TIM_Base_SetConfig+0xba>
 80027ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f2:	4298      	cmp	r0, r3
 80027f4:	d101      	bne.n	80027fa <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80027f6:	690b      	ldr	r3, [r1, #16]
 80027f8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80027fa:	2301      	movs	r3, #1
 80027fc:	6143      	str	r3, [r0, #20]
}
 80027fe:	4770      	bx	lr
 8002800:	40010000 	.word	0x40010000

08002804 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002804:	b340      	cbz	r0, 8002858 <HAL_TIM_Base_Init+0x54>
{
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800280a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800280e:	b1f3      	cbz	r3, 800284e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	2302      	movs	r3, #2
 8002812:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002816:	4621      	mov	r1, r4
 8002818:	f851 0b04 	ldr.w	r0, [r1], #4
 800281c:	f7ff ff8e 	bl	800273c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	2301      	movs	r3, #1
 8002822:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002826:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800282a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800282e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002832:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800283a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800283e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002846:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800284a:	2000      	movs	r0, #0
}
 800284c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800284e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002852:	f001 fa0b 	bl	8003c6c <HAL_TIM_Base_MspInit>
 8002856:	e7db      	b.n	8002810 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002858:	2001      	movs	r0, #1
}
 800285a:	4770      	bx	lr

0800285c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800285c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800285e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002860:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002864:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002868:	430a      	orrs	r2, r1
 800286a:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286c:	6082      	str	r2, [r0, #8]
}
 800286e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d078      	beq.n	800296e <HAL_TIM_ConfigClockSource+0xfa>
{
 800287c:	b510      	push	{r4, lr}
 800287e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002880:	2301      	movs	r3, #1
 8002882:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002886:	2302      	movs	r3, #2
 8002888:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800288c:	6802      	ldr	r2, [r0, #0]
 800288e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002894:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002898:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800289a:	680b      	ldr	r3, [r1, #0]
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d04c      	beq.n	800293a <HAL_TIM_ConfigClockSource+0xc6>
 80028a0:	d829      	bhi.n	80028f6 <HAL_TIM_ConfigClockSource+0x82>
 80028a2:	2b40      	cmp	r3, #64	; 0x40
 80028a4:	d054      	beq.n	8002950 <HAL_TIM_ConfigClockSource+0xdc>
 80028a6:	d90c      	bls.n	80028c2 <HAL_TIM_ConfigClockSource+0x4e>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d122      	bne.n	80028f2 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ac:	68ca      	ldr	r2, [r1, #12]
 80028ae:	6849      	ldr	r1, [r1, #4]
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	f7ff fe10 	bl	80024d6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028b6:	2150      	movs	r1, #80	; 0x50
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	f7ff fe31 	bl	8002520 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2000      	movs	r0, #0
      break;
 80028c0:	e005      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d00d      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x6e>
 80028c6:	d909      	bls.n	80028dc <HAL_TIM_ConfigClockSource+0x68>
 80028c8:	2b30      	cmp	r3, #48	; 0x30
 80028ca:	d00a      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80028cc:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80028d4:	2300      	movs	r3, #0
 80028d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80028da:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80028dc:	b10b      	cbz	r3, 80028e2 <HAL_TIM_ConfigClockSource+0x6e>
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d105      	bne.n	80028ee <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028e2:	4619      	mov	r1, r3
 80028e4:	6820      	ldr	r0, [r4, #0]
 80028e6:	f7ff fe1b 	bl	8002520 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2000      	movs	r0, #0
      break;
 80028ec:	e7ef      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
 80028f0:	e7ed      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
 80028f2:	2001      	movs	r0, #1
 80028f4:	e7eb      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	d034      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0xf2>
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002900:	d10c      	bne.n	800291c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002902:	68cb      	ldr	r3, [r1, #12]
 8002904:	684a      	ldr	r2, [r1, #4]
 8002906:	6889      	ldr	r1, [r1, #8]
 8002908:	6800      	ldr	r0, [r0, #0]
 800290a:	f7ff ffa7 	bl	800285c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290e:	6822      	ldr	r2, [r4, #0]
 8002910:	6893      	ldr	r3, [r2, #8]
 8002912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002916:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2000      	movs	r0, #0
      break;
 800291a:	e7d8      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d124      	bne.n	800296a <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002920:	68cb      	ldr	r3, [r1, #12]
 8002922:	684a      	ldr	r2, [r1, #4]
 8002924:	6889      	ldr	r1, [r1, #8]
 8002926:	6800      	ldr	r0, [r0, #0]
 8002928:	f7ff ff98 	bl	800285c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800292c:	6822      	ldr	r2, [r4, #0]
 800292e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002934:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2000      	movs	r0, #0
      break;
 8002938:	e7c9      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800293a:	68ca      	ldr	r2, [r1, #12]
 800293c:	6849      	ldr	r1, [r1, #4]
 800293e:	6800      	ldr	r0, [r0, #0]
 8002940:	f7ff fddb 	bl	80024fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002944:	2160      	movs	r1, #96	; 0x60
 8002946:	6820      	ldr	r0, [r4, #0]
 8002948:	f7ff fdea 	bl	8002520 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2000      	movs	r0, #0
      break;
 800294e:	e7be      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002950:	68ca      	ldr	r2, [r1, #12]
 8002952:	6849      	ldr	r1, [r1, #4]
 8002954:	6800      	ldr	r0, [r0, #0]
 8002956:	f7ff fdbe 	bl	80024d6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	6820      	ldr	r0, [r4, #0]
 800295e:	f7ff fddf 	bl	8002520 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2000      	movs	r0, #0
      break;
 8002964:	e7b3      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002966:	2000      	movs	r0, #0
 8002968:	e7b1      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800296a:	2001      	movs	r0, #1
 800296c:	e7af      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800296e:	2002      	movs	r0, #2
}
 8002970:	4770      	bx	lr
	...

08002974 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002974:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002978:	2b01      	cmp	r3, #1
 800297a:	d03b      	beq.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 800297c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800297e:	2301      	movs	r3, #1
 8002980:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298a:	6803      	ldr	r3, [r0, #0]
 800298c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800298e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002990:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002994:	680a      	ldr	r2, [r1, #0]
 8002996:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299a:	6803      	ldr	r3, [r0, #0]
 800299c:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d01a      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d017      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80029a8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d013      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80029b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d00f      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80029b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00b      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80029c0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80029c8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80029d0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d104      	bne.n	80029e2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029dc:	684a      	ldr	r2, [r1, #4]
 80029de:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029e0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e8:	2300      	movs	r3, #0
 80029ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80029ee:	4618      	mov	r0, r3
}
 80029f0:	bc30      	pop	{r4, r5}
 80029f2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80029f4:	2002      	movs	r0, #2
}
 80029f6:	4770      	bx	lr
 80029f8:	40010000 	.word	0x40010000

080029fc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029fc:	4770      	bx	lr

080029fe <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fe:	4770      	bx	lr

08002a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a00:	b570      	push	{r4, r5, r6, lr}
 8002a02:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a04:	6802      	ldr	r2, [r0, #0]
 8002a06:	6913      	ldr	r3, [r2, #16]
 8002a08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a0c:	68c1      	ldr	r1, [r0, #12]
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a12:	6883      	ldr	r3, [r0, #8]
 8002a14:	6902      	ldr	r2, [r0, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	6942      	ldr	r2, [r0, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	69c2      	ldr	r2, [r0, #28]
 8002a1e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002a20:	6801      	ldr	r1, [r0, #0]
 8002a22:	68cb      	ldr	r3, [r1, #12]
 8002a24:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a28:	f023 030c 	bic.w	r3, r3, #12
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a30:	6802      	ldr	r2, [r0, #0]
 8002a32:	6953      	ldr	r3, [r2, #20]
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	6981      	ldr	r1, [r0, #24]
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a3e:	6803      	ldr	r3, [r0, #0]
 8002a40:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <UART_SetConfig+0x114>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d006      	beq.n	8002a54 <UART_SetConfig+0x54>
 8002a46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d002      	beq.n	8002a54 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a4e:	f7ff fb41 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8002a52:	e001      	b.n	8002a58 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a54:	f7ff fb4e 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a58:	69e3      	ldr	r3, [r4, #28]
 8002a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a5e:	d02a      	beq.n	8002ab6 <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a60:	2600      	movs	r6, #0
 8002a62:	1805      	adds	r5, r0, r0
 8002a64:	eb46 0106 	adc.w	r1, r6, r6
 8002a68:	182d      	adds	r5, r5, r0
 8002a6a:	eb46 0101 	adc.w	r1, r6, r1
 8002a6e:	00cb      	lsls	r3, r1, #3
 8002a70:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002a74:	00ea      	lsls	r2, r5, #3
 8002a76:	4615      	mov	r5, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6863      	ldr	r3, [r4, #4]
 8002a7c:	009a      	lsls	r2, r3, #2
 8002a7e:	0f9b      	lsrs	r3, r3, #30
 8002a80:	1828      	adds	r0, r5, r0
 8002a82:	eb46 0101 	adc.w	r1, r6, r1
 8002a86:	f7fe f89f 	bl	8000bc8 <__aeabi_uldivmod>
 8002a8a:	4d23      	ldr	r5, [pc, #140]	; (8002b18 <UART_SetConfig+0x118>)
 8002a8c:	fba5 3200 	umull	r3, r2, r5, r0
 8002a90:	0951      	lsrs	r1, r2, #5
 8002a92:	2364      	movs	r3, #100	; 0x64
 8002a94:	fb03 0311 	mls	r3, r3, r1, r0
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	; 0x32
 8002a9c:	fba5 2303 	umull	r2, r3, r5, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002aa6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	6821      	ldr	r1, [r4, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]
  }
}
 8002ab4:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ab6:	2600      	movs	r6, #0
 8002ab8:	1805      	adds	r5, r0, r0
 8002aba:	eb46 0106 	adc.w	r1, r6, r6
 8002abe:	182d      	adds	r5, r5, r0
 8002ac0:	eb46 0101 	adc.w	r1, r6, r1
 8002ac4:	00cb      	lsls	r3, r1, #3
 8002ac6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002aca:	00ea      	lsls	r2, r5, #3
 8002acc:	4615      	mov	r5, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6862      	ldr	r2, [r4, #4]
 8002ad2:	4633      	mov	r3, r6
 8002ad4:	1892      	adds	r2, r2, r2
 8002ad6:	eb46 0303 	adc.w	r3, r6, r3
 8002ada:	1828      	adds	r0, r5, r0
 8002adc:	eb46 0101 	adc.w	r1, r6, r1
 8002ae0:	f7fe f872 	bl	8000bc8 <__aeabi_uldivmod>
 8002ae4:	4d0c      	ldr	r5, [pc, #48]	; (8002b18 <UART_SetConfig+0x118>)
 8002ae6:	fba5 3200 	umull	r3, r2, r5, r0
 8002aea:	0951      	lsrs	r1, r2, #5
 8002aec:	2364      	movs	r3, #100	; 0x64
 8002aee:	fb03 0311 	mls	r3, r3, r1, r0
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3332      	adds	r3, #50	; 0x32
 8002af6:	fba5 2303 	umull	r2, r3, r5, r3
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002b02:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	6821      	ldr	r1, [r4, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
 8002b10:	e7d0      	b.n	8002ab4 <UART_SetConfig+0xb4>
 8002b12:	bf00      	nop
 8002b14:	40011000 	.word	0x40011000
 8002b18:	51eb851f 	.word	0x51eb851f

08002b1c <HAL_UART_Init>:
  if (huart == NULL)
 8002b1c:	b358      	cbz	r0, 8002b76 <HAL_UART_Init+0x5a>
{
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b22:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b26:	b30b      	cbz	r3, 8002b6c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b28:	2324      	movs	r3, #36	; 0x24
 8002b2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	68d3      	ldr	r3, [r2, #12]
 8002b32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b36:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7ff ff61 	bl	8002a00 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	6913      	ldr	r3, [r2, #16]
 8002b42:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b46:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b48:	6822      	ldr	r2, [r4, #0]
 8002b4a:	6953      	ldr	r3, [r2, #20]
 8002b4c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002b50:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	68d3      	ldr	r3, [r2, #12]
 8002b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b5a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b60:	2320      	movs	r3, #32
 8002b62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002b6a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002b70:	f001 f8ae 	bl	8003cd0 <HAL_UART_MspInit>
 8002b74:	e7d8      	b.n	8002b28 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002b76:	2001      	movs	r0, #1
}
 8002b78:	4770      	bx	lr

08002b7a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8002b7a:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002b7c:	680b      	ldr	r3, [r1, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d01a      	beq.n	8002bb8 <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002b82:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002b84:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002b88:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002b8c:	684b      	ldr	r3, [r1, #4]
                                               Init->RowBitsNumber      |\
 8002b8e:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002b90:	4323      	orrs	r3, r4
                                               Init->MemoryDataWidth    |\
 8002b92:	68cc      	ldr	r4, [r1, #12]
                                               Init->RowBitsNumber      |\
 8002b94:	4323      	orrs	r3, r4
                                               Init->InternalBankNumber |\
 8002b96:	690c      	ldr	r4, [r1, #16]
                                               Init->MemoryDataWidth    |\
 8002b98:	4323      	orrs	r3, r4
                                               Init->CASLatency         |\
 8002b9a:	694c      	ldr	r4, [r1, #20]
                                               Init->InternalBankNumber |\
 8002b9c:	4323      	orrs	r3, r4
                                               Init->WriteProtection    |\
 8002b9e:	698c      	ldr	r4, [r1, #24]
                                               Init->CASLatency         |\
 8002ba0:	4323      	orrs	r3, r4
                                               Init->SDClockPeriod      |\
 8002ba2:	69cc      	ldr	r4, [r1, #28]
                                               Init->WriteProtection    |\
 8002ba4:	4323      	orrs	r3, r4
                                               Init->ReadBurst          |\
 8002ba6:	6a0c      	ldr	r4, [r1, #32]
                                               Init->SDClockPeriod      |\
 8002ba8:	4323      	orrs	r3, r4
                                               Init->ReadPipeDelay
 8002baa:	6a49      	ldr	r1, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 8002bac:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002bae:	4313      	orrs	r3, r2
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002bb0:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	bc30      	pop	{r4, r5}
 8002bb6:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8002bb8:	6802      	ldr	r2, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002bba:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002bbe:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8002bc0:	6a0c      	ldr	r4, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002bc2:	431c      	orrs	r4, r3
                        Init->ReadPipeDelay);  
 8002bc4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 8002bc6:	431c      	orrs	r4, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8002bc8:	4314      	orrs	r4, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002bca:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8002bcc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002bd0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002bd4:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber      |\
 8002bd6:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002bd8:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth    |\
 8002bda:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber      |\
 8002bdc:	432b      	orrs	r3, r5
                       Init->InternalBankNumber |\
 8002bde:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth    |\
 8002be0:	432b      	orrs	r3, r5
                       Init->CASLatency         |\
 8002be2:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber |\
 8002be4:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 8002be6:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency         |\
 8002be8:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8002bea:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002bec:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8002bee:	6043      	str	r3, [r0, #4]
 8002bf0:	e7df      	b.n	8002bb2 <FMC_SDRAM_Init+0x38>

08002bf2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002bf2:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002bf4:	2a01      	cmp	r2, #1
 8002bf6:	d021      	beq.n	8002c3c <FMC_SDRAM_Timing_Init+0x4a>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002bf8:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002bfa:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002bfe:	680b      	ldr	r3, [r1, #0]
 8002c00:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8002c02:	684c      	ldr	r4, [r1, #4]
 8002c04:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002c06:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8002c0a:	688c      	ldr	r4, [r1, #8]
 8002c0c:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8002c0e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002c12:	68cc      	ldr	r4, [r1, #12]
 8002c14:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8002c16:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8002c1a:	690c      	ldr	r4, [r1, #16]
 8002c1c:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8002c22:	694c      	ldr	r4, [r1, #20]
 8002c24:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8002c26:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8002c2a:	6989      	ldr	r1, [r1, #24]
 8002c2c:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8002c2e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c32:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002c34:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8002c36:	2000      	movs	r0, #0
 8002c38:	bc30      	pop	{r4, r5}
 8002c3a:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002c3c:	6884      	ldr	r4, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8002c3e:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 8002c42:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002c46:	68ca      	ldr	r2, [r1, #12]
 8002c48:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 8002c4a:	694b      	ldr	r3, [r1, #20]
 8002c4c:	1e5a      	subs	r2, r3, #1
 8002c4e:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8002c50:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8002c54:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8002c56:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002c58:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002c5c:	680b      	ldr	r3, [r1, #0]
 8002c5e:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8002c60:	684d      	ldr	r5, [r1, #4]
 8002c62:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002c64:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8002c68:	688d      	ldr	r5, [r1, #8]
 8002c6a:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8002c6c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8002c70:	690d      	ldr	r5, [r1, #16]
 8002c72:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8002c74:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8002c78:	6989      	ldr	r1, [r1, #24]
 8002c7a:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8002c7c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c80:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8002c82:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8002c84:	60c3      	str	r3, [r0, #12]
 8002c86:	e7d6      	b.n	8002c36 <FMC_SDRAM_Timing_Init+0x44>

08002c88 <ai_log_err>:
AI_ALIGNED(4)
static ai_u8 out_data_s[AI_NETWORK_OUT_1_SIZE_BYTES];
#endif

static void ai_log_err(const ai_error err, const char *fct)
{
 8002c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 0 */
  if (fct)
 8002c8a:	b129      	cbz	r1, 8002c98 <ai_log_err+0x10>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002c8c:	0a03      	lsrs	r3, r0, #8
 8002c8e:	b2c2      	uxtb	r2, r0
 8002c90:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <ai_log_err+0x1c>)
 8002c92:	f003 f91b 	bl	8005ecc <iprintf>
        err.type, err.code);
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);

  do {} while (1);
 8002c96:	e7fe      	b.n	8002c96 <ai_log_err+0xe>
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8002c98:	0a02      	lsrs	r2, r0, #8
 8002c9a:	b2c1      	uxtb	r1, r0
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <ai_log_err+0x20>)
 8002c9e:	f003 f915 	bl	8005ecc <iprintf>
 8002ca2:	e7f8      	b.n	8002c96 <ai_log_err+0xe>
 8002ca4:	080627b4 	.word	0x080627b4
 8002ca8:	080627e8 	.word	0x080627e8

08002cac <ai_boostrap>:
  /* USER CODE END 0 */
}

static int ai_boostrap(ai_handle w_addr, ai_handle act_addr)
{
 8002cac:	b530      	push	{r4, r5, lr}
 8002cae:	b08d      	sub	sp, #52	; 0x34
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
  ai_error err;

  /* 1 - Create an instance of the model */
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4820      	ldr	r0, [pc, #128]	; (8002d38 <ai_boostrap+0x8c>)
 8002cb8:	f000 fdf0 	bl	800389c <ai_network_create>
  if (err.type != AI_ERROR_NONE) {
 8002cbc:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002cc0:	d129      	bne.n	8002d16 <ai_boostrap+0x6a>
    ai_log_err(err, "ai_network_create");
    return -1;
  }

  /* 2 - Initialize the instance */
  const ai_network_params params = {
 8002cc2:	4b1e      	ldr	r3, [pc, #120]	; (8002d3c <ai_boostrap+0x90>)
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002ccc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002cd0:	f8ad 3008 	strh.w	r3, [sp, #8]
 8002cd4:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <ai_boostrap+0x94>)
 8002cd6:	9203      	str	r2, [sp, #12]
 8002cd8:	9404      	str	r4, [sp, #16]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	9205      	str	r2, [sp, #20]
 8002cde:	4919      	ldr	r1, [pc, #100]	; (8002d44 <ai_boostrap+0x98>)
 8002ce0:	9106      	str	r1, [sp, #24]
 8002ce2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002ce6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8002cea:	f8ad 3020 	strh.w	r3, [sp, #32]
 8002cee:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf4:	950a      	str	r5, [sp, #40]	; 0x28
 8002cf6:	920b      	str	r2, [sp, #44]	; 0x2c
      AI_NETWORK_DATA_WEIGHTS(w_addr),
      AI_NETWORK_DATA_ACTIVATIONS(act_addr) };

  if (!ai_network_init(network, &params)) {
 8002cf8:	4669      	mov	r1, sp
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <ai_boostrap+0x8c>)
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f000 fddd 	bl	80038bc <ai_network_init>
 8002d02:	b158      	cbz	r0, 8002d1c <ai_boostrap+0x70>
      ai_log_err(err, "ai_network_init");
      return -1;
    }

  /* 3 - Retrieve the network info of the created instance */
  if (!ai_network_get_info(network, &network_info)) {
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <ai_boostrap+0x8c>)
 8002d06:	f851 0b04 	ldr.w	r0, [r1], #4
 8002d0a:	f000 fd71 	bl	80037f0 <ai_network_get_info>
 8002d0e:	b160      	cbz	r0, 8002d2a <ai_boostrap+0x7e>
    network = AI_HANDLE_NULL;
    return -3;
  }

  return 0;
}
 8002d10:	2000      	movs	r0, #0
 8002d12:	b00d      	add	sp, #52	; 0x34
 8002d14:	bd30      	pop	{r4, r5, pc}
    ai_log_err(err, "ai_network_create");
 8002d16:	490c      	ldr	r1, [pc, #48]	; (8002d48 <ai_boostrap+0x9c>)
 8002d18:	f7ff ffb6 	bl	8002c88 <ai_log_err>
      err = ai_network_get_error(network);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <ai_boostrap+0x8c>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	f000 fdb8 	bl	8003894 <ai_network_get_error>
      ai_log_err(err, "ai_network_init");
 8002d24:	4909      	ldr	r1, [pc, #36]	; (8002d4c <ai_boostrap+0xa0>)
 8002d26:	f7ff ffaf 	bl	8002c88 <ai_log_err>
    err = ai_network_get_error(network);
 8002d2a:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <ai_boostrap+0x8c>)
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	f000 fdb1 	bl	8003894 <ai_network_get_error>
    ai_log_err(err, "ai_network_get_error");
 8002d32:	4907      	ldr	r1, [pc, #28]	; (8002d50 <ai_boostrap+0xa4>)
 8002d34:	f7ff ffa8 	bl	8002c88 <ai_log_err>
 8002d38:	200008c0 	.word	0x200008c0
 8002d3c:	40040440 	.word	0x40040440
 8002d40:	000567c4 	.word	0x000567c4
 8002d44:	00040440 	.word	0x00040440
 8002d48:	08062818 	.word	0x08062818
 8002d4c:	0806282c 	.word	0x0806282c
 8002d50:	0806283c 	.word	0x0806283c

08002d54 <ai_run>:

static int ai_run(void *data_in, void *data_out)
{
 8002d54:	b510      	push	{r4, lr}
 8002d56:	460c      	mov	r4, r1
  ai_i32 batch;

  ai_buffer *ai_input = network_info.inputs;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <ai_run+0x2c>)
 8002d5a:	6b99      	ldr	r1, [r3, #56]	; 0x38
  ai_buffer *ai_output = network_info.outputs;
 8002d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c

  ai_input[0].data = AI_HANDLE_PTR(data_in);
 8002d5e:	6108      	str	r0, [r1, #16]
  ai_output[0].data = AI_HANDLE_PTR(data_out);
 8002d60:	6114      	str	r4, [r2, #16]

  batch = ai_network_run(network, ai_input, ai_output);
 8002d62:	6818      	ldr	r0, [r3, #0]
 8002d64:	f000 fe1a 	bl	800399c <ai_network_run>
  if (batch != 1) {
 8002d68:	2801      	cmp	r0, #1
 8002d6a:	d101      	bne.n	8002d70 <ai_run+0x1c>
        "ai_network_run");
    return -1;
  }

  return 0;
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	bd10      	pop	{r4, pc}
    ai_log_err(ai_network_get_error(network),
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <ai_run+0x2c>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	f000 fd8e 	bl	8003894 <ai_network_get_error>
 8002d78:	4902      	ldr	r1, [pc, #8]	; (8002d84 <ai_run+0x30>)
 8002d7a:	f7ff ff85 	bl	8002c88 <ai_log_err>
 8002d7e:	bf00      	nop
 8002d80:	200008c0 	.word	0x200008c0
 8002d84:	08062854 	.word	0x08062854

08002d88 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(void * data)
{
  return 0;
}
 8002d88:	2000      	movs	r0, #0
 8002d8a:	4770      	bx	lr

08002d8c <post_process>:

int post_process(void * data)
{
  return 0;
}
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	4770      	bx	lr

08002d90 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8002d90:	b508      	push	{r3, lr}
    /* USER CODE BEGIN 3 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8002d92:	4804      	ldr	r0, [pc, #16]	; (8002da4 <MX_X_CUBE_AI_Init+0x14>)
 8002d94:	f003 f920 	bl	8005fd8 <puts>

  ai_boostrap(ai_network_data_weights_get(), activations);
 8002d98:	f000 fe04 	bl	80039a4 <ai_network_data_weights_get>
 8002d9c:	4902      	ldr	r1, [pc, #8]	; (8002da8 <MX_X_CUBE_AI_Init+0x18>)
 8002d9e:	f7ff ff85 	bl	8002cac <ai_boostrap>
    /* USER CODE END 3 */
}
 8002da2:	bd08      	pop	{r3, pc}
 8002da4:	08062864 	.word	0x08062864
 8002da8:	20000938 	.word	0x20000938

08002dac <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8002dac:	b508      	push	{r3, lr}

  int res = -1;
  uint8_t *in_data = NULL;
  uint8_t *out_data = NULL;

  printf("TEMPLATE - run - main loop\r\n");
 8002dae:	4819      	ldr	r0, [pc, #100]	; (8002e14 <MX_X_CUBE_AI_Process+0x68>)
 8002db0:	f003 f912 	bl	8005fd8 <puts>

  if (network) {
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <MX_X_CUBE_AI_Process+0x6c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b313      	cbz	r3, 8002e00 <MX_X_CUBE_AI_Process+0x54>

    if ((network_info.n_inputs != 1) || (network_info.n_outputs != 1)) {
 8002dba:	4b17      	ldr	r3, [pc, #92]	; (8002e18 <MX_X_CUBE_AI_Process+0x6c>)
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8002dc2:	d014      	beq.n	8002dee <MX_X_CUBE_AI_Process+0x42>
      ai_error err = {AI_ERROR_INVALID_PARAM, AI_ERROR_CODE_OUT_OF_RANGE};
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	2314      	movs	r3, #20
 8002dc8:	f363 0007 	bfi	r0, r3, #0, #8
 8002dcc:	2320      	movs	r3, #32
 8002dce:	f363 201f 	bfi	r0, r3, #8, #24
      ai_log_err(err, "template code should be updated\r\n to support a model with multiple IO");
 8002dd2:	4912      	ldr	r1, [pc, #72]	; (8002e1c <MX_X_CUBE_AI_Process+0x70>)
 8002dd4:	f7ff ff58 	bl	8002c88 <ai_log_err>
    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(in_data);
      /* 2 - process the data - call inference engine */
      if (res == 0)
        res = ai_run(in_data, out_data);
 8002dd8:	4911      	ldr	r1, [pc, #68]	; (8002e20 <MX_X_CUBE_AI_Process+0x74>)
 8002dda:	4812      	ldr	r0, [pc, #72]	; (8002e24 <MX_X_CUBE_AI_Process+0x78>)
 8002ddc:	f7ff ffba 	bl	8002d54 <ai_run>
 8002de0:	4603      	mov	r3, r0
 8002de2:	e00a      	b.n	8002dfa <MX_X_CUBE_AI_Process+0x4e>
      /* 3- post-process the predictions */
      if (res == 0)
        res = post_process(out_data);
 8002de4:	480e      	ldr	r0, [pc, #56]	; (8002e20 <MX_X_CUBE_AI_Process+0x74>)
 8002de6:	f7ff ffd1 	bl	8002d8c <post_process>
 8002dea:	4603      	mov	r3, r0
    } while (res==0);
 8002dec:	b943      	cbnz	r3, 8002e00 <MX_X_CUBE_AI_Process+0x54>
      res = acquire_and_process_data(in_data);
 8002dee:	480d      	ldr	r0, [pc, #52]	; (8002e24 <MX_X_CUBE_AI_Process+0x78>)
 8002df0:	f7ff ffca 	bl	8002d88 <acquire_and_process_data>
      if (res == 0)
 8002df4:	4603      	mov	r3, r0
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d0ee      	beq.n	8002dd8 <MX_X_CUBE_AI_Process+0x2c>
      if (res == 0)
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f6      	bne.n	8002dec <MX_X_CUBE_AI_Process+0x40>
 8002dfe:	e7f1      	b.n	8002de4 <MX_X_CUBE_AI_Process+0x38>
  }

  if (res) {
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8002e00:	2000      	movs	r0, #0
 8002e02:	2311      	movs	r3, #17
 8002e04:	f363 0007 	bfi	r0, r3, #0, #8
 8002e08:	2310      	movs	r3, #16
 8002e0a:	f363 201f 	bfi	r0, r3, #8, #24
    ai_log_err(err, "Process has FAILED");
 8002e0e:	4906      	ldr	r1, [pc, #24]	; (8002e28 <MX_X_CUBE_AI_Process+0x7c>)
 8002e10:	f7ff ff3a 	bl	8002c88 <ai_log_err>
 8002e14:	08062884 	.word	0x08062884
 8002e18:	200008c0 	.word	0x200008c0
 8002e1c:	080628a0 	.word	0x080628a0
 8002e20:	20000bb8 	.word	0x20000bb8
 8002e24:	20000bbc 	.word	0x20000bbc
 8002e28:	080628e8 	.word	0x080628e8

08002e2c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002e2c:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002e2e:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_CRC_Init+0x18>)
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <MX_CRC_Init+0x1c>)
 8002e32:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002e34:	f7fe f9fa 	bl	800122c <HAL_CRC_Init>
 8002e38:	b900      	cbnz	r0, 8002e3c <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002e3a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002e3c:	f000 fcd6 	bl	80037ec <Error_Handler>
}
 8002e40:	e7fb      	b.n	8002e3a <MX_CRC_Init+0xe>
 8002e42:	bf00      	nop
 8002e44:	20001d00 	.word	0x20001d00
 8002e48:	40023000 	.word	0x40023000

08002e4c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8002e4c:	6802      	ldr	r2, [r0, #0]
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_CRC_MspInit+0x28>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d000      	beq.n	8002e56 <HAL_CRC_MspInit+0xa>
 8002e54:	4770      	bx	lr
{
 8002e56:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_CRC_MspInit+0x2c>)
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8002e70:	b002      	add	sp, #8
 8002e72:	4770      	bx	lr
 8002e74:	40023000 	.word	0x40023000
 8002e78:	40023800 	.word	0x40023800

08002e7c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002e7c:	b508      	push	{r3, lr}
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002e7e:	480d      	ldr	r0, [pc, #52]	; (8002eb4 <MX_DMA2D_Init+0x38>)
 8002e80:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <MX_DMA2D_Init+0x3c>)
 8002e82:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002e84:	2300      	movs	r3, #0
 8002e86:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002e88:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8002e8a:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002e8c:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002e8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002e90:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002e92:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002e94:	f7fe f9d9 	bl	800124a <HAL_DMA2D_Init>
 8002e98:	b928      	cbnz	r0, 8002ea6 <MX_DMA2D_Init+0x2a>
  {
    Error_Handler();
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <MX_DMA2D_Init+0x38>)
 8002e9e:	f7fe fa01 	bl	80012a4 <HAL_DMA2D_ConfigLayer>
 8002ea2:	b918      	cbnz	r0, 8002eac <MX_DMA2D_Init+0x30>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002ea4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002ea6:	f000 fca1 	bl	80037ec <Error_Handler>
 8002eaa:	e7f6      	b.n	8002e9a <MX_DMA2D_Init+0x1e>
    Error_Handler();
 8002eac:	f000 fc9e 	bl	80037ec <Error_Handler>
}
 8002eb0:	e7f8      	b.n	8002ea4 <MX_DMA2D_Init+0x28>
 8002eb2:	bf00      	nop
 8002eb4:	20001d08 	.word	0x20001d08
 8002eb8:	4002b000 	.word	0x4002b000

08002ebc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8002ebc:	6802      	ldr	r2, [r0, #0]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_DMA2D_MspInit+0x28>)
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d000      	beq.n	8002ec6 <HAL_DMA2D_MspInit+0xa>
 8002ec4:	4770      	bx	lr
{
 8002ec6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ec8:	2300      	movs	r3, #0
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_DMA2D_MspInit+0x2c>)
 8002ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8002ee0:	b002      	add	sp, #8
 8002ee2:	4770      	bx	lr
 8002ee4:	4002b000 	.word	0x4002b000
 8002ee8:	40023800 	.word	0x40023800

08002eec <HAL_FMC_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_FMC_MspInit+0xbc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b103      	cbz	r3, 8002ef4 <HAL_FMC_MspInit+0x8>
 8002ef2:	4770      	bx	lr
static void HAL_FMC_MspInit(void){
 8002ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef8:	b086      	sub	sp, #24
    return;
  }
  FMC_Initialized = 1;
 8002efa:	f04f 0801 	mov.w	r8, #1
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <HAL_FMC_MspInit+0xbc>)
 8002f00:	f8c3 8000 	str.w	r8, [r3]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002f04:	2400      	movs	r4, #0
 8002f06:	9400      	str	r4, [sp, #0]
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_FMC_MspInit+0xc0>)
 8002f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0c:	ea42 0208 	orr.w	r2, r2, r8
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	ea03 0308 	and.w	r3, r3, r8
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	9b00      	ldr	r3, [sp, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002f1c:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f20:	9301      	str	r3, [sp, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2702      	movs	r7, #2
 8002f24:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f28:	2603      	movs	r6, #3
 8002f2a:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f2c:	250c      	movs	r5, #12
 8002f2e:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f30:	a901      	add	r1, sp, #4
 8002f32:	481f      	ldr	r0, [pc, #124]	; (8002fb0 <HAL_FMC_MspInit+0xc4>)
 8002f34:	f7fe fa18 	bl	8001368 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002f38:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f42:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002f44:	a901      	add	r1, sp, #4
 8002f46:	481b      	ldr	r0, [pc, #108]	; (8002fb4 <HAL_FMC_MspInit+0xc8>)
 8002f48:	f7fe fa0e 	bl	8001368 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002f4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f50:	9301      	str	r3, [sp, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f56:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f58:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f5a:	a901      	add	r1, sp, #4
 8002f5c:	4816      	ldr	r0, [pc, #88]	; (8002fb8 <HAL_FMC_MspInit+0xcc>)
 8002f5e:	f7fe fa03 	bl	8001368 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002f62:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f66:	9301      	str	r3, [sp, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f6e:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f70:	a901      	add	r1, sp, #4
 8002f72:	4812      	ldr	r0, [pc, #72]	; (8002fbc <HAL_FMC_MspInit+0xd0>)
 8002f74:	f7fe f9f8 	bl	8001368 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002f78:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f7c:	9301      	str	r3, [sp, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f82:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f84:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f86:	a901      	add	r1, sp, #4
 8002f88:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <HAL_FMC_MspInit+0xd4>)
 8002f8a:	f7fe f9ed 	bl	8001368 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f8e:	2360      	movs	r3, #96	; 0x60
 8002f90:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f96:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f98:	9505      	str	r5, [sp, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9a:	a901      	add	r1, sp, #4
 8002f9c:	4809      	ldr	r0, [pc, #36]	; (8002fc4 <HAL_FMC_MspInit+0xd8>)
 8002f9e:	f7fe f9e3 	bl	8001368 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002fa2:	b006      	add	sp, #24
 8002fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa8:	20001bbc 	.word	0x20001bbc
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40020800 	.word	0x40020800
 8002fb8:	40021800 	.word	0x40021800
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40020c00 	.word	0x40020c00
 8002fc4:	40020400 	.word	0x40020400

08002fc8 <MX_FMC_Init>:
{
 8002fc8:	b500      	push	{lr}
 8002fca:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002fcc:	4815      	ldr	r0, [pc, #84]	; (8003024 <MX_FMC_Init+0x5c>)
 8002fce:	4b16      	ldr	r3, [pc, #88]	; (8003028 <MX_FMC_Init+0x60>)
 8002fd0:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002fda:	2104      	movs	r1, #4
 8002fdc:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002fde:	2210      	movs	r2, #16
 8002fe0:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002fe6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002fea:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002fec:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ff2:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002ff4:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ffa:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8003000:	2207      	movs	r2, #7
 8003002:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8003004:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8003006:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8003008:	2203      	movs	r2, #3
 800300a:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 800300c:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800300e:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003010:	4469      	add	r1, sp
 8003012:	f7ff f9e1 	bl	80023d8 <HAL_SDRAM_Init>
 8003016:	b910      	cbnz	r0, 800301e <MX_FMC_Init+0x56>
}
 8003018:	b009      	add	sp, #36	; 0x24
 800301a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800301e:	f000 fbe5 	bl	80037ec <Error_Handler>
}
 8003022:	e7f9      	b.n	8003018 <MX_FMC_Init+0x50>
 8003024:	20001d48 	.word	0x20001d48
 8003028:	a0000140 	.word	0xa0000140

0800302c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800302c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800302e:	f7ff ff5d 	bl	8002eec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003032:	bd08      	pop	{r3, pc}

08003034 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8003034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003038:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303a:	2400      	movs	r4, #0
 800303c:	9409      	str	r4, [sp, #36]	; 0x24
 800303e:	940a      	str	r4, [sp, #40]	; 0x28
 8003040:	940b      	str	r4, [sp, #44]	; 0x2c
 8003042:	940c      	str	r4, [sp, #48]	; 0x30
 8003044:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003046:	9401      	str	r4, [sp, #4]
 8003048:	4b69      	ldr	r3, [pc, #420]	; (80031f0 <MX_GPIO_Init+0x1bc>)
 800304a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304c:	f042 0204 	orr.w	r2, r2, #4
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
 8003052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003054:	f002 0204 	and.w	r2, r2, #4
 8003058:	9201      	str	r2, [sp, #4]
 800305a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800305c:	9402      	str	r4, [sp, #8]
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	f042 0220 	orr.w	r2, r2, #32
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
 8003066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003068:	f002 0220 	and.w	r2, r2, #32
 800306c:	9202      	str	r2, [sp, #8]
 800306e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003070:	9403      	str	r4, [sp, #12]
 8003072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
 800307a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003080:	9203      	str	r2, [sp, #12]
 8003082:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003084:	9404      	str	r4, [sp, #16]
 8003086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
 800308e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003090:	f002 0201 	and.w	r2, r2, #1
 8003094:	9204      	str	r2, [sp, #16]
 8003096:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003098:	9405      	str	r4, [sp, #20]
 800309a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800309c:	f042 0202 	orr.w	r2, r2, #2
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
 80030a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a4:	f002 0202 	and.w	r2, r2, #2
 80030a8:	9205      	str	r2, [sp, #20]
 80030aa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030ac:	9406      	str	r4, [sp, #24]
 80030ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
 80030b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80030bc:	9206      	str	r2, [sp, #24]
 80030be:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030c0:	9407      	str	r4, [sp, #28]
 80030c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c4:	f042 0210 	orr.w	r2, r2, #16
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030cc:	f002 0210 	and.w	r2, r2, #16
 80030d0:	9207      	str	r2, [sp, #28]
 80030d2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d4:	9408      	str	r4, [sp, #32]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	f042 0208 	orr.w	r2, r2, #8
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	9308      	str	r3, [sp, #32]
 80030e6:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80030e8:	4f42      	ldr	r7, [pc, #264]	; (80031f4 <MX_GPIO_Init+0x1c0>)
 80030ea:	4622      	mov	r2, r4
 80030ec:	2116      	movs	r1, #22
 80030ee:	4638      	mov	r0, r7
 80030f0:	f7fe fa32 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80030f4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80031fc <MX_GPIO_Init+0x1c8>
 80030f8:	4622      	mov	r2, r4
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	4640      	mov	r0, r8
 80030fe:	f7fe fa2b 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8003102:	4e3d      	ldr	r6, [pc, #244]	; (80031f8 <MX_GPIO_Init+0x1c4>)
 8003104:	4622      	mov	r2, r4
 8003106:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800310a:	4630      	mov	r0, r6
 800310c:	f7fe fa24 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003110:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003200 <MX_GPIO_Init+0x1cc>
 8003114:	4622      	mov	r2, r4
 8003116:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800311a:	4648      	mov	r0, r9
 800311c:	f7fe fa1c 	bl	8001558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003120:	2316      	movs	r3, #22
 8003122:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	2501      	movs	r5, #1
 8003126:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312c:	a909      	add	r1, sp, #36	; 0x24
 800312e:	4638      	mov	r0, r7
 8003130:	f7fe f91a 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8003134:	f248 0306 	movw	r3, #32774	; 0x8006
 8003138:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800313a:	f44f 1a90 	mov.w	sl, #1179648	; 0x120000
 800313e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003144:	a909      	add	r1, sp, #36	; 0x24
 8003146:	4640      	mov	r0, r8
 8003148:	f7fe f90e 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003150:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8003156:	a909      	add	r1, sp, #36	; 0x24
 8003158:	4640      	mov	r0, r8
 800315a:	f7fe f905 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800315e:	2320      	movs	r3, #32
 8003160:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003162:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003168:	a909      	add	r1, sp, #36	; 0x24
 800316a:	4638      	mov	r0, r7
 800316c:	f7fe f8fc 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003170:	2304      	movs	r3, #4
 8003172:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003174:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003178:	f5a7 6780 	sub.w	r7, r7, #1024	; 0x400
 800317c:	a909      	add	r1, sp, #36	; 0x24
 800317e:	4638      	mov	r0, r7
 8003180:	f7fe f8f2 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8003184:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8003188:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003190:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003192:	230c      	movs	r3, #12
 8003194:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003196:	a909      	add	r1, sp, #36	; 0x24
 8003198:	4638      	mov	r0, r7
 800319a:	f7fe f8e5 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800319e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80031a8:	a909      	add	r1, sp, #36	; 0x24
 80031aa:	4638      	mov	r0, r7
 80031ac:	f7fe f8dc 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80031b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031b4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80031ba:	a909      	add	r1, sp, #36	; 0x24
 80031bc:	4630      	mov	r0, r6
 80031be:	f7fe f8d3 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80031c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80031c6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ce:	a909      	add	r1, sp, #36	; 0x24
 80031d0:	4630      	mov	r0, r6
 80031d2:	f7fe f8c9 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80031d6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80031da:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031dc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031e2:	a909      	add	r1, sp, #36	; 0x24
 80031e4:	4648      	mov	r0, r9
 80031e6:	f7fe f8bf 	bl	8001368 <HAL_GPIO_Init>

}
 80031ea:	b00e      	add	sp, #56	; 0x38
 80031ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40020000 	.word	0x40020000
 8003200:	40021800 	.word	0x40021800

08003204 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003204:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003206:	4813      	ldr	r0, [pc, #76]	; (8003254 <MX_I2C3_Init+0x50>)
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <MX_I2C3_Init+0x54>)
 800320a:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <MX_I2C3_Init+0x58>)
 800320e:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003210:	2300      	movs	r3, #0
 8003212:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003214:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800321a:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800321c:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800321e:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003220:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003222:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003224:	f7fe f99e 	bl	8001564 <HAL_I2C_Init>
 8003228:	b950      	cbnz	r0, 8003240 <MX_I2C3_Init+0x3c>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800322a:	2100      	movs	r1, #0
 800322c:	4809      	ldr	r0, [pc, #36]	; (8003254 <MX_I2C3_Init+0x50>)
 800322e:	f7fe fa77 	bl	8001720 <HAL_I2CEx_ConfigAnalogFilter>
 8003232:	b940      	cbnz	r0, 8003246 <MX_I2C3_Init+0x42>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003234:	2100      	movs	r1, #0
 8003236:	4807      	ldr	r0, [pc, #28]	; (8003254 <MX_I2C3_Init+0x50>)
 8003238:	f7fe fa94 	bl	8001764 <HAL_I2CEx_ConfigDigitalFilter>
 800323c:	b930      	cbnz	r0, 800324c <MX_I2C3_Init+0x48>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800323e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003240:	f000 fad4 	bl	80037ec <Error_Handler>
 8003244:	e7f1      	b.n	800322a <MX_I2C3_Init+0x26>
    Error_Handler();
 8003246:	f000 fad1 	bl	80037ec <Error_Handler>
 800324a:	e7f3      	b.n	8003234 <MX_I2C3_Init+0x30>
    Error_Handler();
 800324c:	f000 face 	bl	80037ec <Error_Handler>
}
 8003250:	e7f5      	b.n	800323e <MX_I2C3_Init+0x3a>
 8003252:	bf00      	nop
 8003254:	20001d7c 	.word	0x20001d7c
 8003258:	40005c00 	.word	0x40005c00
 800325c:	000186a0 	.word	0x000186a0

08003260 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003262:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	2300      	movs	r3, #0
 8003266:	9303      	str	r3, [sp, #12]
 8003268:	9304      	str	r3, [sp, #16]
 800326a:	9305      	str	r3, [sp, #20]
 800326c:	9306      	str	r3, [sp, #24]
 800326e:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C3)
 8003270:	6802      	ldr	r2, [r0, #0]
 8003272:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_I2C_MspInit+0x90>)
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003278:	b009      	add	sp, #36	; 0x24
 800327a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800327c:	2500      	movs	r5, #0
 800327e:	9500      	str	r5, [sp, #0]
 8003280:	4c1c      	ldr	r4, [pc, #112]	; (80032f4 <HAL_I2C_MspInit+0x94>)
 8003282:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6323      	str	r3, [r4, #48]	; 0x30
 800328a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003294:	9501      	str	r5, [sp, #4]
 8003296:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6323      	str	r3, [r4, #48]	; 0x30
 800329e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80032a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032ae:	2712      	movs	r7, #18
 80032b0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032b6:	2604      	movs	r6, #4
 80032b8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80032ba:	a903      	add	r1, sp, #12
 80032bc:	480e      	ldr	r0, [pc, #56]	; (80032f8 <HAL_I2C_MspInit+0x98>)
 80032be:	f7fe f853 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80032c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80032ce:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80032d0:	a903      	add	r1, sp, #12
 80032d2:	480a      	ldr	r0, [pc, #40]	; (80032fc <HAL_I2C_MspInit+0x9c>)
 80032d4:	f7fe f848 	bl	8001368 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032d8:	9502      	str	r5, [sp, #8]
 80032da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032e0:	6423      	str	r3, [r4, #64]	; 0x40
 80032e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	9b02      	ldr	r3, [sp, #8]
}
 80032ec:	e7c4      	b.n	8003278 <HAL_I2C_MspInit+0x18>
 80032ee:	bf00      	nop
 80032f0:	40005c00 	.word	0x40005c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020000 	.word	0x40020000

08003300 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003300:	b500      	push	{lr}
 8003302:	b08f      	sub	sp, #60	; 0x3c

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003304:	2234      	movs	r2, #52	; 0x34
 8003306:	2100      	movs	r1, #0
 8003308:	a801      	add	r0, sp, #4
 800330a:	f002 f8c3 	bl	8005494 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800330e:	4828      	ldr	r0, [pc, #160]	; (80033b0 <MX_LTDC_Init+0xb0>)
 8003310:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <MX_LTDC_Init+0xb4>)
 8003312:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003314:	2300      	movs	r3, #0
 8003316:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003318:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800331a:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800331c:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 9;
 800331e:	2209      	movs	r2, #9
 8003320:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 1;
 8003322:	2201      	movs	r2, #1
 8003324:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8003326:	221d      	movs	r2, #29
 8003328:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800332a:	2203      	movs	r2, #3
 800332c:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800332e:	f240 120d 	movw	r2, #269	; 0x10d
 8003332:	6242      	str	r2, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8003334:	f240 1243 	movw	r2, #323	; 0x143
 8003338:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800333a:	f240 1217 	movw	r2, #279	; 0x117
 800333e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8003340:	f240 1247 	movw	r2, #327	; 0x147
 8003344:	6302      	str	r2, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003346:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800334a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800334e:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003352:	f7fe faff 	bl	8001954 <HAL_LTDC_Init>
 8003356:	bb20      	cbnz	r0, 80033a2 <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
  }
  pLayerCfg.WindowX0 = 0;
 8003358:	2200      	movs	r2, #0
 800335a:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 240;
 800335c:	21f0      	movs	r1, #240	; 0xf0
 800335e:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8003360:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 320;
 8003362:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003366:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003368:	2002      	movs	r0, #2
 800336a:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 800336c:	20ff      	movs	r0, #255	; 0xff
 800336e:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8003370:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003372:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8003376:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003378:	2007      	movs	r0, #7
 800337a:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800337c:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 8003380:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8003382:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8003384:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003386:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800338a:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800338e:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003392:	a901      	add	r1, sp, #4
 8003394:	4806      	ldr	r0, [pc, #24]	; (80033b0 <MX_LTDC_Init+0xb0>)
 8003396:	f7fe fb57 	bl	8001a48 <HAL_LTDC_ConfigLayer>
 800339a:	b928      	cbnz	r0, 80033a8 <MX_LTDC_Init+0xa8>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800339c:	b00f      	add	sp, #60	; 0x3c
 800339e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80033a2:	f000 fa23 	bl	80037ec <Error_Handler>
 80033a6:	e7d7      	b.n	8003358 <MX_LTDC_Init+0x58>
    Error_Handler();
 80033a8:	f000 fa20 	bl	80037ec <Error_Handler>
}
 80033ac:	e7f6      	b.n	800339c <MX_LTDC_Init+0x9c>
 80033ae:	bf00      	nop
 80033b0:	20001dd0 	.word	0x20001dd0
 80033b4:	40016800 	.word	0x40016800

080033b8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80033b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033bc:	b098      	sub	sp, #96	; 0x60
 80033be:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	2100      	movs	r1, #0
 80033c2:	9113      	str	r1, [sp, #76]	; 0x4c
 80033c4:	9114      	str	r1, [sp, #80]	; 0x50
 80033c6:	9115      	str	r1, [sp, #84]	; 0x54
 80033c8:	9116      	str	r1, [sp, #88]	; 0x58
 80033ca:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033cc:	2230      	movs	r2, #48	; 0x30
 80033ce:	a807      	add	r0, sp, #28
 80033d0:	f002 f860 	bl	8005494 <memset>
  if(ltdcHandle->Instance==LTDC)
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <HAL_LTDC_MspInit+0x19c>)
 80033d8:	429a      	cmp	r2, r3
 80033da:	d002      	beq.n	80033e2 <HAL_LTDC_MspInit+0x2a>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80033dc:	b018      	add	sp, #96	; 0x60
 80033de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80033e2:	2308      	movs	r3, #8
 80033e4:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80033e6:	2332      	movs	r3, #50	; 0x32
 80033e8:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80033ea:	2302      	movs	r3, #2
 80033ec:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80033ee:	2300      	movs	r3, #0
 80033f0:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f2:	a807      	add	r0, sp, #28
 80033f4:	f7fe feac 	bl	8002150 <HAL_RCCEx_PeriphCLKConfig>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	f040 80a8 	bne.w	800354e <HAL_LTDC_MspInit+0x196>
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033fe:	2400      	movs	r4, #0
 8003400:	9400      	str	r4, [sp, #0]
 8003402:	4b55      	ldr	r3, [pc, #340]	; (8003558 <HAL_LTDC_MspInit+0x1a0>)
 8003404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003406:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
 800340c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800340e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003412:	9200      	str	r2, [sp, #0]
 8003414:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003416:	9401      	str	r4, [sp, #4]
 8003418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341a:	f042 0220 	orr.w	r2, r2, #32
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
 8003420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003422:	f002 0220 	and.w	r2, r2, #32
 8003426:	9201      	str	r2, [sp, #4]
 8003428:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	9402      	str	r4, [sp, #8]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	f002 0201 	and.w	r2, r2, #1
 800343a:	9202      	str	r2, [sp, #8]
 800343c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343e:	9403      	str	r4, [sp, #12]
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	f042 0202 	orr.w	r2, r2, #2
 8003446:	631a      	str	r2, [r3, #48]	; 0x30
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	f002 0202 	and.w	r2, r2, #2
 800344e:	9203      	str	r2, [sp, #12]
 8003450:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003452:	9404      	str	r4, [sp, #16]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003462:	9204      	str	r2, [sp, #16]
 8003464:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003466:	9405      	str	r4, [sp, #20]
 8003468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346a:	f042 0204 	orr.w	r2, r2, #4
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	f002 0204 	and.w	r2, r2, #4
 8003476:	9205      	str	r2, [sp, #20]
 8003478:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800347a:	9406      	str	r4, [sp, #24]
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	9306      	str	r3, [sp, #24]
 800348c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800348e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003492:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2502      	movs	r5, #2
 8003496:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349a:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800349c:	260e      	movs	r6, #14
 800349e:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80034a0:	a913      	add	r1, sp, #76	; 0x4c
 80034a2:	482e      	ldr	r0, [pc, #184]	; (800355c <HAL_LTDC_MspInit+0x1a4>)
 80034a4:	f7fd ff60 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80034a8:	f641 0358 	movw	r3, #6232	; 0x1858
 80034ac:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b2:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034b4:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	a913      	add	r1, sp, #76	; 0x4c
 80034b8:	4829      	ldr	r0, [pc, #164]	; (8003560 <HAL_LTDC_MspInit+0x1a8>)
 80034ba:	f7fd ff55 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80034be:	2303      	movs	r3, #3
 80034c0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c6:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034c8:	f04f 0809 	mov.w	r8, #9
 80034cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	4f24      	ldr	r7, [pc, #144]	; (8003564 <HAL_LTDC_MspInit+0x1ac>)
 80034d2:	a913      	add	r1, sp, #76	; 0x4c
 80034d4:	4638      	mov	r0, r7
 80034d6:	f7fd ff47 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80034da:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034de:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e0:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e2:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034e6:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	a913      	add	r1, sp, #76	; 0x4c
 80034ea:	4638      	mov	r0, r7
 80034ec:	f7fd ff3c 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80034f0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034f4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034fc:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034fe:	f507 57a0 	add.w	r7, r7, #5120	; 0x1400
 8003502:	a913      	add	r1, sp, #76	; 0x4c
 8003504:	4638      	mov	r0, r7
 8003506:	f7fd ff2f 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800350a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800350e:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003516:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003518:	a913      	add	r1, sp, #76	; 0x4c
 800351a:	4813      	ldr	r0, [pc, #76]	; (8003568 <HAL_LTDC_MspInit+0x1b0>)
 800351c:	f7fd ff24 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003520:	2348      	movs	r3, #72	; 0x48
 8003522:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003528:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800352a:	9617      	str	r6, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800352c:	a913      	add	r1, sp, #76	; 0x4c
 800352e:	480f      	ldr	r0, [pc, #60]	; (800356c <HAL_LTDC_MspInit+0x1b4>)
 8003530:	f7fd ff1a 	bl	8001368 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003538:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353a:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003540:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003544:	a913      	add	r1, sp, #76	; 0x4c
 8003546:	4638      	mov	r0, r7
 8003548:	f7fd ff0e 	bl	8001368 <HAL_GPIO_Init>
}
 800354c:	e746      	b.n	80033dc <HAL_LTDC_MspInit+0x24>
      Error_Handler();
 800354e:	f000 f94d 	bl	80037ec <Error_Handler>
 8003552:	e754      	b.n	80033fe <HAL_LTDC_MspInit+0x46>
 8003554:	40016800 	.word	0x40016800
 8003558:	40023800 	.word	0x40023800
 800355c:	40021400 	.word	0x40021400
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00

08003570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003570:	b530      	push	{r4, r5, lr}
 8003572:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003574:	2230      	movs	r2, #48	; 0x30
 8003576:	2100      	movs	r1, #0
 8003578:	a808      	add	r0, sp, #32
 800357a:	f001 ff8b 	bl	8005494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800357e:	2400      	movs	r4, #0
 8003580:	9403      	str	r4, [sp, #12]
 8003582:	9404      	str	r4, [sp, #16]
 8003584:	9405      	str	r4, [sp, #20]
 8003586:	9406      	str	r4, [sp, #24]
 8003588:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800358a:	9401      	str	r4, [sp, #4]
 800358c:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <SystemClock_Config+0x90>)
 800358e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003590:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003594:	641a      	str	r2, [r3, #64]	; 0x40
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a0:	9402      	str	r4, [sp, #8]
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <SystemClock_Config+0x94>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035b2:	9302      	str	r3, [sp, #8]
 80035b4:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035b6:	2301      	movs	r3, #1
 80035b8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035c0:	2502      	movs	r5, #2
 80035c2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035c8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80035ca:	2304      	movs	r3, #4
 80035cc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80035ce:	23a8      	movs	r3, #168	; 0xa8
 80035d0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035d2:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80035d4:	2307      	movs	r3, #7
 80035d6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035d8:	a808      	add	r0, sp, #32
 80035da:	f7fe fa63 	bl	8001aa4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035de:	230f      	movs	r3, #15
 80035e0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035e2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035e4:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035ea:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f0:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035f2:	2105      	movs	r1, #5
 80035f4:	a803      	add	r0, sp, #12
 80035f6:	f7fe fcb7 	bl	8001f68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80035fa:	b015      	add	sp, #84	; 0x54
 80035fc:	bd30      	pop	{r4, r5, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000

08003608 <main>:
{
 8003608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800360c:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 800360e:	f7fd fd79 	bl	8001104 <HAL_Init>
  SystemClock_Config();
 8003612:	f7ff ffad 	bl	8003570 <SystemClock_Config>
  MX_GPIO_Init();
 8003616:	f7ff fd0d 	bl	8003034 <MX_GPIO_Init>
  MX_CRC_Init();
 800361a:	f7ff fc07 	bl	8002e2c <MX_CRC_Init>
  MX_DMA2D_Init();
 800361e:	f7ff fc2d 	bl	8002e7c <MX_DMA2D_Init>
  MX_FMC_Init();
 8003622:	f7ff fcd1 	bl	8002fc8 <MX_FMC_Init>
  MX_I2C3_Init();
 8003626:	f7ff fded 	bl	8003204 <MX_I2C3_Init>
  MX_LTDC_Init();
 800362a:	f7ff fe69 	bl	8003300 <MX_LTDC_Init>
  MX_SPI5_Init();
 800362e:	f000 f9bd 	bl	80039ac <MX_SPI5_Init>
  MX_TIM1_Init();
 8003632:	f000 fae3 	bl	8003bfc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003636:	f000 fb31 	bl	8003c9c <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 800363a:	f7ff fba9 	bl	8002d90 <MX_X_CUBE_AI_Init>
  printf("[MAIN] Application running \r\n");
 800363e:	485a      	ldr	r0, [pc, #360]	; (80037a8 <main+0x1a0>)
 8003640:	f002 fcca 	bl	8005fd8 <puts>
  	 _1st_pred.prob = _2nd_pred.prob = 0.0f;
 8003644:	e03f      	b.n	80036c6 <main+0xbe>
	HAL_Delay(1);
 8003646:	2001      	movs	r0, #1
 8003648:	f7fd fd88 	bl	800115c <HAL_Delay>
		printf("NN First Guess: %d  %f \n\r", _1st_pred.label, _1st_pred.prob);
 800364c:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
 8003650:	2400      	movs	r4, #0
 8003652:	2500      	movs	r5, #0
 8003654:	4622      	mov	r2, r4
 8003656:	462b      	mov	r3, r5
 8003658:	4631      	mov	r1, r6
 800365a:	4854      	ldr	r0, [pc, #336]	; (80037ac <main+0x1a4>)
 800365c:	f002 fc36 	bl	8005ecc <iprintf>
		printf("NN Second Guess: %d  %f \n\r", _2nd_pred.label, _2nd_pred.prob);
 8003660:	4622      	mov	r2, r4
 8003662:	462b      	mov	r3, r5
 8003664:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003668:	4851      	ldr	r0, [pc, #324]	; (80037b0 <main+0x1a8>)
 800366a:	f002 fc2f 	bl	8005ecc <iprintf>
		sprintf(_1st_pred_str, "%d", _1st_pred.label);
 800366e:	4632      	mov	r2, r6
 8003670:	4950      	ldr	r1, [pc, #320]	; (80037b4 <main+0x1ac>)
 8003672:	a803      	add	r0, sp, #12
 8003674:	f002 fcc8 	bl	8006008 <siprintf>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003678:	484f      	ldr	r0, [pc, #316]	; (80037b8 <main+0x1b0>)
 800367a:	f7fd fc29 	bl	8000ed0 <BSP_LCD_SetTextColor>
		BSP_LCD_SetFont(&Font20);
 800367e:	484f      	ldr	r0, [pc, #316]	; (80037bc <main+0x1b4>)
 8003680:	f7fd fc3a 	bl	8000ef8 <BSP_LCD_SetFont>
		BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8003684:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8003688:	f7fd fc2c 	bl	8000ee4 <BSP_LCD_SetBackColor>
		BSP_LCD_DisplayStringAt(130, 255, (uint8_t *) _1st_pred_str, LEFT_MODE);
 800368c:	2303      	movs	r3, #3
 800368e:	aa03      	add	r2, sp, #12
 8003690:	21ff      	movs	r1, #255	; 0xff
 8003692:	2082      	movs	r0, #130	; 0x82
 8003694:	f7fd fcd8 	bl	8001048 <BSP_LCD_DisplayStringAt>
		sprintf(_1st_pred_prob_str, "%.1f", (float)_1st_pred.prob*100);
 8003698:	4622      	mov	r2, r4
 800369a:	462b      	mov	r3, r5
 800369c:	4948      	ldr	r1, [pc, #288]	; (80037c0 <main+0x1b8>)
 800369e:	4668      	mov	r0, sp
 80036a0:	f002 fcb2 	bl	8006008 <siprintf>
		BSP_LCD_DisplayStringAt(10, 220, (uint8_t *) _1st_pred_prob_str, LEFT_MODE);
 80036a4:	2303      	movs	r3, #3
 80036a6:	466a      	mov	r2, sp
 80036a8:	21dc      	movs	r1, #220	; 0xdc
 80036aa:	200a      	movs	r0, #10
 80036ac:	f7fd fccc 	bl	8001048 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(80, 220, (uint8_t *) "%", LEFT_MODE);
 80036b0:	2303      	movs	r3, #3
 80036b2:	4a44      	ldr	r2, [pc, #272]	; (80037c4 <main+0x1bc>)
 80036b4:	21dc      	movs	r1, #220	; 0xdc
 80036b6:	2050      	movs	r0, #80	; 0x50
 80036b8:	f7fd fcc6 	bl	8001048 <BSP_LCD_DisplayStringAt>
		HAL_Delay(200);
 80036bc:	20c8      	movs	r0, #200	; 0xc8
 80036be:	f7fd fd4d 	bl	800115c <HAL_Delay>
  MX_X_CUBE_AI_Process();
 80036c2:	f7ff fb73 	bl	8002dac <MX_X_CUBE_AI_Process>
		if (ui_state.TouchDetected) {
 80036c6:	4b40      	ldr	r3, [pc, #256]	; (80037c8 <main+0x1c0>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0bb      	beq.n	8003646 <main+0x3e>
			if ((ui_state.X > DRAW_IMG_X1 && ui_state.X < DRAW_IMG_X2) && (ui_state.Y > DRAW_IMG_Y1 && ui_state.Y < DRAW_IMG_Y2)) {
 80036ce:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <main+0x1c0>)
 80036d0:	885a      	ldrh	r2, [r3, #2]
 80036d2:	f1a2 030b 	sub.w	r3, r2, #11
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2bda      	cmp	r3, #218	; 0xda
 80036da:	d8b4      	bhi.n	8003646 <main+0x3e>
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <main+0x1c0>)
 80036de:	889b      	ldrh	r3, [r3, #4]
 80036e0:	f1a3 010b 	sub.w	r1, r3, #11
 80036e4:	b289      	uxth	r1, r1
 80036e6:	29da      	cmp	r1, #218	; 0xda
 80036e8:	d8ad      	bhi.n	8003646 <main+0x3e>
				int x = ui_state.Y * ((float) 28 / 240);
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f2:	eddf 6a36 	vldr	s13, [pc, #216]	; 80037cc <main+0x1c4>
 80036f6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80036fa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
				int y = ui_state.X * ((float) 28 / 240);
 80036fe:	ee07 2a90 	vmov	s15, r2
 8003702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003706:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800370a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x + 1, 255);
 800370e:	ee17 3a90 	vmov	r3, s15
 8003712:	b29c      	uxth	r4, r3
 8003714:	f104 08c9 	add.w	r8, r4, #201	; 0xc9
 8003718:	fa1f f888 	uxth.w	r8, r8
 800371c:	ee17 3a10 	vmov	r3, s14
 8003720:	b29d      	uxth	r5, r3
 8003722:	f105 07fb 	add.w	r7, r5, #251	; 0xfb
 8003726:	b2bf      	uxth	r7, r7
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	4639      	mov	r1, r7
 800372c:	4640      	mov	r0, r8
 800372e:	f7fd fbed 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x - 1, 255);
 8003732:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
 8003736:	b2b6      	uxth	r6, r6
 8003738:	f105 09f9 	add.w	r9, r5, #249	; 0xf9
 800373c:	fa1f f989 	uxth.w	r9, r9
 8003740:	22ff      	movs	r2, #255	; 0xff
 8003742:	4649      	mov	r1, r9
 8003744:	4630      	mov	r0, r6
 8003746:	f7fd fbe1 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x, 255);
 800374a:	35fa      	adds	r5, #250	; 0xfa
 800374c:	b2ad      	uxth	r5, r5
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	4629      	mov	r1, r5
 8003752:	4640      	mov	r0, r8
 8003754:	f7fd fbda 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x, 255);
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	4629      	mov	r1, r5
 800375c:	4630      	mov	r0, r6
 800375e:	f7fd fbd5 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x, 255);
 8003762:	34c8      	adds	r4, #200	; 0xc8
 8003764:	b2a4      	uxth	r4, r4
 8003766:	22ff      	movs	r2, #255	; 0xff
 8003768:	4629      	mov	r1, r5
 800376a:	4620      	mov	r0, r4
 800376c:	f7fd fbce 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x + 1, 255);
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	4639      	mov	r1, r7
 8003774:	4620      	mov	r0, r4
 8003776:	f7fd fbc9 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x - 1, 255);
 800377a:	22ff      	movs	r2, #255	; 0xff
 800377c:	4649      	mov	r1, r9
 800377e:	4620      	mov	r0, r4
 8003780:	f7fd fbc4 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x - 1, 255);
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	4649      	mov	r1, r9
 8003788:	4640      	mov	r0, r8
 800378a:	f7fd fbbf 	bl	8000f0c <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT, IMG_SCALED_Y_SHIFT + x + 1, 255);
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	4639      	mov	r1, r7
 8003792:	4630      	mov	r0, r6
 8003794:	f7fd fbba 	bl	8000f0c <BSP_LCD_DrawPixel>
				printf("X =%d Y=%d\r\n", ui_state.X, ui_state.Y);
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <main+0x1c0>)
 800379a:	889a      	ldrh	r2, [r3, #4]
 800379c:	8859      	ldrh	r1, [r3, #2]
 800379e:	480c      	ldr	r0, [pc, #48]	; (80037d0 <main+0x1c8>)
 80037a0:	f002 fb94 	bl	8005ecc <iprintf>
 80037a4:	e74f      	b.n	8003646 <main+0x3e>
 80037a6:	bf00      	nop
 80037a8:	080628fc 	.word	0x080628fc
 80037ac:	0806292c 	.word	0x0806292c
 80037b0:	08062948 	.word	0x08062948
 80037b4:	08062964 	.word	0x08062964
 80037b8:	ffff0000 	.word	0xffff0000
 80037bc:	20000020 	.word	0x20000020
 80037c0:	08062968 	.word	0x08062968
 80037c4:	08062970 	.word	0x08062970
 80037c8:	20001e78 	.word	0x20001e78
 80037cc:	3deeeeef 	.word	0x3deeeeef
 80037d0:	0806291c 	.word	0x0806291c

080037d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80037d6:	6802      	ldr	r2, [r0, #0]
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80037da:	429a      	cmp	r2, r3
 80037dc:	d000      	beq.n	80037e0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80037de:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80037e0:	f7fd fcaa 	bl	8001138 <HAL_IncTick>
}
 80037e4:	e7fb      	b.n	80037de <HAL_TIM_PeriodElapsedCallback+0xa>
 80037e6:	bf00      	nop
 80037e8:	40001000 	.word	0x40001000

080037ec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037ec:	4770      	bx	lr
	...

080037f0 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 80037f0:	b530      	push	{r4, r5, lr}
 80037f2:	b09f      	sub	sp, #124	; 0x7c
 80037f4:	4605      	mov	r5, r0
 80037f6:	460c      	mov	r4, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80037f8:	f000 fbf8 	bl	8003fec <ai_platform_context_acquire>

  if ( report && net_ctx )
 80037fc:	2c00      	cmp	r4, #0
 80037fe:	d036      	beq.n	800386e <ai_network_get_info+0x7e>
 8003800:	2800      	cmp	r0, #0
 8003802:	d036      	beq.n	8003872 <ai_network_get_info+0x82>
  {
    ai_network_report r = {
 8003804:	2264      	movs	r2, #100	; 0x64
 8003806:	2100      	movs	r1, #0
 8003808:	a805      	add	r0, sp, #20
 800380a:	f001 fe43 	bl	8005494 <memset>
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <ai_network_get_info+0x8c>)
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	4b1b      	ldr	r3, [pc, #108]	; (8003880 <ai_network_get_info+0x90>)
 8003814:	9302      	str	r3, [sp, #8]
 8003816:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <ai_network_get_info+0x94>)
 8003818:	9303      	str	r3, [sp, #12]
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <ai_network_get_info+0x98>)
 800381c:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800381e:	f000 fb27 	bl	8003e70 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8003822:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003824:	f000 fb46 	bl	8003eb4 <ai_platform_runtime_get_version>
 8003828:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 800382a:	4b18      	ldr	r3, [pc, #96]	; (800388c <ai_network_get_info+0x9c>)
 800382c:	9307      	str	r3, [sp, #28]
 800382e:	2305      	movs	r3, #5
 8003830:	f88d 3020 	strb.w	r3, [sp, #32]
 8003834:	2302      	movs	r3, #2
 8003836:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800383a:	2301      	movs	r3, #1
 800383c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8003840:	2303      	movs	r3, #3
 8003842:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = {AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR,
                            AI_TOOLS_API_VERSION_MICRO, 0x0},

      .api_version            = ai_platform_api_get_version(),
 8003846:	f000 fb69 	bl	8003f1c <ai_platform_api_get_version>
 800384a:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800384c:	f000 fb9a 	bl	8003f84 <ai_platform_interface_api_get_version>
 8003850:	900b      	str	r0, [sp, #44]	; 0x2c
    ai_network_report r = {
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <ai_network_get_info+0xa0>)
 8003854:	930c      	str	r3, [sp, #48]	; 0x30
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 8003856:	a901      	add	r1, sp, #4
 8003858:	4628      	mov	r0, r5
 800385a:	f000 fc23 	bl	80040a4 <ai_platform_api_get_network_report>
 800385e:	4605      	mov	r5, r0
 8003860:	b140      	cbz	r0, 8003874 <ai_network_get_info+0x84>

    *report = r;
 8003862:	2274      	movs	r2, #116	; 0x74
 8003864:	a901      	add	r1, sp, #4
 8003866:	4620      	mov	r0, r4
 8003868:	f001 fe06 	bl	8005478 <memcpy>
    return true;
 800386c:	e002      	b.n	8003874 <ai_network_get_info+0x84>
  }

  return false;
 800386e:	2500      	movs	r5, #0
 8003870:	e000      	b.n	8003874 <ai_network_get_info+0x84>
 8003872:	2500      	movs	r5, #0
}
 8003874:	4628      	mov	r0, r5
 8003876:	b01f      	add	sp, #124	; 0x7c
 8003878:	bd30      	pop	{r4, r5, pc}
 800387a:	bf00      	nop
 800387c:	08062a1c 	.word	0x08062a1c
 8003880:	08062a24 	.word	0x08062a24
 8003884:	08062a48 	.word	0x08062a48
 8003888:	08062a64 	.word	0x08062a64
 800388c:	08062a7c 	.word	0x08062a7c
 8003890:	000159f0 	.word	0x000159f0

08003894 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8003894:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8003896:	f000 fbd3 	bl	8004040 <ai_platform_network_get_error>
}
 800389a:	bd08      	pop	{r3, pc}

0800389c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800389c:	b500      	push	{lr}
 800389e:	b083      	sub	sp, #12
  return ai_platform_network_create(
 80038a0:	2300      	movs	r3, #0
 80038a2:	9301      	str	r3, [sp, #4]
 80038a4:	2303      	movs	r3, #3
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	2301      	movs	r3, #1
 80038aa:	4a03      	ldr	r2, [pc, #12]	; (80038b8 <ai_network_create+0x1c>)
 80038ac:	f000 fce4 	bl	8004278 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80038b0:	b003      	add	sp, #12
 80038b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80038b6:	bf00      	nop
 80038b8:	20000030 	.word	0x20000030

080038bc <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4605      	mov	r5, r0
 80038c0:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80038c2:	f000 fd31 	bl	8004328 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d064      	beq.n	8003994 <ai_network_init+0xd8>
  ai_ptr weights = AI_PTR(weights_buffer->data);
 80038ca:	6921      	ldr	r1, [r4, #16]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80038cc:	4b32      	ldr	r3, [pc, #200]	; (8003998 <ai_network_init+0xdc>)
 80038ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038d4:	661a      	str	r2, [r3, #96]	; 0x60
    dense_3_bias_array.data = AI_PTR(weights + 354240);
 80038d6:	f501 22ac 	add.w	r2, r1, #352256	; 0x56000
 80038da:	f502 60f8 	add.w	r0, r2, #1984	; 0x7c0
 80038de:	6698      	str	r0, [r3, #104]	; 0x68
    dense_3_bias_array.data_start = AI_PTR(weights + 354240);
 80038e0:	66d8      	str	r0, [r3, #108]	; 0x6c
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80038e2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80038e4:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80038e8:	6718      	str	r0, [r3, #112]	; 0x70
    dense_3_weights_array.data = AI_PTR(weights + 353920);
 80038ea:	f502 60d0 	add.w	r0, r2, #1664	; 0x680
 80038ee:	6798      	str	r0, [r3, #120]	; 0x78
    dense_3_weights_array.data_start = AI_PTR(weights + 353920);
 80038f0:	67d8      	str	r0, [r3, #124]	; 0x7c
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80038f2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80038f6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80038fa:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    dense_2_bias_array.data = AI_PTR(weights + 353600);
 80038fe:	f502 62a8 	add.w	r2, r2, #1344	; 0x540
 8003902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    dense_2_bias_array.data_start = AI_PTR(weights + 353600);
 8003906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800390a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800390e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    dense_2_weights_array.data = AI_PTR(weights + 328000);
 8003916:	f501 22a0 	add.w	r2, r1, #327680	; 0x50000
 800391a:	f502 70a0 	add.w	r0, r2, #320	; 0x140
 800391e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    dense_2_weights_array.data_start = AI_PTR(weights + 328000);
 8003922:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003926:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800392a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 800392e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
    dense_1_bias_array.data = AI_PTR(weights + 327680);
 8003932:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    dense_1_bias_array.data_start = AI_PTR(weights + 327680);
 8003936:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800393a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800393e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003942:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    dense_1_weights_array.data = AI_PTR(weights + 0);
 8003946:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
    dense_1_weights_array.data_start = AI_PTR(weights + 0);
 800394a:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_NETWORK_ACTIVATIONS_ALIGNMENT));
 800394e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003950:	3203      	adds	r2, #3
 8003952:	f022 0203 	bic.w	r2, r2, #3
    serving_default_flatten_input0_output_array.data = AI_PTR(NULL);
 8003956:	2100      	movs	r1, #0
 8003958:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
    serving_default_flatten_input0_output_array.data_start = AI_PTR(NULL);
 800395c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
    dense_1_output_array.data = AI_PTR(activations + 0);
 8003960:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    dense_1_output_array.data_start = AI_PTR(activations + 0);
 8003964:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    nl_1_output_array.data = AI_PTR(activations + 0);
 8003968:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    nl_1_output_array.data_start = AI_PTR(activations + 0);
 800396c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    dense_2_output_array.data = AI_PTR(activations + 320);
 8003970:	f502 70a0 	add.w	r0, r2, #320	; 0x140
 8003974:	f8c3 00f8 	str.w	r0, [r3, #248]	; 0xf8
    dense_2_output_array.data_start = AI_PTR(activations + 320);
 8003978:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
    nl_2_output_array.data = AI_PTR(activations + 0);
 800397c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    nl_2_output_array.data_start = AI_PTR(activations + 0);
 8003980:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    dense_3_output_array.data = AI_PTR(NULL);
 8003984:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
    dense_3_output_array.data_start = AI_PTR(NULL);
 8003988:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);

  ok &= ai_platform_network_post_init(network);
 800398c:	4628      	mov	r0, r5
 800398e:	f000 fd49 	bl	8004424 <ai_platform_network_post_init>

  return ok;
}
 8003992:	bd38      	pop	{r3, r4, r5, pc}
  if ( !net_ctx ) return false;
 8003994:	2000      	movs	r0, #0
 8003996:	e7fc      	b.n	8003992 <ai_network_init+0xd6>
 8003998:	20000030 	.word	0x20000030

0800399c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800399c:	b508      	push	{r3, lr}
  return ai_platform_network_process(network, input, output);
 800399e:	f000 fd89 	bl	80044b4 <ai_platform_network_process>
}
 80039a2:	bd08      	pop	{r3, pc}

080039a4 <ai_network_data_weights_get>:
    0xbc, 0x56, 0x27, 0x2a, 0xbd, 0x4e, 0xca, 0x99, 0xbc
  };

  return AI_HANDLE_PTR(s_network_weights);

}
 80039a4:	4800      	ldr	r0, [pc, #0]	; (80039a8 <ai_network_data_weights_get+0x4>)
 80039a6:	4770      	bx	lr
 80039a8:	0800bfd4 	.word	0x0800bfd4

080039ac <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80039ac:	b508      	push	{r3, lr}
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80039ae:	480d      	ldr	r0, [pc, #52]	; (80039e4 <MX_SPI5_Init+0x38>)
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <MX_SPI5_Init+0x3c>)
 80039b2:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80039b4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80039b8:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80039ba:	2300      	movs	r3, #0
 80039bc:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80039be:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c0:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039c2:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80039c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c8:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ca:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039cc:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ce:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d0:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80039d2:	230a      	movs	r3, #10
 80039d4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80039d6:	f7fe fd1f 	bl	8002418 <HAL_SPI_Init>
 80039da:	b900      	cbnz	r0, 80039de <MX_SPI5_Init+0x32>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80039dc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80039de:	f7ff ff05 	bl	80037ec <Error_Handler>
}
 80039e2:	e7fb      	b.n	80039dc <MX_SPI5_Init+0x30>
 80039e4:	20001e80 	.word	0x20001e80
 80039e8:	40015000 	.word	0x40015000

080039ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039ec:	b500      	push	{lr}
 80039ee:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f0:	2300      	movs	r3, #0
 80039f2:	9303      	str	r3, [sp, #12]
 80039f4:	9304      	str	r3, [sp, #16]
 80039f6:	9305      	str	r3, [sp, #20]
 80039f8:	9306      	str	r3, [sp, #24]
 80039fa:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI5)
 80039fc:	6802      	ldr	r2, [r0, #0]
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_SPI_MspInit+0x68>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d002      	beq.n	8003a0a <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003a04:	b009      	add	sp, #36	; 0x24
 8003a06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	9201      	str	r2, [sp, #4]
 8003a0e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8003a12:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003a18:	6459      	str	r1, [r3, #68]	; 0x44
 8003a1a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a1c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8003a20:	9101      	str	r1, [sp, #4]
 8003a22:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a24:	9202      	str	r2, [sp, #8]
 8003a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a28:	f041 0120 	orr.w	r1, r1, #32
 8003a2c:	6319      	str	r1, [r3, #48]	; 0x30
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003a38:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003a3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3e:	2302      	movs	r3, #2
 8003a40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003a46:	2305      	movs	r3, #5
 8003a48:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a4a:	a903      	add	r1, sp, #12
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <HAL_SPI_MspInit+0x6c>)
 8003a4e:	f7fd fc8b 	bl	8001368 <HAL_GPIO_Init>
}
 8003a52:	e7d7      	b.n	8003a04 <HAL_SPI_MspInit+0x18>
 8003a54:	40015000 	.word	0x40015000
 8003a58:	40021400 	.word	0x40021400

08003a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a5c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2100      	movs	r1, #0
 8003a60:	9100      	str	r1, [sp, #0]
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_MspInit+0x34>)
 8003a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
 8003a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a6e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003a72:	9200      	str	r2, [sp, #0]
 8003a74:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	9101      	str	r1, [sp, #4]
 8003a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a8a:	b002      	add	sp, #8
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800

08003a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a94:	b510      	push	{r4, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2036      	movs	r0, #54	; 0x36
 8003a9e:	f7fd fb83 	bl	80011a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003aa2:	2036      	movs	r0, #54	; 0x36
 8003aa4:	f7fd fbb4 	bl	8001210 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003aa8:	2400      	movs	r4, #0
 8003aaa:	9401      	str	r4, [sp, #4]
 8003aac:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <HAL_InitTick+0x6c>)
 8003aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab0:	f042 0210 	orr.w	r2, r2, #16
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ac0:	a902      	add	r1, sp, #8
 8003ac2:	a803      	add	r0, sp, #12
 8003ac4:	f7fe fb26 	bl	8002114 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003ac8:	f7fe fb04 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 8003acc:	0043      	lsls	r3, r0, #1
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ace:	480d      	ldr	r0, [pc, #52]	; (8003b04 <HAL_InitTick+0x70>)
 8003ad0:	fba0 2303 	umull	r2, r3, r0, r3
 8003ad4:	0c9b      	lsrs	r3, r3, #18
 8003ad6:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <HAL_InitTick+0x74>)
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <HAL_InitTick+0x78>)
 8003adc:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003ade:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ae2:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ae4:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8003ae6:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae8:	6084      	str	r4, [r0, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003aea:	f7fe fe8b 	bl	8002804 <HAL_TIM_Base_Init>
 8003aee:	b110      	cbz	r0, 8003af6 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8003af0:	2001      	movs	r0, #1
}
 8003af2:	b008      	add	sp, #32
 8003af4:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8003af6:	4804      	ldr	r0, [pc, #16]	; (8003b08 <HAL_InitTick+0x74>)
 8003af8:	f7fe fd1a 	bl	8002530 <HAL_TIM_Base_Start_IT>
 8003afc:	e7f9      	b.n	8003af2 <HAL_InitTick+0x5e>
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	431bde83 	.word	0x431bde83
 8003b08:	20001ed8 	.word	0x20001ed8
 8003b0c:	40001000 	.word	0x40001000

08003b10 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b10:	4770      	bx	lr

08003b12 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <HardFault_Handler>

08003b14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b14:	e7fe      	b.n	8003b14 <MemManage_Handler>

08003b16 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b16:	e7fe      	b.n	8003b16 <BusFault_Handler>

08003b18 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <UsageFault_Handler>

08003b1a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b1a:	4770      	bx	lr

08003b1c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b1c:	4770      	bx	lr

08003b1e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b1e:	4770      	bx	lr

08003b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b22:	4802      	ldr	r0, [pc, #8]	; (8003b2c <TIM6_DAC_IRQHandler+0xc>)
 8003b24:	f7fe fd4c 	bl	80025c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b28:	bd08      	pop	{r3, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20001ed8 	.word	0x20001ed8

08003b30 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003b30:	2001      	movs	r0, #1
 8003b32:	4770      	bx	lr

08003b34 <_kill>:

int _kill(int pid, int sig)
{
 8003b34:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003b36:	f001 fc6d 	bl	8005414 <__errno>
 8003b3a:	2316      	movs	r3, #22
 8003b3c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b42:	bd08      	pop	{r3, pc}

08003b44 <_exit>:

void _exit (int status)
{
 8003b44:	b508      	push	{r3, lr}
	_kill(status, -1);
 8003b46:	f04f 31ff 	mov.w	r1, #4294967295
 8003b4a:	f7ff fff3 	bl	8003b34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b4e:	e7fe      	b.n	8003b4e <_exit+0xa>

08003b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	460c      	mov	r4, r1
 8003b54:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b56:	2500      	movs	r5, #0
 8003b58:	42b5      	cmp	r5, r6
 8003b5a:	da07      	bge.n	8003b6c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8003b5c:	f3af 8000 	nop.w
 8003b60:	4621      	mov	r1, r4
 8003b62:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b66:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8003b68:	460c      	mov	r4, r1
 8003b6a:	e7f5      	b.n	8003b58 <_read+0x8>
	}

return len;
}
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}

08003b70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	460c      	mov	r4, r1
 8003b74:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	2500      	movs	r5, #0
 8003b78:	42b5      	cmp	r5, r6
 8003b7a:	da05      	bge.n	8003b88 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8003b7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003b80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b84:	3501      	adds	r5, #1
 8003b86:	e7f7      	b.n	8003b78 <_write+0x8>
	}
	return len;
}
 8003b88:	4630      	mov	r0, r6
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}

08003b8c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003b8c:	b508      	push	{r3, lr}
 8003b8e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003b90:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <_sbrk+0x34>)
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	b142      	cbz	r2, 8003ba8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <_sbrk+0x34>)
 8003b98:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003b9a:	4403      	add	r3, r0
 8003b9c:	466a      	mov	r2, sp
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d806      	bhi.n	8003bb0 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003ba2:	4a07      	ldr	r2, [pc, #28]	; (8003bc0 <_sbrk+0x34>)
 8003ba4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003ba6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003ba8:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <_sbrk+0x34>)
 8003baa:	4906      	ldr	r1, [pc, #24]	; (8003bc4 <_sbrk+0x38>)
 8003bac:	6011      	str	r1, [r2, #0]
 8003bae:	e7f2      	b.n	8003b96 <_sbrk+0xa>
		errno = ENOMEM;
 8003bb0:	f001 fc30 	bl	8005414 <__errno>
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	e7f3      	b.n	8003ba6 <_sbrk+0x1a>
 8003bbe:	bf00      	nop
 8003bc0:	20001c40 	.word	0x20001c40
 8003bc4:	20001fc0 	.word	0x20001fc0

08003bc8 <_close>:

int _close(int file)
{
	return -1;
}
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bcc:	4770      	bx	lr

08003bce <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd2:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	4770      	bx	lr

08003bd8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003bd8:	2001      	movs	r0, #1
 8003bda:	4770      	bx	lr

08003bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003bdc:	2000      	movs	r0, #0
 8003bde:	4770      	bx	lr

08003be0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <SystemInit+0x18>)
 8003be2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003be6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bf2:	609a      	str	r2, [r3, #8]
#endif
}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003bfc:	b500      	push	{lr}
 8003bfe:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c00:	2300      	movs	r3, #0
 8003c02:	9302      	str	r3, [sp, #8]
 8003c04:	9303      	str	r3, [sp, #12]
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c0e:	4815      	ldr	r0, [pc, #84]	; (8003c64 <MX_TIM1_Init+0x68>)
 8003c10:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <MX_TIM1_Init+0x6c>)
 8003c12:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8003c14:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c16:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8003c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c1c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c1e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c20:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c22:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c24:	f7fe fdee 	bl	8002804 <HAL_TIM_Base_Init>
 8003c28:	b990      	cbnz	r0, 8003c50 <MX_TIM1_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c2e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c30:	a902      	add	r1, sp, #8
 8003c32:	480c      	ldr	r0, [pc, #48]	; (8003c64 <MX_TIM1_Init+0x68>)
 8003c34:	f7fe fe1e 	bl	8002874 <HAL_TIM_ConfigClockSource>
 8003c38:	b968      	cbnz	r0, 8003c56 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c3e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c40:	4669      	mov	r1, sp
 8003c42:	4808      	ldr	r0, [pc, #32]	; (8003c64 <MX_TIM1_Init+0x68>)
 8003c44:	f7fe fe96 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 8003c48:	b940      	cbnz	r0, 8003c5c <MX_TIM1_Init+0x60>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c4a:	b007      	add	sp, #28
 8003c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003c50:	f7ff fdcc 	bl	80037ec <Error_Handler>
 8003c54:	e7e9      	b.n	8003c2a <MX_TIM1_Init+0x2e>
    Error_Handler();
 8003c56:	f7ff fdc9 	bl	80037ec <Error_Handler>
 8003c5a:	e7ee      	b.n	8003c3a <MX_TIM1_Init+0x3e>
    Error_Handler();
 8003c5c:	f7ff fdc6 	bl	80037ec <Error_Handler>
}
 8003c60:	e7f3      	b.n	8003c4a <MX_TIM1_Init+0x4e>
 8003c62:	bf00      	nop
 8003c64:	20001f20 	.word	0x20001f20
 8003c68:	40010000 	.word	0x40010000

08003c6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8003c6c:	6802      	ldr	r2, [r0, #0]
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_TIM_Base_MspInit+0x28>)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d000      	beq.n	8003c76 <HAL_TIM_Base_MspInit+0xa>
 8003c74:	4770      	bx	lr
{
 8003c76:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_TIM_Base_MspInit+0x2c>)
 8003c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c80:	f042 0201 	orr.w	r2, r2, #1
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003c90:	b002      	add	sp, #8
 8003c92:	4770      	bx	lr
 8003c94:	40010000 	.word	0x40010000
 8003c98:	40023800 	.word	0x40023800

08003c9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c9c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c9e:	480a      	ldr	r0, [pc, #40]	; (8003cc8 <MX_USART1_UART_Init+0x2c>)
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <MX_USART1_UART_Init+0x30>)
 8003ca2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003ca4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ca8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003caa:	2300      	movs	r3, #0
 8003cac:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003cae:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003cb0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003cb2:	220c      	movs	r2, #12
 8003cb4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cb6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cb8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003cba:	f7fe ff2f 	bl	8002b1c <HAL_UART_Init>
 8003cbe:	b900      	cbnz	r0, 8003cc2 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003cc0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003cc2:	f7ff fd93 	bl	80037ec <Error_Handler>
}
 8003cc6:	e7fb      	b.n	8003cc0 <MX_USART1_UART_Init+0x24>
 8003cc8:	20001f68 	.word	0x20001f68
 8003ccc:	40011000 	.word	0x40011000

08003cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cd0:	b500      	push	{lr}
 8003cd2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	9304      	str	r3, [sp, #16]
 8003cda:	9305      	str	r3, [sp, #20]
 8003cdc:	9306      	str	r3, [sp, #24]
 8003cde:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8003ce0:	6802      	ldr	r2, [r0, #0]
 8003ce2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ce6:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d002      	beq.n	8003cf4 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003cee:	b009      	add	sp, #36	; 0x24
 8003cf0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	9201      	str	r2, [sp, #4]
 8003cf8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003cfc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003cfe:	f041 0110 	orr.w	r1, r1, #16
 8003d02:	6459      	str	r1, [r3, #68]	; 0x44
 8003d04:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003d06:	f001 0110 	and.w	r1, r1, #16
 8003d0a:	9101      	str	r1, [sp, #4]
 8003d0c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0e:	9202      	str	r2, [sp, #8]
 8003d10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d12:	f041 0101 	orr.w	r1, r1, #1
 8003d16:	6319      	str	r1, [r3, #48]	; 0x30
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	9302      	str	r3, [sp, #8]
 8003d20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003d22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d32:	2307      	movs	r3, #7
 8003d34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	a903      	add	r1, sp, #12
 8003d38:	4801      	ldr	r0, [pc, #4]	; (8003d40 <HAL_UART_MspInit+0x70>)
 8003d3a:	f7fd fb15 	bl	8001368 <HAL_GPIO_Init>
}
 8003d3e:	e7d6      	b.n	8003cee <HAL_UART_MspInit+0x1e>
 8003d40:	40020000 	.word	0x40020000

08003d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d7c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d4a:	e003      	b.n	8003d54 <LoopCopyDataInit>

08003d4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d52:	3104      	adds	r1, #4

08003d54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d54:	480b      	ldr	r0, [pc, #44]	; (8003d84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d5c:	d3f6      	bcc.n	8003d4c <CopyDataInit>
  ldr  r2, =_sbss
 8003d5e:	4a0b      	ldr	r2, [pc, #44]	; (8003d8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d60:	e002      	b.n	8003d68 <LoopFillZerobss>

08003d62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d64:	f842 3b04 	str.w	r3, [r2], #4

08003d68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d6c:	d3f9      	bcc.n	8003d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d6e:	f7ff ff37 	bl	8003be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d72:	f001 fb55 	bl	8005420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d76:	f7ff fc47 	bl	8003608 <main>
  bx  lr    
 8003d7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003d7c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003d80:	08062e84 	.word	0x08062e84
  ldr  r0, =_sdata
 8003d84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d88:	20000818 	.word	0x20000818
  ldr  r2, =_sbss
 8003d8c:	20000818 	.word	0x20000818
  ldr  r3, = _ebss
 8003d90:	20001fbc 	.word	0x20001fbc

08003d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d94:	e7fe      	b.n	8003d94 <ADC_IRQHandler>

08003d96 <_ai_platform_get_io_buffers_info>:
 8003d96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	2400      	movs	r4, #0
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	4606      	mov	r6, r0
 8003da0:	4688      	mov	r8, r1
 8003da2:	46a3      	mov	fp, r4
 8003da4:	f04f 0a18 	mov.w	sl, #24
 8003da8:	f04f 0901 	mov.w	r9, #1
 8003dac:	b2a0      	uxth	r0, r4
 8003dae:	b936      	cbnz	r6, 8003dbe <_ai_platform_get_io_buffers_info+0x28>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d03b      	beq.n	8003e2c <_ai_platform_get_io_buffers_info+0x96>
 8003db4:	68b3      	ldr	r3, [r6, #8]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f8c8 3000 	str.w	r3, [r8]
 8003dbc:	e036      	b.n	8003e2c <_ai_platform_get_io_buffers_info+0x96>
 8003dbe:	8833      	ldrh	r3, [r6, #0]
 8003dc0:	429c      	cmp	r4, r3
 8003dc2:	d2f5      	bcs.n	8003db0 <_ai_platform_get_io_buffers_info+0x1a>
 8003dc4:	6873      	ldr	r3, [r6, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f2      	beq.n	8003db0 <_ai_platform_get_io_buffers_info+0x1a>
 8003dca:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	d0ee      	beq.n	8003db0 <_ai_platform_get_io_buffers_info+0x1a>
 8003dd2:	68b3      	ldr	r3, [r6, #8]
 8003dd4:	69aa      	ldr	r2, [r5, #24]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	6810      	ldr	r0, [r2, #0]
 8003dda:	689f      	ldr	r7, [r3, #8]
 8003ddc:	9101      	str	r1, [sp, #4]
 8003dde:	f001 faab 	bl	8005338 <ai_array_to_buffer_fmt>
 8003de2:	9901      	ldr	r1, [sp, #4]
 8003de4:	fb0a f304 	mul.w	r3, sl, r4
 8003de8:	18ca      	adds	r2, r1, r3
 8003dea:	50c8      	str	r0, [r1, r3]
 8003dec:	f8a2 9004 	strh.w	r9, [r2, #4]
 8003df0:	68eb      	ldr	r3, [r5, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	80d3      	strh	r3, [r2, #6]
 8003df6:	68eb      	ldr	r3, [r5, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	8113      	strh	r3, [r2, #8]
 8003dfc:	68eb      	ldr	r3, [r5, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60d3      	str	r3, [r2, #12]
 8003e02:	69ab      	ldr	r3, [r5, #24]
 8003e04:	00e1      	lsls	r1, r4, #3
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	6113      	str	r3, [r2, #16]
 8003e0a:	1878      	adds	r0, r7, r1
 8003e0c:	b150      	cbz	r0, 8003e24 <_ai_platform_get_io_buffers_info+0x8e>
 8003e0e:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8003e12:	682b      	ldr	r3, [r5, #0]
 8003e14:	6043      	str	r3, [r0, #4]
 8003e16:	b11b      	cbz	r3, 8003e20 <_ai_platform_get_io_buffers_info+0x8a>
 8003e18:	885b      	ldrh	r3, [r3, #2]
 8003e1a:	3300      	adds	r3, #0
 8003e1c:	bf18      	it	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	507b      	str	r3, [r7, r1]
 8003e22:	b903      	cbnz	r3, 8003e26 <_ai_platform_get_io_buffers_info+0x90>
 8003e24:	2000      	movs	r0, #0
 8003e26:	6150      	str	r0, [r2, #20]
 8003e28:	3401      	adds	r4, #1
 8003e2a:	e7bf      	b.n	8003dac <_ai_platform_get_io_buffers_info+0x16>
 8003e2c:	b003      	add	sp, #12
 8003e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003e32 <_platform_network_state_setup.isra.1>:
 8003e32:	b430      	push	{r4, r5}
 8003e34:	68dd      	ldr	r5, [r3, #12]
 8003e36:	695c      	ldr	r4, [r3, #20]
 8003e38:	68ed      	ldr	r5, [r5, #12]
 8003e3a:	68e4      	ldr	r4, [r4, #12]
 8003e3c:	fb04 f405 	mul.w	r4, r4, r5
 8003e40:	6084      	str	r4, [r0, #8]
 8003e42:	8809      	ldrh	r1, [r1, #0]
 8003e44:	fb04 f401 	mul.w	r4, r4, r1
 8003e48:	60c4      	str	r4, [r0, #12]
 8003e4a:	6811      	ldr	r1, [r2, #0]
 8003e4c:	6041      	str	r1, [r0, #4]
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	4414      	add	r4, r2
 8003e52:	6004      	str	r4, [r0, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	6814      	ldr	r4, [r2, #0]
 8003e58:	00a4      	lsls	r4, r4, #2
 8003e5a:	d407      	bmi.n	8003e6c <_platform_network_state_setup.isra.1+0x3a>
 8003e5c:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	4421      	add	r1, r4
 8003e64:	6091      	str	r1, [r2, #8]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	6842      	ldr	r2, [r0, #4]
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	bc30      	pop	{r4, r5}
 8003e6e:	4770      	bx	lr

08003e70 <ai_platform_runtime_get_revision>:
 8003e70:	490a      	ldr	r1, [pc, #40]	; (8003e9c <ai_platform_runtime_get_revision+0x2c>)
 8003e72:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <ai_platform_runtime_get_revision+0x30>)
 8003e74:	680b      	ldr	r3, [r1, #0]
 8003e76:	2001      	movs	r0, #1
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	600b      	str	r3, [r1, #0]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	6010      	str	r0, [r2, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	d1fc      	bne.n	8003e82 <ai_platform_runtime_get_revision+0x12>
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <ai_platform_runtime_get_revision+0x34>)
 8003e8a:	4a07      	ldr	r2, [pc, #28]	; (8003ea8 <ai_platform_runtime_get_revision+0x38>)
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <ai_platform_runtime_get_revision+0x3c>)
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d000      	beq.n	8003e98 <ai_platform_runtime_get_revision+0x28>
 8003e96:	e7fe      	b.n	8003e96 <ai_platform_runtime_get_revision+0x26>
 8003e98:	4805      	ldr	r0, [pc, #20]	; (8003eb0 <ai_platform_runtime_get_revision+0x40>)
 8003e9a:	4770      	bx	lr
 8003e9c:	e0002000 	.word	0xe0002000
 8003ea0:	40023008 	.word	0x40023008
 8003ea4:	40023000 	.word	0x40023000
 8003ea8:	f407a5c2 	.word	0xf407a5c2
 8003eac:	b5e8b5cd 	.word	0xb5e8b5cd
 8003eb0:	08062928 	.word	0x08062928

08003eb4 <ai_platform_runtime_get_version>:
 8003eb4:	4913      	ldr	r1, [pc, #76]	; (8003f04 <ai_platform_runtime_get_version+0x50>)
 8003eb6:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <ai_platform_runtime_get_version+0x54>)
 8003eb8:	680b      	ldr	r3, [r1, #0]
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	600b      	str	r3, [r1, #0]
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	6010      	str	r0, [r2, #0]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	2800      	cmp	r0, #0
 8003ecc:	d1fc      	bne.n	8003ec8 <ai_platform_runtime_get_version+0x14>
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <ai_platform_runtime_get_version+0x58>)
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	; (8003f10 <ai_platform_runtime_get_version+0x5c>)
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <ai_platform_runtime_get_version+0x60>)
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d000      	beq.n	8003ede <ai_platform_runtime_get_version+0x2a>
 8003edc:	e7fe      	b.n	8003edc <ai_platform_runtime_get_version+0x28>
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <ai_platform_runtime_get_version+0x64>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	f362 0007 	bfi	r0, r2, #0, #8
 8003ee8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003eec:	f362 200f 	bfi	r0, r2, #8, #8
 8003ef0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003ef4:	f362 4017 	bfi	r0, r2, #16, #8
 8003ef8:	0e1b      	lsrs	r3, r3, #24
 8003efa:	f363 601f 	bfi	r0, r3, #24, #8
 8003efe:	b002      	add	sp, #8
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e0002000 	.word	0xe0002000
 8003f08:	40023008 	.word	0x40023008
 8003f0c:	40023000 	.word	0x40023000
 8003f10:	f407a5c2 	.word	0xf407a5c2
 8003f14:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f18:	08062a88 	.word	0x08062a88

08003f1c <ai_platform_api_get_version>:
 8003f1c:	4913      	ldr	r1, [pc, #76]	; (8003f6c <ai_platform_api_get_version+0x50>)
 8003f1e:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <ai_platform_api_get_version+0x54>)
 8003f20:	680b      	ldr	r3, [r1, #0]
 8003f22:	2001      	movs	r0, #1
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	600b      	str	r3, [r1, #0]
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	6010      	str	r0, [r2, #0]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	2800      	cmp	r0, #0
 8003f34:	d1fc      	bne.n	8003f30 <ai_platform_api_get_version+0x14>
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <ai_platform_api_get_version+0x58>)
 8003f38:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <ai_platform_api_get_version+0x5c>)
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <ai_platform_api_get_version+0x60>)
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d000      	beq.n	8003f46 <ai_platform_api_get_version+0x2a>
 8003f44:	e7fe      	b.n	8003f44 <ai_platform_api_get_version+0x28>
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <ai_platform_api_get_version+0x64>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	f362 0007 	bfi	r0, r2, #0, #8
 8003f50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003f54:	f362 200f 	bfi	r0, r2, #8, #8
 8003f58:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003f5c:	f362 4017 	bfi	r0, r2, #16, #8
 8003f60:	0e1b      	lsrs	r3, r3, #24
 8003f62:	f363 601f 	bfi	r0, r3, #24, #8
 8003f66:	b002      	add	sp, #8
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	e0002000 	.word	0xe0002000
 8003f70:	40023008 	.word	0x40023008
 8003f74:	40023000 	.word	0x40023000
 8003f78:	f407a5c2 	.word	0xf407a5c2
 8003f7c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f80:	08062a8c 	.word	0x08062a8c

08003f84 <ai_platform_interface_api_get_version>:
 8003f84:	4913      	ldr	r1, [pc, #76]	; (8003fd4 <ai_platform_interface_api_get_version+0x50>)
 8003f86:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <ai_platform_interface_api_get_version+0x54>)
 8003f88:	680b      	ldr	r3, [r1, #0]
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	600b      	str	r3, [r1, #0]
 8003f92:	b082      	sub	sp, #8
 8003f94:	4613      	mov	r3, r2
 8003f96:	6010      	str	r0, [r2, #0]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d1fc      	bne.n	8003f98 <ai_platform_interface_api_get_version+0x14>
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <ai_platform_interface_api_get_version+0x58>)
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <ai_platform_interface_api_get_version+0x5c>)
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <ai_platform_interface_api_get_version+0x60>)
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d000      	beq.n	8003fae <ai_platform_interface_api_get_version+0x2a>
 8003fac:	e7fe      	b.n	8003fac <ai_platform_interface_api_get_version+0x28>
 8003fae:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <ai_platform_interface_api_get_version+0x64>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	f362 0007 	bfi	r0, r2, #0, #8
 8003fb8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003fbc:	f362 200f 	bfi	r0, r2, #8, #8
 8003fc0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003fc4:	f362 4017 	bfi	r0, r2, #16, #8
 8003fc8:	0e1b      	lsrs	r3, r3, #24
 8003fca:	f363 601f 	bfi	r0, r3, #24, #8
 8003fce:	b002      	add	sp, #8
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e0002000 	.word	0xe0002000
 8003fd8:	40023008 	.word	0x40023008
 8003fdc:	40023000 	.word	0x40023000
 8003fe0:	f407a5c2 	.word	0xf407a5c2
 8003fe4:	b5e8b5cd 	.word	0xb5e8b5cd
 8003fe8:	08062a90 	.word	0x08062a90

08003fec <ai_platform_context_acquire>:
 8003fec:	b410      	push	{r4}
 8003fee:	b120      	cbz	r0, 8003ffa <ai_platform_context_acquire+0xe>
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <ai_platform_context_acquire+0x3c>)
 8003ff2:	6802      	ldr	r2, [r0, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	bf18      	it	ne
 8003ff8:	2000      	movne	r0, #0
 8003ffa:	490c      	ldr	r1, [pc, #48]	; (800402c <ai_platform_context_acquire+0x40>)
 8003ffc:	4a0c      	ldr	r2, [pc, #48]	; (8004030 <ai_platform_context_acquire+0x44>)
 8003ffe:	680b      	ldr	r3, [r1, #0]
 8004000:	2401      	movs	r4, #1
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	600b      	str	r3, [r1, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	6014      	str	r4, [r2, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2a00      	cmp	r2, #0
 8004010:	d1fc      	bne.n	800400c <ai_platform_context_acquire+0x20>
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <ai_platform_context_acquire+0x48>)
 8004014:	4a08      	ldr	r2, [pc, #32]	; (8004038 <ai_platform_context_acquire+0x4c>)
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <ai_platform_context_acquire+0x50>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d000      	beq.n	8004022 <ai_platform_context_acquire+0x36>
 8004020:	e7fe      	b.n	8004020 <ai_platform_context_acquire+0x34>
 8004022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	a1c00100 	.word	0xa1c00100
 800402c:	e0002000 	.word	0xe0002000
 8004030:	40023008 	.word	0x40023008
 8004034:	40023000 	.word	0x40023000
 8004038:	f407a5c2 	.word	0xf407a5c2
 800403c:	b5e8b5cd 	.word	0xb5e8b5cd

08004040 <ai_platform_network_get_error>:
 8004040:	b410      	push	{r4}
 8004042:	b120      	cbz	r0, 800404e <ai_platform_network_get_error+0xe>
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <ai_platform_network_get_error+0x4c>)
 8004046:	6802      	ldr	r2, [r0, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	bf18      	it	ne
 800404c:	2000      	movne	r0, #0
 800404e:	4910      	ldr	r1, [pc, #64]	; (8004090 <ai_platform_network_get_error+0x50>)
 8004050:	4a10      	ldr	r2, [pc, #64]	; (8004094 <ai_platform_network_get_error+0x54>)
 8004052:	680b      	ldr	r3, [r1, #0]
 8004054:	2401      	movs	r4, #1
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	600b      	str	r3, [r1, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	6014      	str	r4, [r2, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	2a00      	cmp	r2, #0
 8004064:	d1fc      	bne.n	8004060 <ai_platform_network_get_error+0x20>
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <ai_platform_network_get_error+0x58>)
 8004068:	4a0c      	ldr	r2, [pc, #48]	; (800409c <ai_platform_network_get_error+0x5c>)
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <ai_platform_network_get_error+0x60>)
 8004070:	429a      	cmp	r2, r3
 8004072:	d000      	beq.n	8004076 <ai_platform_network_get_error+0x36>
 8004074:	e7fe      	b.n	8004074 <ai_platform_network_get_error+0x34>
 8004076:	b120      	cbz	r0, 8004082 <ai_platform_network_get_error+0x42>
 8004078:	3010      	adds	r0, #16
 800407a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800407e:	f000 bc25 	b.w	80048cc <core_get_error>
 8004082:	f241 0010 	movw	r0, #4112	; 0x1010
 8004086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	a1c00100 	.word	0xa1c00100
 8004090:	e0002000 	.word	0xe0002000
 8004094:	40023008 	.word	0x40023008
 8004098:	40023000 	.word	0x40023000
 800409c:	f407a5c2 	.word	0xf407a5c2
 80040a0:	b5e8b5cd 	.word	0xb5e8b5cd

080040a4 <ai_platform_api_get_network_report>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	460e      	mov	r6, r1
 80040a8:	4604      	mov	r4, r0
 80040aa:	b120      	cbz	r0, 80040b6 <ai_platform_api_get_network_report+0x12>
 80040ac:	4b6b      	ldr	r3, [pc, #428]	; (800425c <ai_platform_api_get_network_report+0x1b8>)
 80040ae:	6802      	ldr	r2, [r0, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	bf18      	it	ne
 80040b4:	2400      	movne	r4, #0
 80040b6:	496a      	ldr	r1, [pc, #424]	; (8004260 <ai_platform_api_get_network_report+0x1bc>)
 80040b8:	4a6a      	ldr	r2, [pc, #424]	; (8004264 <ai_platform_api_get_network_report+0x1c0>)
 80040ba:	680b      	ldr	r3, [r1, #0]
 80040bc:	2001      	movs	r0, #1
 80040be:	f023 0301 	bic.w	r3, r3, #1
 80040c2:	600b      	str	r3, [r1, #0]
 80040c4:	4611      	mov	r1, r2
 80040c6:	6010      	str	r0, [r2, #0]
 80040c8:	680b      	ldr	r3, [r1, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1fc      	bne.n	80040c8 <ai_platform_api_get_network_report+0x24>
 80040ce:	4a66      	ldr	r2, [pc, #408]	; (8004268 <ai_platform_api_get_network_report+0x1c4>)
 80040d0:	4966      	ldr	r1, [pc, #408]	; (800426c <ai_platform_api_get_network_report+0x1c8>)
 80040d2:	6011      	str	r1, [r2, #0]
 80040d4:	6811      	ldr	r1, [r2, #0]
 80040d6:	4a66      	ldr	r2, [pc, #408]	; (8004270 <ai_platform_api_get_network_report+0x1cc>)
 80040d8:	4291      	cmp	r1, r2
 80040da:	d000      	beq.n	80040de <ai_platform_api_get_network_report+0x3a>
 80040dc:	e7fe      	b.n	80040dc <ai_platform_api_get_network_report+0x38>
 80040de:	2c00      	cmp	r4, #0
 80040e0:	d061      	beq.n	80041a6 <ai_platform_api_get_network_report+0x102>
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	d061      	beq.n	80041aa <ai_platform_api_get_network_report+0x106>
 80040e6:	66f3      	str	r3, [r6, #108]	; 0x6c
 80040e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	d055      	beq.n	800419a <ai_platform_api_get_network_report+0xf6>
 80040ee:	2301      	movs	r3, #1
 80040f0:	66f3      	str	r3, [r6, #108]	; 0x6c
 80040f2:	68d3      	ldr	r3, [r2, #12]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d00c      	beq.n	8004112 <ai_platform_api_get_network_report+0x6e>
 80040f8:	b15b      	cbz	r3, 8004112 <ai_platform_api_get_network_report+0x6e>
 80040fa:	2202      	movs	r2, #2
 80040fc:	e003      	b.n	8004106 <ai_platform_api_get_network_report+0x62>
 80040fe:	1c50      	adds	r0, r2, #1
 8004100:	460b      	mov	r3, r1
 8004102:	b121      	cbz	r1, 800410e <ai_platform_api_get_network_report+0x6a>
 8004104:	4602      	mov	r2, r0
 8004106:	66f2      	str	r2, [r6, #108]	; 0x6c
 8004108:	68d9      	ldr	r1, [r3, #12]
 800410a:	4299      	cmp	r1, r3
 800410c:	d1f7      	bne.n	80040fe <ai_platform_api_get_network_report+0x5a>
 800410e:	2a00      	cmp	r2, #0
 8004110:	d043      	beq.n	800419a <ai_platform_api_get_network_report+0xf6>
 8004112:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8004116:	b100      	cbz	r0, 800411a <ai_platform_api_get_network_report+0x76>
 8004118:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800411a:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800411e:	f7ff fe3a 	bl	8003d96 <_ai_platform_get_io_buffers_info>
 8004122:	4605      	mov	r5, r0
 8004124:	8630      	strh	r0, [r6, #48]	; 0x30
 8004126:	2800      	cmp	r0, #0
 8004128:	d05e      	beq.n	80041e8 <ai_platform_api_get_network_report+0x144>
 800412a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800412e:	2b01      	cmp	r3, #1
 8004130:	bf8a      	itet	hi
 8004132:	6ce0      	ldrhi	r0, [r4, #76]	; 0x4c
 8004134:	2000      	movls	r0, #0
 8004136:	300c      	addhi	r0, #12
 8004138:	f106 0138 	add.w	r1, r6, #56	; 0x38
 800413c:	f7ff fe2b 	bl	8003d96 <_ai_platform_get_io_buffers_info>
 8004140:	4605      	mov	r5, r0
 8004142:	8670      	strh	r0, [r6, #50]	; 0x32
 8004144:	2800      	cmp	r0, #0
 8004146:	d047      	beq.n	80041d8 <ai_platform_api_get_network_report+0x134>
 8004148:	6863      	ldr	r3, [r4, #4]
 800414a:	6733      	str	r3, [r6, #112]	; 0x70
 800414c:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8004150:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004152:	f106 053c 	add.w	r5, r6, #60	; 0x3c
 8004156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004158:	e897 0003 	ldmia.w	r7, {r0, r1}
 800415c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004160:	3418      	adds	r4, #24
 8004162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004164:	f106 0554 	add.w	r5, r6, #84	; 0x54
 8004168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800416a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800416e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004172:	4a3b      	ldr	r2, [pc, #236]	; (8004260 <ai_platform_api_get_network_report+0x1bc>)
 8004174:	493b      	ldr	r1, [pc, #236]	; (8004264 <ai_platform_api_get_network_report+0x1c0>)
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	2001      	movs	r0, #1
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	460a      	mov	r2, r1
 8004182:	6008      	str	r0, [r1, #0]
 8004184:	6813      	ldr	r3, [r2, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1fc      	bne.n	8004184 <ai_platform_api_get_network_report+0xe0>
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <ai_platform_api_get_network_report+0x1c4>)
 800418c:	4937      	ldr	r1, [pc, #220]	; (800426c <ai_platform_api_get_network_report+0x1c8>)
 800418e:	6019      	str	r1, [r3, #0]
 8004190:	6819      	ldr	r1, [r3, #0]
 8004192:	4b37      	ldr	r3, [pc, #220]	; (8004270 <ai_platform_api_get_network_report+0x1cc>)
 8004194:	4299      	cmp	r1, r3
 8004196:	d00a      	beq.n	80041ae <ai_platform_api_get_network_report+0x10a>
 8004198:	e7fe      	b.n	8004198 <ai_platform_api_get_network_report+0xf4>
 800419a:	f104 0010 	add.w	r0, r4, #16
 800419e:	2218      	movs	r2, #24
 80041a0:	2111      	movs	r1, #17
 80041a2:	f000 fb99 	bl	80048d8 <core_set_error>
 80041a6:	2000      	movs	r0, #0
 80041a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041aa:	4630      	mov	r0, r6
 80041ac:	e7fc      	b.n	80041a8 <ai_platform_api_get_network_report+0x104>
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <ai_platform_api_get_network_report+0x1d0>)
 80041b0:	482b      	ldr	r0, [pc, #172]	; (8004260 <ai_platform_api_get_network_report+0x1bc>)
 80041b2:	6133      	str	r3, [r6, #16]
 80041b4:	6803      	ldr	r3, [r0, #0]
 80041b6:	492b      	ldr	r1, [pc, #172]	; (8004264 <ai_platform_api_get_network_report+0x1c0>)
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	2401      	movs	r4, #1
 80041be:	6003      	str	r3, [r0, #0]
 80041c0:	6014      	str	r4, [r2, #0]
 80041c2:	680b      	ldr	r3, [r1, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1fc      	bne.n	80041c2 <ai_platform_api_get_network_report+0x11e>
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <ai_platform_api_get_network_report+0x1c4>)
 80041ca:	4a28      	ldr	r2, [pc, #160]	; (800426c <ai_platform_api_get_network_report+0x1c8>)
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <ai_platform_api_get_network_report+0x1cc>)
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d010      	beq.n	80041f8 <ai_platform_api_get_network_report+0x154>
 80041d6:	e7fe      	b.n	80041d6 <ai_platform_api_get_network_report+0x132>
 80041d8:	f104 0010 	add.w	r0, r4, #16
 80041dc:	2218      	movs	r2, #24
 80041de:	2113      	movs	r1, #19
 80041e0:	f000 fb7a 	bl	80048d8 <core_set_error>
 80041e4:	4628      	mov	r0, r5
 80041e6:	e7df      	b.n	80041a8 <ai_platform_api_get_network_report+0x104>
 80041e8:	f104 0010 	add.w	r0, r4, #16
 80041ec:	2218      	movs	r2, #24
 80041ee:	2112      	movs	r1, #18
 80041f0:	f000 fb72 	bl	80048d8 <core_set_error>
 80041f4:	4628      	mov	r0, r5
 80041f6:	e7d7      	b.n	80041a8 <ai_platform_api_get_network_report+0x104>
 80041f8:	f240 2305 	movw	r3, #517	; 0x205
 80041fc:	4818      	ldr	r0, [pc, #96]	; (8004260 <ai_platform_api_get_network_report+0x1bc>)
 80041fe:	6173      	str	r3, [r6, #20]
 8004200:	6803      	ldr	r3, [r0, #0]
 8004202:	4a18      	ldr	r2, [pc, #96]	; (8004264 <ai_platform_api_get_network_report+0x1c0>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	2401      	movs	r4, #1
 800420a:	6003      	str	r3, [r0, #0]
 800420c:	600c      	str	r4, [r1, #0]
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1fc      	bne.n	800420e <ai_platform_api_get_network_report+0x16a>
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <ai_platform_api_get_network_report+0x1c4>)
 8004216:	4915      	ldr	r1, [pc, #84]	; (800426c <ai_platform_api_get_network_report+0x1c8>)
 8004218:	6019      	str	r1, [r3, #0]
 800421a:	6819      	ldr	r1, [r3, #0]
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <ai_platform_api_get_network_report+0x1cc>)
 800421e:	4299      	cmp	r1, r3
 8004220:	d000      	beq.n	8004224 <ai_platform_api_get_network_report+0x180>
 8004222:	e7fe      	b.n	8004222 <ai_platform_api_get_network_report+0x17e>
 8004224:	f240 1301 	movw	r3, #257	; 0x101
 8004228:	490d      	ldr	r1, [pc, #52]	; (8004260 <ai_platform_api_get_network_report+0x1bc>)
 800422a:	6273      	str	r3, [r6, #36]	; 0x24
 800422c:	680b      	ldr	r3, [r1, #0]
 800422e:	4c0d      	ldr	r4, [pc, #52]	; (8004264 <ai_platform_api_get_network_report+0x1c0>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	2001      	movs	r0, #1
 8004236:	600b      	str	r3, [r1, #0]
 8004238:	6010      	str	r0, [r2, #0]
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1fc      	bne.n	800423a <ai_platform_api_get_network_report+0x196>
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <ai_platform_api_get_network_report+0x1c4>)
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <ai_platform_api_get_network_report+0x1c8>)
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <ai_platform_api_get_network_report+0x1cc>)
 800424a:	429a      	cmp	r2, r3
 800424c:	d000      	beq.n	8004250 <ai_platform_api_get_network_report+0x1ac>
 800424e:	e7fe      	b.n	800424e <ai_platform_api_get_network_report+0x1aa>
 8004250:	f240 4301 	movw	r3, #1025	; 0x401
 8004254:	62b3      	str	r3, [r6, #40]	; 0x28
 8004256:	2001      	movs	r0, #1
 8004258:	e7a6      	b.n	80041a8 <ai_platform_api_get_network_report+0x104>
 800425a:	bf00      	nop
 800425c:	a1c00100 	.word	0xa1c00100
 8004260:	e0002000 	.word	0xe0002000
 8004264:	40023008 	.word	0x40023008
 8004268:	40023000 	.word	0x40023000
 800426c:	f407a5c2 	.word	0xf407a5c2
 8004270:	b5e8b5cd 	.word	0xb5e8b5cd
 8004274:	08062928 	.word	0x08062928

08004278 <ai_platform_network_create>:
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4e23      	ldr	r6, [pc, #140]	; (800430c <ai_platform_network_create+0x94>)
 800427e:	4924      	ldr	r1, [pc, #144]	; (8004310 <ai_platform_network_create+0x98>)
 8004280:	6835      	ldr	r5, [r6, #0]
 8004282:	b082      	sub	sp, #8
 8004284:	f025 0501 	bic.w	r5, r5, #1
 8004288:	f89d 7020 	ldrb.w	r7, [sp, #32]
 800428c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004290:	6035      	str	r5, [r6, #0]
 8004292:	2501      	movs	r5, #1
 8004294:	600d      	str	r5, [r1, #0]
 8004296:	680d      	ldr	r5, [r1, #0]
 8004298:	2d00      	cmp	r5, #0
 800429a:	d1fc      	bne.n	8004296 <ai_platform_network_create+0x1e>
 800429c:	491d      	ldr	r1, [pc, #116]	; (8004314 <ai_platform_network_create+0x9c>)
 800429e:	4e1e      	ldr	r6, [pc, #120]	; (8004318 <ai_platform_network_create+0xa0>)
 80042a0:	600e      	str	r6, [r1, #0]
 80042a2:	680e      	ldr	r6, [r1, #0]
 80042a4:	491d      	ldr	r1, [pc, #116]	; (800431c <ai_platform_network_create+0xa4>)
 80042a6:	428e      	cmp	r6, r1
 80042a8:	d000      	beq.n	80042ac <ai_platform_network_create+0x34>
 80042aa:	e7fe      	b.n	80042aa <ai_platform_network_create+0x32>
 80042ac:	b1d0      	cbz	r0, 80042e4 <ai_platform_network_create+0x6c>
 80042ae:	4698      	mov	r8, r3
 80042b0:	4613      	mov	r3, r2
 80042b2:	4a1b      	ldr	r2, [pc, #108]	; (8004320 <ai_platform_network_create+0xa8>)
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	6003      	str	r3, [r0, #0]
 80042b8:	4606      	mov	r6, r0
 80042ba:	f000 fb05 	bl	80048c8 <core_init>
 80042be:	b1b0      	cbz	r0, 80042ee <ai_platform_network_create+0x76>
 80042c0:	0223      	lsls	r3, r4, #8
 80042c2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80042c6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80042ca:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80042ce:	d910      	bls.n	80042f2 <ai_platform_network_create+0x7a>
 80042d0:	2201      	movs	r2, #1
 80042d2:	2300      	movs	r3, #0
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	2310      	movs	r3, #16
 80042d8:	2000      	movs	r0, #0
 80042da:	f362 0007 	bfi	r0, r2, #0, #8
 80042de:	f363 201f 	bfi	r0, r3, #8, #24
 80042e2:	e001      	b.n	80042e8 <ai_platform_network_create+0x70>
 80042e4:	f241 0010 	movw	r0, #4112	; 0x1010
 80042e8:	b002      	add	sp, #8
 80042ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ee:	2230      	movs	r2, #48	; 0x30
 80042f0:	e7ef      	b.n	80042d2 <ai_platform_network_create+0x5a>
 80042f2:	a802      	add	r0, sp, #8
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <ai_platform_network_create+0xac>)
 80042f6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80042fa:	f000 ffb9 	bl	8005270 <ai_check_custom_types>
 80042fe:	b110      	cbz	r0, 8004306 <ai_platform_network_create+0x8e>
 8004300:	462b      	mov	r3, r5
 8004302:	462a      	mov	r2, r5
 8004304:	e7e8      	b.n	80042d8 <ai_platform_network_create+0x60>
 8004306:	2202      	movs	r2, #2
 8004308:	e7e3      	b.n	80042d2 <ai_platform_network_create+0x5a>
 800430a:	bf00      	nop
 800430c:	e0002000 	.word	0xe0002000
 8004310:	40023008 	.word	0x40023008
 8004314:	40023000 	.word	0x40023000
 8004318:	f407a5c2 	.word	0xf407a5c2
 800431c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004320:	a1c00100 	.word	0xa1c00100
 8004324:	84048403 	.word	0x84048403

08004328 <ai_platform_network_init>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	460c      	mov	r4, r1
 800432c:	4605      	mov	r5, r0
 800432e:	b120      	cbz	r0, 800433a <ai_platform_network_init+0x12>
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <ai_platform_network_init+0xe4>)
 8004332:	6802      	ldr	r2, [r0, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	bf18      	it	ne
 8004338:	2500      	movne	r5, #0
 800433a:	4935      	ldr	r1, [pc, #212]	; (8004410 <ai_platform_network_init+0xe8>)
 800433c:	4a35      	ldr	r2, [pc, #212]	; (8004414 <ai_platform_network_init+0xec>)
 800433e:	680b      	ldr	r3, [r1, #0]
 8004340:	2001      	movs	r0, #1
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	600b      	str	r3, [r1, #0]
 8004348:	4613      	mov	r3, r2
 800434a:	6010      	str	r0, [r2, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2a00      	cmp	r2, #0
 8004350:	d1fc      	bne.n	800434c <ai_platform_network_init+0x24>
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <ai_platform_network_init+0xf0>)
 8004354:	4a31      	ldr	r2, [pc, #196]	; (800441c <ai_platform_network_init+0xf4>)
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b31      	ldr	r3, [pc, #196]	; (8004420 <ai_platform_network_init+0xf8>)
 800435c:	429a      	cmp	r2, r3
 800435e:	d000      	beq.n	8004362 <ai_platform_network_init+0x3a>
 8004360:	e7fe      	b.n	8004360 <ai_platform_network_init+0x38>
 8004362:	b33d      	cbz	r5, 80043b4 <ai_platform_network_init+0x8c>
 8004364:	b344      	cbz	r4, 80043b8 <ai_platform_network_init+0x90>
 8004366:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004368:	6926      	ldr	r6, [r4, #16]
 800436a:	2f00      	cmp	r7, #0
 800436c:	d03d      	beq.n	80043ea <ai_platform_network_init+0xc2>
 800436e:	b35e      	cbz	r6, 80043c8 <ai_platform_network_init+0xa0>
 8004370:	4627      	mov	r7, r4
 8004372:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004374:	f105 0618 	add.w	r6, r5, #24
 8004378:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800437a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800437e:	e886 0003 	stmia.w	r6, {r0, r1}
 8004382:	3418      	adds	r4, #24
 8004384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004386:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800438a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800438c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004390:	e886 0003 	stmia.w	r6, {r0, r1}
 8004394:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004396:	2303      	movs	r3, #3
 8004398:	60eb      	str	r3, [r5, #12]
 800439a:	b15a      	cbz	r2, 80043b4 <ai_platform_network_init+0x8c>
 800439c:	68d3      	ldr	r3, [r2, #12]
 800439e:	6095      	str	r5, [r2, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d007      	beq.n	80043b4 <ai_platform_network_init+0x8c>
 80043a4:	b133      	cbz	r3, 80043b4 <ai_platform_network_init+0x8c>
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	609d      	str	r5, [r3, #8]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d002      	beq.n	80043b4 <ai_platform_network_init+0x8c>
 80043ae:	4613      	mov	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1f8      	bne.n	80043a6 <ai_platform_network_init+0x7e>
 80043b4:	4628      	mov	r0, r5
 80043b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043b8:	f105 0010 	add.w	r0, r5, #16
 80043bc:	2211      	movs	r2, #17
 80043be:	2110      	movs	r1, #16
 80043c0:	f000 fa8a 	bl	80048d8 <core_set_error>
 80043c4:	4625      	mov	r5, r4
 80043c6:	e7f5      	b.n	80043b4 <ai_platform_network_init+0x8c>
 80043c8:	8921      	ldrh	r1, [r4, #8]
 80043ca:	88e2      	ldrh	r2, [r4, #6]
 80043cc:	68e3      	ldr	r3, [r4, #12]
 80043ce:	fb02 f201 	mul.w	r2, r2, r1
 80043d2:	fb03 f302 	mul.w	r3, r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d0ca      	beq.n	8004370 <ai_platform_network_init+0x48>
 80043da:	f105 0010 	add.w	r0, r5, #16
 80043de:	2212      	movs	r2, #18
 80043e0:	2110      	movs	r1, #16
 80043e2:	f000 fa79 	bl	80048d8 <core_set_error>
 80043e6:	4635      	mov	r5, r6
 80043e8:	e7e4      	b.n	80043b4 <ai_platform_network_init+0x8c>
 80043ea:	8c21      	ldrh	r1, [r4, #32]
 80043ec:	8be2      	ldrh	r2, [r4, #30]
 80043ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043f0:	fb02 f201 	mul.w	r2, r2, r1
 80043f4:	fb03 f302 	mul.w	r3, r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0b8      	beq.n	800436e <ai_platform_network_init+0x46>
 80043fc:	f105 0010 	add.w	r0, r5, #16
 8004400:	2213      	movs	r2, #19
 8004402:	2110      	movs	r1, #16
 8004404:	f000 fa68 	bl	80048d8 <core_set_error>
 8004408:	463d      	mov	r5, r7
 800440a:	e7d3      	b.n	80043b4 <ai_platform_network_init+0x8c>
 800440c:	a1c00100 	.word	0xa1c00100
 8004410:	e0002000 	.word	0xe0002000
 8004414:	40023008 	.word	0x40023008
 8004418:	40023000 	.word	0x40023000
 800441c:	f407a5c2 	.word	0xf407a5c2
 8004420:	b5e8b5cd 	.word	0xb5e8b5cd

08004424 <ai_platform_network_post_init>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4604      	mov	r4, r0
 8004428:	b120      	cbz	r0, 8004434 <ai_platform_network_post_init+0x10>
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <ai_platform_network_post_init+0x78>)
 800442c:	6802      	ldr	r2, [r0, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf18      	it	ne
 8004432:	2400      	movne	r4, #0
 8004434:	491a      	ldr	r1, [pc, #104]	; (80044a0 <ai_platform_network_post_init+0x7c>)
 8004436:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <ai_platform_network_post_init+0x80>)
 8004438:	680b      	ldr	r3, [r1, #0]
 800443a:	2001      	movs	r0, #1
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	600b      	str	r3, [r1, #0]
 8004442:	4613      	mov	r3, r2
 8004444:	6010      	str	r0, [r2, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2a00      	cmp	r2, #0
 800444a:	d1fc      	bne.n	8004446 <ai_platform_network_post_init+0x22>
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <ai_platform_network_post_init+0x84>)
 800444e:	4a17      	ldr	r2, [pc, #92]	; (80044ac <ai_platform_network_post_init+0x88>)
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <ai_platform_network_post_init+0x8c>)
 8004456:	429a      	cmp	r2, r3
 8004458:	d000      	beq.n	800445c <ai_platform_network_post_init+0x38>
 800445a:	e7fe      	b.n	800445a <ai_platform_network_post_init+0x36>
 800445c:	b1a4      	cbz	r4, 8004488 <ai_platform_network_post_init+0x64>
 800445e:	68e3      	ldr	r3, [r4, #12]
 8004460:	f013 0502 	ands.w	r5, r3, #2
 8004464:	d012      	beq.n	800448c <ai_platform_network_post_init+0x68>
 8004466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004468:	b163      	cbz	r3, 8004484 <ai_platform_network_post_init+0x60>
 800446a:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800446c:	b91d      	cbnz	r5, 8004476 <ai_platform_network_post_init+0x52>
 800446e:	e009      	b.n	8004484 <ai_platform_network_post_init+0x60>
 8004470:	461d      	mov	r5, r3
 8004472:	b13b      	cbz	r3, 8004484 <ai_platform_network_post_init+0x60>
 8004474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004476:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004478:	4629      	mov	r1, r5
 800447a:	2000      	movs	r0, #0
 800447c:	4798      	blx	r3
 800447e:	68eb      	ldr	r3, [r5, #12]
 8004480:	42ab      	cmp	r3, r5
 8004482:	d1f5      	bne.n	8004470 <ai_platform_network_post_init+0x4c>
 8004484:	2001      	movs	r0, #1
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	4620      	mov	r0, r4
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	f104 0010 	add.w	r0, r4, #16
 8004490:	2210      	movs	r2, #16
 8004492:	2111      	movs	r1, #17
 8004494:	f000 fa20 	bl	80048d8 <core_set_error>
 8004498:	4628      	mov	r0, r5
 800449a:	bd38      	pop	{r3, r4, r5, pc}
 800449c:	a1c00100 	.word	0xa1c00100
 80044a0:	e0002000 	.word	0xe0002000
 80044a4:	40023008 	.word	0x40023008
 80044a8:	40023000 	.word	0x40023000
 80044ac:	f407a5c2 	.word	0xf407a5c2
 80044b0:	b5e8b5cd 	.word	0xb5e8b5cd

080044b4 <ai_platform_network_process>:
 80044b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b8:	b083      	sub	sp, #12
 80044ba:	4604      	mov	r4, r0
 80044bc:	9201      	str	r2, [sp, #4]
 80044be:	b120      	cbz	r0, 80044ca <ai_platform_network_process+0x16>
 80044c0:	4ba5      	ldr	r3, [pc, #660]	; (8004758 <ai_platform_network_process+0x2a4>)
 80044c2:	6802      	ldr	r2, [r0, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	bf18      	it	ne
 80044c8:	2400      	movne	r4, #0
 80044ca:	48a4      	ldr	r0, [pc, #656]	; (800475c <ai_platform_network_process+0x2a8>)
 80044cc:	4ba4      	ldr	r3, [pc, #656]	; (8004760 <ai_platform_network_process+0x2ac>)
 80044ce:	6802      	ldr	r2, [r0, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	6002      	str	r2, [r0, #0]
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	2a00      	cmp	r2, #0
 80044de:	d1fc      	bne.n	80044da <ai_platform_network_process+0x26>
 80044e0:	4ba0      	ldr	r3, [pc, #640]	; (8004764 <ai_platform_network_process+0x2b0>)
 80044e2:	4aa1      	ldr	r2, [pc, #644]	; (8004768 <ai_platform_network_process+0x2b4>)
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4ba0      	ldr	r3, [pc, #640]	; (800476c <ai_platform_network_process+0x2b8>)
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d000      	beq.n	80044f0 <ai_platform_network_process+0x3c>
 80044ee:	e7fe      	b.n	80044ee <ai_platform_network_process+0x3a>
 80044f0:	2c00      	cmp	r4, #0
 80044f2:	d066      	beq.n	80045c2 <ai_platform_network_process+0x10e>
 80044f4:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80044f8:	b107      	cbz	r7, 80044fc <ai_platform_network_process+0x48>
 80044fa:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80044fc:	68e3      	ldr	r3, [r4, #12]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2600      	movs	r6, #0
 8004504:	2b03      	cmp	r3, #3
 8004506:	6166      	str	r6, [r4, #20]
 8004508:	f040 80fe 	bne.w	8004708 <ai_platform_network_process+0x254>
 800450c:	2900      	cmp	r1, #0
 800450e:	d07f      	beq.n	8004610 <ai_platform_network_process+0x15c>
 8004510:	2f00      	cmp	r7, #0
 8004512:	d07d      	beq.n	8004610 <ai_platform_network_process+0x15c>
 8004514:	883b      	ldrh	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d07a      	beq.n	8004610 <ai_platform_network_process+0x15c>
 800451a:	460d      	mov	r5, r1
 800451c:	46a0      	mov	r8, r4
 800451e:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8004522:	429e      	cmp	r6, r3
 8004524:	d27d      	bcs.n	8004622 <ai_platform_network_process+0x16e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d07a      	beq.n	8004622 <ai_platform_network_process+0x16e>
 800452c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004530:	2c00      	cmp	r4, #0
 8004532:	d076      	beq.n	8004622 <ai_platform_network_process+0x16e>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 800453c:	d067      	beq.n	800460e <ai_platform_network_process+0x15a>
 800453e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8004542:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004546:	69a0      	ldr	r0, [r4, #24]
 8004548:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800454c:	6841      	ldr	r1, [r0, #4]
 800454e:	fb0b f30e 	mul.w	r3, fp, lr
 8004552:	fb0c f303 	mul.w	r3, ip, r3
 8004556:	4299      	cmp	r1, r3
 8004558:	d350      	bcc.n	80045fc <ai_platform_network_process+0x148>
 800455a:	68e3      	ldr	r3, [r4, #12]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	455a      	cmp	r2, fp
 8004560:	d14c      	bne.n	80045fc <ai_platform_network_process+0x148>
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	4572      	cmp	r2, lr
 8004566:	d149      	bne.n	80045fc <ai_platform_network_process+0x148>
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	459c      	cmp	ip, r3
 800456c:	d146      	bne.n	80045fc <ai_platform_network_process+0x148>
 800456e:	6800      	ldr	r0, [r0, #0]
 8004570:	f000 ff2e 	bl	80053d0 <ai_array_get_byte_size>
 8004574:	68e2      	ldr	r2, [r4, #12]
 8004576:	6963      	ldr	r3, [r4, #20]
 8004578:	68d2      	ldr	r2, [r2, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	fb03 f302 	mul.w	r3, r3, r2
 8004580:	4298      	cmp	r0, r3
 8004582:	d33b      	bcc.n	80045fc <ai_platform_network_process+0x148>
 8004584:	69a3      	ldr	r3, [r4, #24]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	f000 fed6 	bl	8005338 <ai_array_to_buffer_fmt>
 800458c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8004590:	4043      	eors	r3, r0
 8004592:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004596:	d128      	bne.n	80045ea <ai_platform_network_process+0x136>
 8004598:	68eb      	ldr	r3, [r5, #12]
 800459a:	b1f3      	cbz	r3, 80045da <ai_platform_network_process+0x126>
 800459c:	f8b5 b000 	ldrh.w	fp, [r5]
 80045a0:	f1bb 0f00 	cmp.w	fp, #0
 80045a4:	d012      	beq.n	80045cc <ai_platform_network_process+0x118>
 80045a6:	4623      	mov	r3, r4
 80045a8:	f105 020c 	add.w	r2, r5, #12
 80045ac:	4629      	mov	r1, r5
 80045ae:	4650      	mov	r0, sl
 80045b0:	f7ff fc3f 	bl	8003e32 <_platform_network_state_setup.isra.1>
 80045b4:	45d9      	cmp	r9, fp
 80045b6:	883b      	ldrh	r3, [r7, #0]
 80045b8:	bf38      	it	cc
 80045ba:	46d9      	movcc	r9, fp
 80045bc:	3601      	adds	r6, #1
 80045be:	3518      	adds	r5, #24
 80045c0:	e7af      	b.n	8004522 <ai_platform_network_process+0x6e>
 80045c2:	46a3      	mov	fp, r4
 80045c4:	4658      	mov	r0, fp
 80045c6:	b003      	add	sp, #12
 80045c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045cc:	f108 0010 	add.w	r0, r8, #16
 80045d0:	2221      	movs	r2, #33	; 0x21
 80045d2:	2112      	movs	r1, #18
 80045d4:	f000 f980 	bl	80048d8 <core_set_error>
 80045d8:	e7f4      	b.n	80045c4 <ai_platform_network_process+0x110>
 80045da:	f108 0010 	add.w	r0, r8, #16
 80045de:	2217      	movs	r2, #23
 80045e0:	2112      	movs	r1, #18
 80045e2:	469b      	mov	fp, r3
 80045e4:	f000 f978 	bl	80048d8 <core_set_error>
 80045e8:	e7ec      	b.n	80045c4 <ai_platform_network_process+0x110>
 80045ea:	f108 0010 	add.w	r0, r8, #16
 80045ee:	2219      	movs	r2, #25
 80045f0:	2112      	movs	r1, #18
 80045f2:	f000 f971 	bl	80048d8 <core_set_error>
 80045f6:	f04f 0b00 	mov.w	fp, #0
 80045fa:	e7e3      	b.n	80045c4 <ai_platform_network_process+0x110>
 80045fc:	f108 0010 	add.w	r0, r8, #16
 8004600:	2218      	movs	r2, #24
 8004602:	2112      	movs	r1, #18
 8004604:	f000 f968 	bl	80048d8 <core_set_error>
 8004608:	f04f 0b00 	mov.w	fp, #0
 800460c:	e7da      	b.n	80045c4 <ai_platform_network_process+0x110>
 800460e:	4644      	mov	r4, r8
 8004610:	f104 0010 	add.w	r0, r4, #16
 8004614:	2217      	movs	r2, #23
 8004616:	2112      	movs	r1, #18
 8004618:	f000 f95e 	bl	80048d8 <core_set_error>
 800461c:	f04f 0b00 	mov.w	fp, #0
 8004620:	e7d0      	b.n	80045c4 <ai_platform_network_process+0x110>
 8004622:	9a01      	ldr	r2, [sp, #4]
 8004624:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8004628:	4644      	mov	r4, r8
 800462a:	2a00      	cmp	r2, #0
 800462c:	f000 80a4 	beq.w	8004778 <ai_platform_network_process+0x2c4>
 8004630:	2b01      	cmp	r3, #1
 8004632:	f240 8140 	bls.w	80048b6 <ai_platform_network_process+0x402>
 8004636:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 800463a:	f118 0f0c 	cmn.w	r8, #12
 800463e:	f000 813a 	beq.w	80048b6 <ai_platform_network_process+0x402>
 8004642:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 8135 	beq.w	80048b6 <ai_platform_network_process+0x402>
 800464c:	3204      	adds	r2, #4
 800464e:	4615      	mov	r5, r2
 8004650:	2700      	movs	r7, #0
 8004652:	429f      	cmp	r7, r3
 8004654:	f080 808c 	bcs.w	8004770 <ai_platform_network_process+0x2bc>
 8004658:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8087 	beq.w	8004770 <ai_platform_network_process+0x2bc>
 8004662:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8004666:	2e00      	cmp	r6, #0
 8004668:	f000 8082 	beq.w	8004770 <ai_platform_network_process+0x2bc>
 800466c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8004676:	d067      	beq.n	8004748 <ai_platform_network_process+0x294>
 8004678:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800467c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8004680:	69b0      	ldr	r0, [r6, #24]
 8004682:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8004686:	6841      	ldr	r1, [r0, #4]
 8004688:	fb0b f30e 	mul.w	r3, fp, lr
 800468c:	fb0c f303 	mul.w	r3, ip, r3
 8004690:	4299      	cmp	r1, r3
 8004692:	f0c0 8110 	bcc.w	80048b6 <ai_platform_network_process+0x402>
 8004696:	68f3      	ldr	r3, [r6, #12]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	455a      	cmp	r2, fp
 800469c:	f040 810b 	bne.w	80048b6 <ai_platform_network_process+0x402>
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	4572      	cmp	r2, lr
 80046a4:	f040 8107 	bne.w	80048b6 <ai_platform_network_process+0x402>
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	459c      	cmp	ip, r3
 80046ac:	f040 8103 	bne.w	80048b6 <ai_platform_network_process+0x402>
 80046b0:	6800      	ldr	r0, [r0, #0]
 80046b2:	f000 fe8d 	bl	80053d0 <ai_array_get_byte_size>
 80046b6:	68f2      	ldr	r2, [r6, #12]
 80046b8:	6973      	ldr	r3, [r6, #20]
 80046ba:	68d2      	ldr	r2, [r2, #12]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	fb03 f302 	mul.w	r3, r3, r2
 80046c2:	4298      	cmp	r0, r3
 80046c4:	f0c0 80f7 	bcc.w	80048b6 <ai_platform_network_process+0x402>
 80046c8:	69b3      	ldr	r3, [r6, #24]
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	f000 fe34 	bl	8005338 <ai_array_to_buffer_fmt>
 80046d0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80046d4:	4043      	eors	r3, r0
 80046d6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80046da:	d12c      	bne.n	8004736 <ai_platform_network_process+0x282>
 80046dc:	68eb      	ldr	r3, [r5, #12]
 80046de:	b313      	cbz	r3, 8004726 <ai_platform_network_process+0x272>
 80046e0:	f8b5 b000 	ldrh.w	fp, [r5]
 80046e4:	f1bb 0f00 	cmp.w	fp, #0
 80046e8:	d016      	beq.n	8004718 <ai_platform_network_process+0x264>
 80046ea:	4633      	mov	r3, r6
 80046ec:	f105 020c 	add.w	r2, r5, #12
 80046f0:	4629      	mov	r1, r5
 80046f2:	4650      	mov	r0, sl
 80046f4:	f7ff fb9d 	bl	8003e32 <_platform_network_state_setup.isra.1>
 80046f8:	45d9      	cmp	r9, fp
 80046fa:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80046fe:	bf38      	it	cc
 8004700:	46d9      	movcc	r9, fp
 8004702:	3701      	adds	r7, #1
 8004704:	3518      	adds	r5, #24
 8004706:	e7a4      	b.n	8004652 <ai_platform_network_process+0x19e>
 8004708:	f104 0010 	add.w	r0, r4, #16
 800470c:	2230      	movs	r2, #48	; 0x30
 800470e:	2111      	movs	r1, #17
 8004710:	f000 f8e2 	bl	80048d8 <core_set_error>
 8004714:	46b3      	mov	fp, r6
 8004716:	e755      	b.n	80045c4 <ai_platform_network_process+0x110>
 8004718:	f104 0010 	add.w	r0, r4, #16
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	2113      	movs	r1, #19
 8004720:	f000 f8da 	bl	80048d8 <core_set_error>
 8004724:	e74e      	b.n	80045c4 <ai_platform_network_process+0x110>
 8004726:	f104 0010 	add.w	r0, r4, #16
 800472a:	2217      	movs	r2, #23
 800472c:	2113      	movs	r1, #19
 800472e:	469b      	mov	fp, r3
 8004730:	f000 f8d2 	bl	80048d8 <core_set_error>
 8004734:	e746      	b.n	80045c4 <ai_platform_network_process+0x110>
 8004736:	f104 0010 	add.w	r0, r4, #16
 800473a:	2219      	movs	r2, #25
 800473c:	2113      	movs	r1, #19
 800473e:	f000 f8cb 	bl	80048d8 <core_set_error>
 8004742:	f04f 0b00 	mov.w	fp, #0
 8004746:	e73d      	b.n	80045c4 <ai_platform_network_process+0x110>
 8004748:	f104 0010 	add.w	r0, r4, #16
 800474c:	2217      	movs	r2, #23
 800474e:	2113      	movs	r1, #19
 8004750:	f000 f8c2 	bl	80048d8 <core_set_error>
 8004754:	46d3      	mov	fp, sl
 8004756:	e735      	b.n	80045c4 <ai_platform_network_process+0x110>
 8004758:	a1c00100 	.word	0xa1c00100
 800475c:	e0002000 	.word	0xe0002000
 8004760:	40023008 	.word	0x40023008
 8004764:	40023000 	.word	0x40023000
 8004768:	f407a5c2 	.word	0xf407a5c2
 800476c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004770:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8004774:	f8a4 9014 	strh.w	r9, [r4, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8099 	beq.w	80048b0 <ai_platform_network_process+0x3fc>
 800477e:	2b01      	cmp	r3, #1
 8004780:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004782:	f240 8093 	bls.w	80048ac <ai_platform_network_process+0x3f8>
 8004786:	f105 070c 	add.w	r7, r5, #12
 800478a:	8ae0      	ldrh	r0, [r4, #22]
 800478c:	8aa3      	ldrh	r3, [r4, #20]
 800478e:	4283      	cmp	r3, r0
 8004790:	d977      	bls.n	8004882 <ai_platform_network_process+0x3ce>
 8004792:	46a3      	mov	fp, r4
 8004794:	2d00      	cmp	r5, #0
 8004796:	d032      	beq.n	80047fe <ai_platform_network_process+0x34a>
 8004798:	882b      	ldrh	r3, [r5, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d02f      	beq.n	80047fe <ai_platform_network_process+0x34a>
 800479e:	686b      	ldr	r3, [r5, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02c      	beq.n	80047fe <ai_platform_network_process+0x34a>
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f04f 0800 	mov.w	r8, #0
 80047aa:	b343      	cbz	r3, 80047fe <ai_platform_network_process+0x34a>
 80047ac:	68a9      	ldr	r1, [r5, #8]
 80047ae:	699a      	ldr	r2, [r3, #24]
 80047b0:	f8d1 a000 	ldr.w	sl, [r1]
 80047b4:	6814      	ldr	r4, [r2, #0]
 80047b6:	6890      	ldr	r0, [r2, #8]
 80047b8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80047bc:	eb0a 0609 	add.w	r6, sl, r9
 80047c0:	00a4      	lsls	r4, r4, #2
 80047c2:	6871      	ldr	r1, [r6, #4]
 80047c4:	d45f      	bmi.n	8004886 <ai_platform_network_process+0x3d2>
 80047c6:	68d4      	ldr	r4, [r2, #12]
 80047c8:	1b00      	subs	r0, r0, r4
 80047ca:	4401      	add	r1, r0
 80047cc:	6091      	str	r1, [r2, #8]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	6872      	ldr	r2, [r6, #4]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80047d8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80047dc:	440b      	add	r3, r1
 80047de:	4293      	cmp	r3, r2
 80047e0:	bf24      	itt	cs
 80047e2:	68f3      	ldrcs	r3, [r6, #12]
 80047e4:	1ad3      	subcs	r3, r2, r3
 80047e6:	6073      	str	r3, [r6, #4]
 80047e8:	882b      	ldrh	r3, [r5, #0]
 80047ea:	f108 0801 	add.w	r8, r8, #1
 80047ee:	4598      	cmp	r8, r3
 80047f0:	d205      	bcs.n	80047fe <ai_platform_network_process+0x34a>
 80047f2:	686b      	ldr	r3, [r5, #4]
 80047f4:	b11b      	cbz	r3, 80047fe <ai_platform_network_process+0x34a>
 80047f6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1d6      	bne.n	80047ac <ai_platform_network_process+0x2f8>
 80047fe:	4658      	mov	r0, fp
 8004800:	f000 fd60 	bl	80052c4 <ai_layers_forward_all>
 8004804:	2f00      	cmp	r7, #0
 8004806:	d032      	beq.n	800486e <ai_platform_network_process+0x3ba>
 8004808:	883b      	ldrh	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d02f      	beq.n	800486e <ai_platform_network_process+0x3ba>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	b36b      	cbz	r3, 800486e <ai_platform_network_process+0x3ba>
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	b358      	cbz	r0, 800486e <ai_platform_network_process+0x3ba>
 8004816:	f04f 0800 	mov.w	r8, #0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6981      	ldr	r1, [r0, #24]
 800481e:	f8d3 a000 	ldr.w	sl, [r3]
 8004822:	680c      	ldr	r4, [r1, #0]
 8004824:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8004828:	eb0a 0609 	add.w	r6, sl, r9
 800482c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8004830:	00a4      	lsls	r4, r4, #2
 8004832:	eb0c 0302 	add.w	r3, ip, r2
 8004836:	d42a      	bmi.n	800488e <ai_platform_network_process+0x3da>
 8004838:	f85a 2009 	ldr.w	r2, [sl, r9]
 800483c:	4293      	cmp	r3, r2
 800483e:	bf24      	itt	cs
 8004840:	68f3      	ldrcs	r3, [r6, #12]
 8004842:	1ad3      	subcs	r3, r2, r3
 8004844:	6073      	str	r3, [r6, #4]
 8004846:	6981      	ldr	r1, [r0, #24]
 8004848:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800484c:	1b12      	subs	r2, r2, r4
 800484e:	4413      	add	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
 8004852:	6983      	ldr	r3, [r0, #24]
 8004854:	6872      	ldr	r2, [r6, #4]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	883b      	ldrh	r3, [r7, #0]
 800485a:	f108 0801 	add.w	r8, r8, #1
 800485e:	4598      	cmp	r8, r3
 8004860:	d205      	bcs.n	800486e <ai_platform_network_process+0x3ba>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	b11b      	cbz	r3, 800486e <ai_platform_network_process+0x3ba>
 8004866:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800486a:	2800      	cmp	r0, #0
 800486c:	d1d5      	bne.n	800481a <ai_platform_network_process+0x366>
 800486e:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8004872:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8004876:	3001      	adds	r0, #1
 8004878:	b280      	uxth	r0, r0
 800487a:	4283      	cmp	r3, r0
 800487c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8004880:	d888      	bhi.n	8004794 <ai_platform_network_process+0x2e0>
 8004882:	4683      	mov	fp, r0
 8004884:	e69e      	b.n	80045c4 <ai_platform_network_process+0x110>
 8004886:	68b2      	ldr	r2, [r6, #8]
 8004888:	f000 fdf6 	bl	8005478 <memcpy>
 800488c:	e7a2      	b.n	80047d4 <ai_platform_network_process+0x320>
 800488e:	6889      	ldr	r1, [r1, #8]
 8004890:	4660      	mov	r0, ip
 8004892:	f000 fdf1 	bl	8005478 <memcpy>
 8004896:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800489a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800489e:	440b      	add	r3, r1
 80048a0:	4293      	cmp	r3, r2
 80048a2:	bf24      	itt	cs
 80048a4:	68f3      	ldrcs	r3, [r6, #12]
 80048a6:	1ad3      	subcs	r3, r2, r3
 80048a8:	6073      	str	r3, [r6, #4]
 80048aa:	e7d5      	b.n	8004858 <ai_platform_network_process+0x3a4>
 80048ac:	2700      	movs	r7, #0
 80048ae:	e76c      	b.n	800478a <ai_platform_network_process+0x2d6>
 80048b0:	461d      	mov	r5, r3
 80048b2:	461f      	mov	r7, r3
 80048b4:	e769      	b.n	800478a <ai_platform_network_process+0x2d6>
 80048b6:	f104 0010 	add.w	r0, r4, #16
 80048ba:	2218      	movs	r2, #24
 80048bc:	2113      	movs	r1, #19
 80048be:	f000 f80b 	bl	80048d8 <core_set_error>
 80048c2:	f04f 0b00 	mov.w	fp, #0
 80048c6:	e67d      	b.n	80045c4 <ai_platform_network_process+0x110>

080048c8 <core_init>:
 80048c8:	2001      	movs	r0, #1
 80048ca:	4770      	bx	lr

080048cc <core_get_error>:
 80048cc:	4603      	mov	r3, r0
 80048ce:	2200      	movs	r2, #0
 80048d0:	6800      	ldr	r0, [r0, #0]
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop

080048d8 <core_set_error>:
 80048d8:	7803      	ldrb	r3, [r0, #0]
 80048da:	b933      	cbnz	r3, 80048ea <core_set_error+0x12>
 80048dc:	7001      	strb	r1, [r0, #0]
 80048de:	6803      	ldr	r3, [r0, #0]
 80048e0:	f362 231f 	bfi	r3, r2, #8, #24
 80048e4:	6003      	str	r3, [r0, #0]
 80048e6:	2001      	movs	r0, #1
 80048e8:	4770      	bx	lr
 80048ea:	2000      	movs	r0, #0
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <ai_dict8_dot_array_f32>:
 80048f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80048f8:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80048fc:	f000 80c0 	beq.w	8004a80 <ai_dict8_dot_array_f32+0x190>
 8004900:	f101 0408 	add.w	r4, r1, #8
 8004904:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8004908:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004a88 <ai_dict8_dot_array_f32+0x198>
 800490c:	eb04 0e09 	add.w	lr, r4, r9
 8004910:	f103 0520 	add.w	r5, r3, #32
 8004914:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8004918:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800491c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8004920:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8004924:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8004928:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800492c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8004930:	ed55 3a04 	vldr	s7, [r5, #-16]
 8004934:	ed55 4a03 	vldr	s9, [r5, #-12]
 8004938:	ed55 5a02 	vldr	s11, [r5, #-8]
 800493c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8004940:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004944:	edd6 7a00 	vldr	s15, [r6]
 8004948:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800494c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004950:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004954:	ed9a 3a00 	vldr	s6, [sl]
 8004958:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800495c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8004960:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004964:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004968:	ed97 3a00 	vldr	s6, [r7]
 800496c:	ed96 5a00 	vldr	s10, [r6]
 8004970:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8004974:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8004978:	eee3 7a04 	vfma.f32	s15, s6, s8
 800497c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004980:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004984:	ed9a 3a00 	vldr	s6, [sl]
 8004988:	ed96 4a00 	vldr	s8, [r6]
 800498c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8004990:	eee5 7a06 	vfma.f32	s15, s10, s12
 8004994:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8004998:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800499c:	ed97 5a00 	vldr	s10, [r7]
 80049a0:	ed96 6a00 	vldr	s12, [r6]
 80049a4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80049a8:	3408      	adds	r4, #8
 80049aa:	45a6      	cmp	lr, r4
 80049ac:	f105 0520 	add.w	r5, r5, #32
 80049b0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80049b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80049b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80049bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049c0:	d1a8      	bne.n	8004914 <ai_dict8_dot_array_f32+0x24>
 80049c2:	4449      	add	r1, r9
 80049c4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80049c8:	f01c 0c07 	ands.w	ip, ip, #7
 80049cc:	d050      	beq.n	8004a70 <ai_dict8_dot_array_f32+0x180>
 80049ce:	780c      	ldrb	r4, [r1, #0]
 80049d0:	edd3 6a00 	vldr	s13, [r3]
 80049d4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80049d8:	edd4 7a00 	vldr	s15, [r4]
 80049dc:	f1bc 0f01 	cmp.w	ip, #1
 80049e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80049e4:	d044      	beq.n	8004a70 <ai_dict8_dot_array_f32+0x180>
 80049e6:	784c      	ldrb	r4, [r1, #1]
 80049e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80049ec:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80049f0:	edd4 7a00 	vldr	s15, [r4]
 80049f4:	f1bc 0f02 	cmp.w	ip, #2
 80049f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80049fc:	d038      	beq.n	8004a70 <ai_dict8_dot_array_f32+0x180>
 80049fe:	788c      	ldrb	r4, [r1, #2]
 8004a00:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a04:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a08:	edd4 7a00 	vldr	s15, [r4]
 8004a0c:	f1bc 0f03 	cmp.w	ip, #3
 8004a10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a14:	d02c      	beq.n	8004a70 <ai_dict8_dot_array_f32+0x180>
 8004a16:	78cc      	ldrb	r4, [r1, #3]
 8004a18:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a1c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a20:	edd4 7a00 	vldr	s15, [r4]
 8004a24:	f1bc 0f04 	cmp.w	ip, #4
 8004a28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a2c:	d020      	beq.n	8004a70 <ai_dict8_dot_array_f32+0x180>
 8004a2e:	790c      	ldrb	r4, [r1, #4]
 8004a30:	edd3 6a04 	vldr	s13, [r3, #16]
 8004a34:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a38:	edd4 7a00 	vldr	s15, [r4]
 8004a3c:	f1bc 0f05 	cmp.w	ip, #5
 8004a40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a44:	d014      	beq.n	8004a70 <ai_dict8_dot_array_f32+0x180>
 8004a46:	794c      	ldrb	r4, [r1, #5]
 8004a48:	edd3 6a05 	vldr	s13, [r3, #20]
 8004a4c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004a50:	edd4 7a00 	vldr	s15, [r4]
 8004a54:	f1bc 0f06 	cmp.w	ip, #6
 8004a58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a5c:	d008      	beq.n	8004a70 <ai_dict8_dot_array_f32+0x180>
 8004a5e:	7989      	ldrb	r1, [r1, #6]
 8004a60:	edd3 7a06 	vldr	s15, [r3, #24]
 8004a64:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004a68:	edd2 6a00 	vldr	s13, [r2]
 8004a6c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004a70:	edd0 7a00 	vldr	s15, [r0]
 8004a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a78:	ed80 7a00 	vstr	s14, [r0]
 8004a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a80:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004a88 <ai_dict8_dot_array_f32+0x198>
 8004a84:	e7a0      	b.n	80049c8 <ai_dict8_dot_array_f32+0xd8>
 8004a86:	bf00      	nop
 8004a88:	00000000 	.word	0x00000000

08004a8c <ai_dict4_dot_array_f32>:
 8004a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a90:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004a92:	f027 0c01 	bic.w	ip, r7, #1
 8004a96:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8004a9a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8004a9e:	f000 80ae 	beq.w	8004bfe <ai_dict4_dot_array_f32+0x172>
 8004aa2:	1d0d      	adds	r5, r1, #4
 8004aa4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8004aa8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004c04 <ai_dict4_dot_array_f32+0x178>
 8004aac:	eb05 0e09 	add.w	lr, r5, r9
 8004ab0:	f103 0420 	add.w	r4, r3, #32
 8004ab4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8004ab8:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8004abc:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8004ac0:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8004ac4:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8004ac8:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8004acc:	ed14 5a04 	vldr	s10, [r4, #-16]
 8004ad0:	ed54 5a03 	vldr	s11, [r4, #-12]
 8004ad4:	ed14 6a02 	vldr	s12, [r4, #-8]
 8004ad8:	ed54 6a01 	vldr	s13, [r4, #-4]
 8004adc:	f006 0a0f 	and.w	sl, r6, #15
 8004ae0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004ae4:	edda 7a00 	vldr	s15, [sl]
 8004ae8:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8004aec:	0936      	lsrs	r6, r6, #4
 8004aee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004af2:	ee67 7a83 	vmul.f32	s15, s15, s6
 8004af6:	ed96 3a00 	vldr	s6, [r6]
 8004afa:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8004afe:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004b02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b06:	f00b 0b0f 	and.w	fp, fp, #15
 8004b0a:	edd6 3a00 	vldr	s7, [r6]
 8004b0e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8004b12:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004b16:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004b1a:	3504      	adds	r5, #4
 8004b1c:	ed9b 4a00 	vldr	s8, [fp]
 8004b20:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8004b24:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004b28:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8004b2c:	f00a 0a0f 	and.w	sl, sl, #15
 8004b30:	eddb 4a00 	vldr	s9, [fp]
 8004b34:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004b38:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004b3c:	45ae      	cmp	lr, r5
 8004b3e:	ed9a 5a00 	vldr	s10, [sl]
 8004b42:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8004b46:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004b4a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8004b4e:	f006 060f 	and.w	r6, r6, #15
 8004b52:	edda 5a00 	vldr	s11, [sl]
 8004b56:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004b5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004b5e:	f104 0420 	add.w	r4, r4, #32
 8004b62:	ed96 6a00 	vldr	s12, [r6]
 8004b66:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b6e:	d1a1      	bne.n	8004ab4 <ai_dict4_dot_array_f32+0x28>
 8004b70:	4449      	add	r1, r9
 8004b72:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8004b76:	459c      	cmp	ip, r3
 8004b78:	d92d      	bls.n	8004bd6 <ai_dict4_dot_array_f32+0x14a>
 8004b7a:	f10c 0c07 	add.w	ip, ip, #7
 8004b7e:	f103 0508 	add.w	r5, r3, #8
 8004b82:	ebac 0c05 	sub.w	ip, ip, r5
 8004b86:	f02c 0407 	bic.w	r4, ip, #7
 8004b8a:	f103 0810 	add.w	r8, r3, #16
 8004b8e:	44a0      	add	r8, r4
 8004b90:	f101 3eff 	add.w	lr, r1, #4294967295
 8004b94:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8004b98:	ed15 6a01 	vldr	s12, [r5, #-4]
 8004b9c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004ba0:	f004 060f 	and.w	r6, r4, #15
 8004ba4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8004ba8:	0924      	lsrs	r4, r4, #4
 8004baa:	edd6 7a00 	vldr	s15, [r6]
 8004bae:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004bb2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004bb6:	ed94 6a00 	vldr	s12, [r4]
 8004bba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004bbe:	3508      	adds	r5, #8
 8004bc0:	45a8      	cmp	r8, r5
 8004bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bc6:	d1e5      	bne.n	8004b94 <ai_dict4_dot_array_f32+0x108>
 8004bc8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8004bcc:	f10c 0c01 	add.w	ip, ip, #1
 8004bd0:	4461      	add	r1, ip
 8004bd2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8004bd6:	07fc      	lsls	r4, r7, #31
 8004bd8:	d509      	bpl.n	8004bee <ai_dict4_dot_array_f32+0x162>
 8004bda:	7809      	ldrb	r1, [r1, #0]
 8004bdc:	edd3 7a00 	vldr	s15, [r3]
 8004be0:	090b      	lsrs	r3, r1, #4
 8004be2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004be6:	edd2 6a00 	vldr	s13, [r2]
 8004bea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004bee:	edd0 7a00 	vldr	s15, [r0]
 8004bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf6:	ed80 7a00 	vstr	s14, [r0]
 8004bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfe:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8004c04 <ai_dict4_dot_array_f32+0x178>
 8004c02:	e7b8      	b.n	8004b76 <ai_dict4_dot_array_f32+0xea>
 8004c04:	00000000 	.word	0x00000000

08004c08 <forward_dense>:
 8004c08:	6942      	ldr	r2, [r0, #20]
 8004c0a:	8813      	ldrh	r3, [r2, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 81ca 	beq.w	8004fa6 <forward_dense+0x39e>
 8004c12:	6852      	ldr	r2, [r2, #4]
 8004c14:	6850      	ldr	r0, [r2, #4]
 8004c16:	b100      	cbz	r0, 8004c1a <forward_dense+0x12>
 8004c18:	6800      	ldr	r0, [r0, #0]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	f240 81c0 	bls.w	8004fa0 <forward_dense+0x398>
 8004c20:	6911      	ldr	r1, [r2, #16]
 8004c22:	b101      	cbz	r1, 8004c26 <forward_dense+0x1e>
 8004c24:	6809      	ldr	r1, [r1, #0]
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	f000 81bf 	beq.w	8004faa <forward_dense+0x3a2>
 8004c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c30:	ed2d 8b10 	vpush	{d8-d15}
 8004c34:	69d3      	ldr	r3, [r2, #28]
 8004c36:	b091      	sub	sp, #68	; 0x44
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 820b 	beq.w	8005054 <forward_dense+0x44c>
 8004c3e:	681c      	ldr	r4, [r3, #0]
 8004c40:	9408      	str	r4, [sp, #32]
 8004c42:	f112 0418 	adds.w	r4, r2, #24
 8004c46:	f000 81df 	beq.w	8005008 <forward_dense+0x400>
 8004c4a:	8b12      	ldrh	r2, [r2, #24]
 8004c4c:	2a01      	cmp	r2, #1
 8004c4e:	f240 81fe 	bls.w	800504e <forward_dense+0x446>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 81da 	beq.w	800500c <forward_dense+0x404>
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	9306      	str	r3, [sp, #24]
 8004c5c:	9b08      	ldr	r3, [sp, #32]
 8004c5e:	68cc      	ldr	r4, [r1, #12]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	68c5      	ldr	r5, [r0, #12]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8004c6a:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004c6e:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8004c72:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8004c76:	fa4c f505 	asr.w	r5, ip, r5
 8004c7a:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8004c7e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004c80:	2a04      	cmp	r2, #4
 8004c82:	fb07 f506 	mul.w	r5, r7, r6
 8004c86:	6864      	ldr	r4, [r4, #4]
 8004c88:	9507      	str	r5, [sp, #28]
 8004c8a:	f000 81dd 	beq.w	8005048 <forward_dense+0x440>
 8004c8e:	2a08      	cmp	r2, #8
 8004c90:	f000 81da 	beq.w	8005048 <forward_dense+0x440>
 8004c94:	f04f 0a00 	mov.w	sl, #0
 8004c98:	698a      	ldr	r2, [r1, #24]
 8004c9a:	6981      	ldr	r1, [r0, #24]
 8004c9c:	6890      	ldr	r0, [r2, #8]
 8004c9e:	9a08      	ldr	r2, [sp, #32]
 8004ca0:	9004      	str	r0, [sp, #16]
 8004ca2:	6952      	ldr	r2, [r2, #20]
 8004ca4:	688f      	ldr	r7, [r1, #8]
 8004ca6:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8004caa:	00a2      	lsls	r2, r4, #2
 8004cac:	9209      	str	r2, [sp, #36]	; 0x24
 8004cae:	1886      	adds	r6, r0, r2
 8004cb0:	9a07      	ldr	r2, [sp, #28]
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	f000 81c3 	beq.w	800503e <forward_dense+0x436>
 8004cb8:	f1a8 0210 	sub.w	r2, r8, #16
 8004cbc:	0912      	lsrs	r2, r2, #4
 8004cbe:	3201      	adds	r2, #1
 8004cc0:	0192      	lsls	r2, r2, #6
 8004cc2:	920c      	str	r2, [sp, #48]	; 0x30
 8004cc4:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8004cc8:	920a      	str	r2, [sp, #40]	; 0x28
 8004cca:	689d      	ldr	r5, [r3, #8]
 8004ccc:	9b06      	ldr	r3, [sp, #24]
 8004cce:	eddf aad0 	vldr	s21, [pc, #832]	; 8005010 <forward_dense+0x408>
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	9205      	str	r2, [sp, #20]
 8004cd6:	f008 020f 	and.w	r2, r8, #15
 8004cda:	920d      	str	r2, [sp, #52]	; 0x34
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d043      	beq.n	8004d68 <forward_dense+0x160>
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	689c      	ldr	r4, [r3, #8]
 8004ce4:	9b04      	ldr	r3, [sp, #16]
 8004ce6:	f1ba 0f00 	cmp.w	sl, #0
 8004cea:	d042      	beq.n	8004d72 <forward_dense+0x16a>
 8004cec:	42b3      	cmp	r3, r6
 8004cee:	d22a      	bcs.n	8004d46 <forward_dense+0x13e>
 8004cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cf2:	469b      	mov	fp, r3
 8004cf4:	ab0f      	add	r3, sp, #60	; 0x3c
 8004cf6:	9303      	str	r3, [sp, #12]
 8004cf8:	2a04      	cmp	r2, #4
 8004cfa:	4633      	mov	r3, r6
 8004cfc:	4646      	mov	r6, r8
 8004cfe:	4698      	mov	r8, r3
 8004d00:	f000 8156 	beq.w	8004fb0 <forward_dense+0x3a8>
 8004d04:	2c00      	cmp	r4, #0
 8004d06:	f000 8185 	beq.w	8005014 <forward_dense+0x40c>
 8004d0a:	f8d4 c000 	ldr.w	ip, [r4]
 8004d0e:	9803      	ldr	r0, [sp, #12]
 8004d10:	9600      	str	r6, [sp, #0]
 8004d12:	463b      	mov	r3, r7
 8004d14:	4629      	mov	r1, r5
 8004d16:	4652      	mov	r2, sl
 8004d18:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004d1c:	f7ff fde8 	bl	80048f0 <ai_dict8_dot_array_f32>
 8004d20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d22:	f84b 3b04 	str.w	r3, [fp], #4
 8004d26:	45c3      	cmp	fp, r8
 8004d28:	f104 0404 	add.w	r4, r4, #4
 8004d2c:	444d      	add	r5, r9
 8004d2e:	d3e9      	bcc.n	8004d04 <forward_dense+0xfc>
 8004d30:	4643      	mov	r3, r8
 8004d32:	46b0      	mov	r8, r6
 8004d34:	461e      	mov	r6, r3
 8004d36:	9a04      	ldr	r2, [sp, #16]
 8004d38:	43d3      	mvns	r3, r2
 8004d3a:	4433      	add	r3, r6
 8004d3c:	f023 0303 	bic.w	r3, r3, #3
 8004d40:	3304      	adds	r3, #4
 8004d42:	18d3      	adds	r3, r2, r3
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d48:	9b05      	ldr	r3, [sp, #20]
 8004d4a:	4417      	add	r7, r2
 8004d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d4e:	4416      	add	r6, r2
 8004d50:	9a07      	ldr	r2, [sp, #28]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4293      	cmp	r3, r2
 8004d56:	9305      	str	r3, [sp, #20]
 8004d58:	f000 8171 	beq.w	800503e <forward_dense+0x436>
 8004d5c:	9b08      	ldr	r3, [sp, #32]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	689d      	ldr	r5, [r3, #8]
 8004d62:	9b06      	ldr	r3, [sp, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1bb      	bne.n	8004ce0 <forward_dense+0xd8>
 8004d68:	461c      	mov	r4, r3
 8004d6a:	9b04      	ldr	r3, [sp, #16]
 8004d6c:	f1ba 0f00 	cmp.w	sl, #0
 8004d70:	d1bc      	bne.n	8004cec <forward_dense+0xe4>
 8004d72:	42b3      	cmp	r3, r6
 8004d74:	d2e7      	bcs.n	8004d46 <forward_dense+0x13e>
 8004d76:	4618      	mov	r0, r3
 8004d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d7a:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8004d7e:	eb07 0c03 	add.w	ip, r7, r3
 8004d82:	469e      	mov	lr, r3
 8004d84:	2c00      	cmp	r4, #0
 8004d86:	f000 80ff 	beq.w	8004f88 <forward_dense+0x380>
 8004d8a:	f1b8 0f0f 	cmp.w	r8, #15
 8004d8e:	edd4 fa00 	vldr	s31, [r4]
 8004d92:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005010 <forward_dense+0x408>
 8004d96:	f104 0404 	add.w	r4, r4, #4
 8004d9a:	f240 80fd 	bls.w	8004f98 <forward_dense+0x390>
 8004d9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004da2:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004da6:	4641      	mov	r1, r8
 8004da8:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8004dac:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004db0:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004db4:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004db8:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8004dbc:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8004dc0:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004dc4:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004dc8:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8004dcc:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8004dd0:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004dd4:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004dd8:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8004ddc:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8004de0:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004de4:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004de8:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8004dec:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8004df0:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004df4:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004df8:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8004dfc:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8004e00:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004e04:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004e08:	ed52 4a04 	vldr	s9, [r2, #-16]
 8004e0c:	ed12 5a03 	vldr	s10, [r2, #-12]
 8004e10:	ed53 5a03 	vldr	s11, [r3, #-12]
 8004e14:	ed12 6a02 	vldr	s12, [r2, #-8]
 8004e18:	ed13 7a02 	vldr	s14, [r3, #-8]
 8004e1c:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8004e20:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8004e24:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004e28:	3910      	subs	r1, #16
 8004e2a:	290f      	cmp	r1, #15
 8004e2c:	ed53 ea01 	vldr	s29, [r3, #-4]
 8004e30:	ed12 ea01 	vldr	s28, [r2, #-4]
 8004e34:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8004e38:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004e3c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004e40:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8004e44:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8004e48:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8004e4c:	eee9 7a89 	vfma.f32	s15, s19, s18
 8004e50:	eee8 7a88 	vfma.f32	s15, s17, s16
 8004e54:	eee0 7a20 	vfma.f32	s15, s0, s1
 8004e58:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004e5c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004e60:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004e64:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004e68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004e6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004e70:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004e74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004e78:	d896      	bhi.n	8004da8 <forward_dense+0x1a0>
 8004e7a:	eb05 010e 	add.w	r1, r5, lr
 8004e7e:	465b      	mov	r3, fp
 8004e80:	4662      	mov	r2, ip
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d075      	beq.n	8004f72 <forward_dense+0x36a>
 8004e86:	ed91 7a00 	vldr	s14, [r1]
 8004e8a:	edd2 7a00 	vldr	s15, [r2]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004e94:	d06d      	beq.n	8004f72 <forward_dense+0x36a>
 8004e96:	ed91 7a01 	vldr	s14, [r1, #4]
 8004e9a:	edd2 7a01 	vldr	s15, [r2, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ea4:	d065      	beq.n	8004f72 <forward_dense+0x36a>
 8004ea6:	ed91 7a02 	vldr	s14, [r1, #8]
 8004eaa:	edd2 7a02 	vldr	s15, [r2, #8]
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004eb4:	d05d      	beq.n	8004f72 <forward_dense+0x36a>
 8004eb6:	ed91 7a03 	vldr	s14, [r1, #12]
 8004eba:	edd2 7a03 	vldr	s15, [r2, #12]
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ec4:	d055      	beq.n	8004f72 <forward_dense+0x36a>
 8004ec6:	ed91 7a04 	vldr	s14, [r1, #16]
 8004eca:	edd2 7a04 	vldr	s15, [r2, #16]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ed4:	d04d      	beq.n	8004f72 <forward_dense+0x36a>
 8004ed6:	ed91 7a05 	vldr	s14, [r1, #20]
 8004eda:	edd2 7a05 	vldr	s15, [r2, #20]
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ee4:	d045      	beq.n	8004f72 <forward_dense+0x36a>
 8004ee6:	ed91 7a06 	vldr	s14, [r1, #24]
 8004eea:	edd2 7a06 	vldr	s15, [r2, #24]
 8004eee:	2b07      	cmp	r3, #7
 8004ef0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004ef4:	d03d      	beq.n	8004f72 <forward_dense+0x36a>
 8004ef6:	ed91 7a07 	vldr	s14, [r1, #28]
 8004efa:	edd2 7a07 	vldr	s15, [r2, #28]
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f04:	d035      	beq.n	8004f72 <forward_dense+0x36a>
 8004f06:	ed91 7a08 	vldr	s14, [r1, #32]
 8004f0a:	edd2 7a08 	vldr	s15, [r2, #32]
 8004f0e:	2b09      	cmp	r3, #9
 8004f10:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f14:	d02d      	beq.n	8004f72 <forward_dense+0x36a>
 8004f16:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8004f1a:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004f1e:	2b0a      	cmp	r3, #10
 8004f20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f24:	d025      	beq.n	8004f72 <forward_dense+0x36a>
 8004f26:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8004f2a:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004f2e:	2b0b      	cmp	r3, #11
 8004f30:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f34:	d01d      	beq.n	8004f72 <forward_dense+0x36a>
 8004f36:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8004f3a:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f44:	d015      	beq.n	8004f72 <forward_dense+0x36a>
 8004f46:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8004f4a:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004f4e:	2b0d      	cmp	r3, #13
 8004f50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f54:	d00d      	beq.n	8004f72 <forward_dense+0x36a>
 8004f56:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8004f5a:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8004f5e:	2b0e      	cmp	r3, #14
 8004f60:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f64:	d005      	beq.n	8004f72 <forward_dense+0x36a>
 8004f66:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8004f6a:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004f6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004f72:	444d      	add	r5, r9
 8004f74:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8004f78:	ece0 6a01 	vstmia	r0!, {s13}
 8004f7c:	42b0      	cmp	r0, r6
 8004f7e:	f4bf aeda 	bcs.w	8004d36 <forward_dense+0x12e>
 8004f82:	2c00      	cmp	r4, #0
 8004f84:	f47f af01 	bne.w	8004d8a <forward_dense+0x182>
 8004f88:	f1b8 0f0f 	cmp.w	r8, #15
 8004f8c:	eef0 fa6a 	vmov.f32	s31, s21
 8004f90:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005010 <forward_dense+0x408>
 8004f94:	f63f af03 	bhi.w	8004d9e <forward_dense+0x196>
 8004f98:	4643      	mov	r3, r8
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	463a      	mov	r2, r7
 8004f9e:	e770      	b.n	8004e82 <forward_dense+0x27a>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	deff      	udf	#255	; 0xff
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	deff      	udf	#255	; 0xff
 8004faa:	2300      	movs	r3, #0
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	deff      	udf	#255	; 0xff
 8004fb0:	b1ac      	cbz	r4, 8004fde <forward_dense+0x3d6>
 8004fb2:	f8d4 c000 	ldr.w	ip, [r4]
 8004fb6:	9803      	ldr	r0, [sp, #12]
 8004fb8:	9600      	str	r6, [sp, #0]
 8004fba:	463b      	mov	r3, r7
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4652      	mov	r2, sl
 8004fc0:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8004fc4:	f7ff fd62 	bl	8004a8c <ai_dict4_dot_array_f32>
 8004fc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fca:	f84b 3b04 	str.w	r3, [fp], #4
 8004fce:	45c3      	cmp	fp, r8
 8004fd0:	f104 0404 	add.w	r4, r4, #4
 8004fd4:	444d      	add	r5, r9
 8004fd6:	f4bf aeab 	bcs.w	8004d30 <forward_dense+0x128>
 8004fda:	2c00      	cmp	r4, #0
 8004fdc:	d1e9      	bne.n	8004fb2 <forward_dense+0x3aa>
 8004fde:	4634      	mov	r4, r6
 8004fe0:	4646      	mov	r6, r8
 8004fe2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004fe6:	9400      	str	r4, [sp, #0]
 8004fe8:	463b      	mov	r3, r7
 8004fea:	4629      	mov	r1, r5
 8004fec:	4652      	mov	r2, sl
 8004fee:	4640      	mov	r0, r8
 8004ff0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8004ff4:	f7ff fd4a 	bl	8004a8c <ai_dict4_dot_array_f32>
 8004ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ffa:	f84b 3b04 	str.w	r3, [fp], #4
 8004ffe:	45b3      	cmp	fp, r6
 8005000:	444d      	add	r5, r9
 8005002:	d3f0      	bcc.n	8004fe6 <forward_dense+0x3de>
 8005004:	46a0      	mov	r8, r4
 8005006:	e696      	b.n	8004d36 <forward_dense+0x12e>
 8005008:	9406      	str	r4, [sp, #24]
 800500a:	e627      	b.n	8004c5c <forward_dense+0x54>
 800500c:	9306      	str	r3, [sp, #24]
 800500e:	e625      	b.n	8004c5c <forward_dense+0x54>
 8005010:	00000000 	.word	0x00000000
 8005014:	4634      	mov	r4, r6
 8005016:	4646      	mov	r6, r8
 8005018:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800501c:	9400      	str	r4, [sp, #0]
 800501e:	463b      	mov	r3, r7
 8005020:	4629      	mov	r1, r5
 8005022:	4652      	mov	r2, sl
 8005024:	4640      	mov	r0, r8
 8005026:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800502a:	f7ff fc61 	bl	80048f0 <ai_dict8_dot_array_f32>
 800502e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005030:	f84b 3b04 	str.w	r3, [fp], #4
 8005034:	45b3      	cmp	fp, r6
 8005036:	444d      	add	r5, r9
 8005038:	d3f0      	bcc.n	800501c <forward_dense+0x414>
 800503a:	46a0      	mov	r8, r4
 800503c:	e67b      	b.n	8004d36 <forward_dense+0x12e>
 800503e:	b011      	add	sp, #68	; 0x44
 8005040:	ecbd 8b10 	vpop	{d8-d15}
 8005044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005048:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800504c:	e624      	b.n	8004c98 <forward_dense+0x90>
 800504e:	2300      	movs	r3, #0
 8005050:	9306      	str	r3, [sp, #24]
 8005052:	e603      	b.n	8004c5c <forward_dense+0x54>
 8005054:	9308      	str	r3, [sp, #32]
 8005056:	e5f4      	b.n	8004c42 <forward_dense+0x3a>

08005058 <nl_func_relu_generic_array_f32>:
 8005058:	b430      	push	{r4, r5}
 800505a:	edd3 6a02 	vldr	s13, [r3, #8]
 800505e:	6880      	ldr	r0, [r0, #8]
 8005060:	688c      	ldr	r4, [r1, #8]
 8005062:	ed93 7a00 	vldr	s14, [r3]
 8005066:	ed93 6a01 	vldr	s12, [r3, #4]
 800506a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800506e:	3a01      	subs	r2, #1
 8005070:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507a:	4410      	add	r0, r2
 800507c:	4422      	add	r2, r4
 800507e:	d421      	bmi.n	80050c4 <nl_func_relu_generic_array_f32+0x6c>
 8005080:	42a2      	cmp	r2, r4
 8005082:	d33d      	bcc.n	8005100 <nl_func_relu_generic_array_f32+0xa8>
 8005084:	1d13      	adds	r3, r2, #4
 8005086:	1d02      	adds	r2, r0, #4
 8005088:	e010      	b.n	80050ac <nl_func_relu_generic_array_f32+0x54>
 800508a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005096:	dd01      	ble.n	800509c <nl_func_relu_generic_array_f32+0x44>
 8005098:	ee65 7a86 	vmul.f32	s15, s11, s12
 800509c:	ed62 7a01 	vstmdb	r2!, {s15}
 80050a0:	6888      	ldr	r0, [r1, #8]
 80050a2:	f1a3 0408 	sub.w	r4, r3, #8
 80050a6:	4284      	cmp	r4, r0
 80050a8:	462b      	mov	r3, r5
 80050aa:	d329      	bcc.n	8005100 <nl_func_relu_generic_array_f32+0xa8>
 80050ac:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050b0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	f1a3 0504 	sub.w	r5, r3, #4
 80050bc:	dce5      	bgt.n	800508a <nl_func_relu_generic_array_f32+0x32>
 80050be:	eef0 7a66 	vmov.f32	s15, s13
 80050c2:	e7eb      	b.n	800509c <nl_func_relu_generic_array_f32+0x44>
 80050c4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80050c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050cc:	d01a      	beq.n	8005104 <nl_func_relu_generic_array_f32+0xac>
 80050ce:	42a2      	cmp	r2, r4
 80050d0:	d316      	bcc.n	8005100 <nl_func_relu_generic_array_f32+0xa8>
 80050d2:	1d13      	adds	r3, r2, #4
 80050d4:	1d02      	adds	r2, r0, #4
 80050d6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80050da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80050de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e2:	f1a3 0408 	sub.w	r4, r3, #8
 80050e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050ea:	f1a3 0004 	sub.w	r0, r3, #4
 80050ee:	ee66 6a86 	vmul.f32	s13, s13, s12
 80050f2:	4623      	mov	r3, r4
 80050f4:	d51e      	bpl.n	8005134 <nl_func_relu_generic_array_f32+0xdc>
 80050f6:	ed62 6a01 	vstmdb	r2!, {s13}
 80050fa:	688b      	ldr	r3, [r1, #8]
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d91e      	bls.n	800513e <nl_func_relu_generic_array_f32+0xe6>
 8005100:	bc30      	pop	{r4, r5}
 8005102:	4770      	bx	lr
 8005104:	42a2      	cmp	r2, r4
 8005106:	d3fb      	bcc.n	8005100 <nl_func_relu_generic_array_f32+0xa8>
 8005108:	1d13      	adds	r3, r2, #4
 800510a:	2500      	movs	r5, #0
 800510c:	1d02      	adds	r2, r0, #4
 800510e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005116:	f1a3 0408 	sub.w	r4, r3, #8
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	f1a3 0004 	sub.w	r0, r3, #4
 8005122:	4623      	mov	r3, r4
 8005124:	d80d      	bhi.n	8005142 <nl_func_relu_generic_array_f32+0xea>
 8005126:	ed62 7a01 	vstmdb	r2!, {s15}
 800512a:	688b      	ldr	r3, [r1, #8]
 800512c:	42a3      	cmp	r3, r4
 800512e:	d8e7      	bhi.n	8005100 <nl_func_relu_generic_array_f32+0xa8>
 8005130:	4603      	mov	r3, r0
 8005132:	e7ec      	b.n	800510e <nl_func_relu_generic_array_f32+0xb6>
 8005134:	ed62 7a01 	vstmdb	r2!, {s15}
 8005138:	688c      	ldr	r4, [r1, #8]
 800513a:	429c      	cmp	r4, r3
 800513c:	d8e0      	bhi.n	8005100 <nl_func_relu_generic_array_f32+0xa8>
 800513e:	4603      	mov	r3, r0
 8005140:	e7c9      	b.n	80050d6 <nl_func_relu_generic_array_f32+0x7e>
 8005142:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005146:	688c      	ldr	r4, [r1, #8]
 8005148:	429c      	cmp	r4, r3
 800514a:	d8d9      	bhi.n	8005100 <nl_func_relu_generic_array_f32+0xa8>
 800514c:	4603      	mov	r3, r0
 800514e:	e7de      	b.n	800510e <nl_func_relu_generic_array_f32+0xb6>

08005150 <forward_relu>:
 8005150:	6942      	ldr	r2, [r0, #20]
 8005152:	8813      	ldrh	r3, [r2, #0]
 8005154:	b33b      	cbz	r3, 80051a6 <forward_relu+0x56>
 8005156:	b470      	push	{r4, r5, r6}
 8005158:	6852      	ldr	r2, [r2, #4]
 800515a:	6856      	ldr	r6, [r2, #4]
 800515c:	b106      	cbz	r6, 8005160 <forward_relu+0x10>
 800515e:	6836      	ldr	r6, [r6, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d91d      	bls.n	80051a0 <forward_relu+0x50>
 8005164:	6913      	ldr	r3, [r2, #16]
 8005166:	b103      	cbz	r3, 800516a <forward_relu+0x1a>
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6982      	ldr	r2, [r0, #24]
 800516c:	68b4      	ldr	r4, [r6, #8]
 800516e:	6998      	ldr	r0, [r3, #24]
 8005170:	69b1      	ldr	r1, [r6, #24]
 8005172:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005176:	2a00      	cmp	r2, #0
 8005178:	d041      	beq.n	80051fe <forward_relu+0xae>
 800517a:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 800517e:	2d01      	cmp	r5, #1
 8005180:	d013      	beq.n	80051aa <forward_relu+0x5a>
 8005182:	2c00      	cmp	r4, #0
 8005184:	d06f      	beq.n	8005266 <forward_relu+0x116>
 8005186:	68f6      	ldr	r6, [r6, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800518e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005192:	42a6      	cmp	r6, r4
 8005194:	fb05 f202 	mul.w	r2, r5, r2
 8005198:	d1f9      	bne.n	800518e <forward_relu+0x3e>
 800519a:	bc70      	pop	{r4, r5, r6}
 800519c:	f7ff bf5c 	b.w	8005058 <nl_func_relu_generic_array_f32>
 80051a0:	2300      	movs	r3, #0
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	deff      	udf	#255	; 0xff
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	deff      	udf	#255	; 0xff
 80051aa:	6880      	ldr	r0, [r0, #8]
 80051ac:	688a      	ldr	r2, [r1, #8]
 80051ae:	ed93 7a00 	vldr	s14, [r3]
 80051b2:	b184      	cbz	r4, 80051d6 <forward_relu+0x86>
 80051b4:	68f6      	ldr	r6, [r6, #12]
 80051b6:	462b      	mov	r3, r5
 80051b8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80051bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051c0:	42a6      	cmp	r6, r4
 80051c2:	fb05 f303 	mul.w	r3, r5, r3
 80051c6:	d1f9      	bne.n	80051bc <forward_relu+0x6c>
 80051c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051cc:	3b01      	subs	r3, #1
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	18d2      	adds	r2, r2, r3
 80051d2:	4418      	add	r0, r3
 80051d4:	d23d      	bcs.n	8005252 <forward_relu+0x102>
 80051d6:	1d13      	adds	r3, r2, #4
 80051d8:	2500      	movs	r5, #0
 80051da:	1d02      	adds	r2, r0, #4
 80051dc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80051e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e8:	f1a3 0004 	sub.w	r0, r3, #4
 80051ec:	d833      	bhi.n	8005256 <forward_relu+0x106>
 80051ee:	ed62 7a01 	vstmdb	r2!, {s15}
 80051f2:	688c      	ldr	r4, [r1, #8]
 80051f4:	3b08      	subs	r3, #8
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d82b      	bhi.n	8005252 <forward_relu+0x102>
 80051fa:	4603      	mov	r3, r0
 80051fc:	e7ee      	b.n	80051dc <forward_relu+0x8c>
 80051fe:	6880      	ldr	r0, [r0, #8]
 8005200:	688b      	ldr	r3, [r1, #8]
 8005202:	b184      	cbz	r4, 8005226 <forward_relu+0xd6>
 8005204:	68f6      	ldr	r6, [r6, #12]
 8005206:	2201      	movs	r2, #1
 8005208:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800520c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005210:	42a6      	cmp	r6, r4
 8005212:	fb05 f202 	mul.w	r2, r5, r2
 8005216:	d1f9      	bne.n	800520c <forward_relu+0xbc>
 8005218:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800521c:	3a01      	subs	r2, #1
 800521e:	0092      	lsls	r2, r2, #2
 8005220:	189b      	adds	r3, r3, r2
 8005222:	4410      	add	r0, r2
 8005224:	d215      	bcs.n	8005252 <forward_relu+0x102>
 8005226:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800526c <forward_relu+0x11c>
 800522a:	3304      	adds	r3, #4
 800522c:	3004      	adds	r0, #4
 800522e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	bfb8      	it	lt
 800523c:	eef0 7a47 	vmovlt.f32	s15, s14
 8005240:	ed60 7a01 	vstmdb	r0!, {s15}
 8005244:	688c      	ldr	r4, [r1, #8]
 8005246:	f1a3 0208 	sub.w	r2, r3, #8
 800524a:	4294      	cmp	r4, r2
 800524c:	f1a3 0304 	sub.w	r3, r3, #4
 8005250:	d9ed      	bls.n	800522e <forward_relu+0xde>
 8005252:	bc70      	pop	{r4, r5, r6}
 8005254:	4770      	bx	lr
 8005256:	f842 5d04 	str.w	r5, [r2, #-4]!
 800525a:	688c      	ldr	r4, [r1, #8]
 800525c:	3b08      	subs	r3, #8
 800525e:	429c      	cmp	r4, r3
 8005260:	d8f7      	bhi.n	8005252 <forward_relu+0x102>
 8005262:	4603      	mov	r3, r0
 8005264:	e7ba      	b.n	80051dc <forward_relu+0x8c>
 8005266:	2201      	movs	r2, #1
 8005268:	e797      	b.n	800519a <forward_relu+0x4a>
 800526a:	bf00      	nop
 800526c:	00000000 	.word	0x00000000

08005270 <ai_check_custom_types>:
 8005270:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <ai_check_custom_types+0x50>)
 8005272:	b082      	sub	sp, #8
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	9301      	str	r3, [sp, #4]
 8005278:	b118      	cbz	r0, 8005282 <ai_check_custom_types+0x12>
 800527a:	7803      	ldrb	r3, [r0, #0]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d002      	beq.n	8005286 <ai_check_custom_types+0x16>
 8005280:	2000      	movs	r0, #0
 8005282:	b002      	add	sp, #8
 8005284:	4770      	bx	lr
 8005286:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <ai_check_custom_types+0x28>
 800528e:	2001      	movs	r0, #1
 8005290:	f080 0001 	eor.w	r0, r0, #1
 8005294:	b002      	add	sp, #8
 8005296:	4770      	bx	lr
 8005298:	7842      	ldrb	r2, [r0, #1]
 800529a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800529e:	429a      	cmp	r2, r3
 80052a0:	f100 0001 	add.w	r0, r0, #1
 80052a4:	d1f3      	bne.n	800528e <ai_check_custom_types+0x1e>
 80052a6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80052aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d1ed      	bne.n	800528e <ai_check_custom_types+0x1e>
 80052b2:	7842      	ldrb	r2, [r0, #1]
 80052b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1e8      	bne.n	800528e <ai_check_custom_types+0x1e>
 80052bc:	2000      	movs	r0, #0
 80052be:	e7e7      	b.n	8005290 <ai_check_custom_types+0x20>
 80052c0:	080627b0 	.word	0x080627b0

080052c4 <ai_layers_forward_all>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80052c8:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80052ca:	4604      	mov	r4, r0
 80052cc:	b31e      	cbz	r6, 8005316 <ai_layers_forward_all+0x52>
 80052ce:	b1cd      	cbz	r5, 8005304 <ai_layers_forward_all+0x40>
 80052d0:	6545      	str	r5, [r0, #84]	; 0x54
 80052d2:	4629      	mov	r1, r5
 80052d4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80052d6:	2001      	movs	r0, #1
 80052d8:	47b0      	blx	r6
 80052da:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80052dc:	2700      	movs	r7, #0
 80052de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80052e0:	2002      	movs	r0, #2
 80052e2:	47b0      	blx	r6
 80052e4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80052e6:	692b      	ldr	r3, [r5, #16]
 80052e8:	4628      	mov	r0, r5
 80052ea:	4798      	blx	r3
 80052ec:	68eb      	ldr	r3, [r5, #12]
 80052ee:	429d      	cmp	r5, r3
 80052f0:	f04f 0003 	mov.w	r0, #3
 80052f4:	4619      	mov	r1, r3
 80052f6:	d006      	beq.n	8005306 <ai_layers_forward_all+0x42>
 80052f8:	6563      	str	r3, [r4, #84]	; 0x54
 80052fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80052fc:	47b0      	blx	r6
 80052fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005300:	2900      	cmp	r1, #0
 8005302:	d1ec      	bne.n	80052de <ai_layers_forward_all+0x1a>
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005306:	2100      	movs	r1, #0
 8005308:	6567      	str	r7, [r4, #84]	; 0x54
 800530a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800530c:	47b0      	blx	r6
 800530e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005310:	2900      	cmp	r1, #0
 8005312:	d1e4      	bne.n	80052de <ai_layers_forward_all+0x1a>
 8005314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005316:	2d00      	cmp	r5, #0
 8005318:	d0f4      	beq.n	8005304 <ai_layers_forward_all+0x40>
 800531a:	6545      	str	r5, [r0, #84]	; 0x54
 800531c:	692b      	ldr	r3, [r5, #16]
 800531e:	4628      	mov	r0, r5
 8005320:	4798      	blx	r3
 8005322:	68eb      	ldr	r3, [r5, #12]
 8005324:	42ab      	cmp	r3, r5
 8005326:	d004      	beq.n	8005332 <ai_layers_forward_all+0x6e>
 8005328:	6563      	str	r3, [r4, #84]	; 0x54
 800532a:	461d      	mov	r5, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f5      	bne.n	800531c <ai_layers_forward_all+0x58>
 8005330:	e7e8      	b.n	8005304 <ai_layers_forward_all+0x40>
 8005332:	2300      	movs	r3, #0
 8005334:	6563      	str	r3, [r4, #84]	; 0x54
 8005336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005338 <ai_array_to_buffer_fmt>:
 8005338:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800533c:	2b02      	cmp	r3, #2
 800533e:	d01f      	beq.n	8005380 <ai_array_to_buffer_fmt+0x48>
 8005340:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <ai_array_to_buffer_fmt+0x7c>)
 8005342:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8005346:	4293      	cmp	r3, r2
 8005348:	d00a      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 800534a:	dc0d      	bgt.n	8005368 <ai_array_to_buffer_fmt+0x30>
 800534c:	4a1a      	ldr	r2, [pc, #104]	; (80053b8 <ai_array_to_buffer_fmt+0x80>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d006      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 8005352:	dd1d      	ble.n	8005390 <ai_array_to_buffer_fmt+0x58>
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <ai_array_to_buffer_fmt+0x84>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d002      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 800535a:	320f      	adds	r2, #15
 800535c:	4293      	cmp	r3, r2
 800535e:	d10d      	bne.n	800537c <ai_array_to_buffer_fmt+0x44>
 8005360:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005364:	4318      	orrs	r0, r3
 8005366:	4770      	bx	lr
 8005368:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <ai_array_to_buffer_fmt+0x88>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d0f8      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 800536e:	dd18      	ble.n	80053a2 <ai_array_to_buffer_fmt+0x6a>
 8005370:	4a14      	ldr	r2, [pc, #80]	; (80053c4 <ai_array_to_buffer_fmt+0x8c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d0f4      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 8005376:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <ai_array_to_buffer_fmt+0x90>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d0f1      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 800537c:	2340      	movs	r3, #64	; 0x40
 800537e:	e7ef      	b.n	8005360 <ai_array_to_buffer_fmt+0x28>
 8005380:	4b12      	ldr	r3, [pc, #72]	; (80053cc <ai_array_to_buffer_fmt+0x94>)
 8005382:	4003      	ands	r3, r0
 8005384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005388:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800538c:	4318      	orrs	r0, r3
 800538e:	4770      	bx	lr
 8005390:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005394:	4293      	cmp	r3, r2
 8005396:	d0e3      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 8005398:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800539c:	4293      	cmp	r3, r2
 800539e:	d0df      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 80053a0:	e7ec      	b.n	800537c <ai_array_to_buffer_fmt+0x44>
 80053a2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d0da      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 80053aa:	3207      	adds	r2, #7
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d0d7      	beq.n	8005360 <ai_array_to_buffer_fmt+0x28>
 80053b0:	e7e4      	b.n	800537c <ai_array_to_buffer_fmt+0x44>
 80053b2:	bf00      	nop
 80053b4:	00840040 	.word	0x00840040
 80053b8:	00040447 	.word	0x00040447
 80053bc:	00040840 	.word	0x00040840
 80053c0:	00840840 	.word	0x00840840
 80053c4:	0084084f 	.word	0x0084084f
 80053c8:	01821040 	.word	0x01821040
 80053cc:	00803fff 	.word	0x00803fff

080053d0 <ai_array_get_byte_size>:
 80053d0:	b1c1      	cbz	r1, 8005404 <ai_array_get_byte_size+0x34>
 80053d2:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80053d6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80053da:	4413      	add	r3, r2
 80053dc:	fb01 f103 	mul.w	r1, r1, r3
 80053e0:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80053e4:	3107      	adds	r1, #7
 80053e6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80053ea:	f021 0107 	bic.w	r1, r1, #7
 80053ee:	2804      	cmp	r0, #4
 80053f0:	fa21 f102 	lsr.w	r1, r1, r2
 80053f4:	d008      	beq.n	8005408 <ai_array_get_byte_size+0x38>
 80053f6:	2808      	cmp	r0, #8
 80053f8:	d101      	bne.n	80053fe <ai_array_get_byte_size+0x2e>
 80053fa:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80053fe:	3107      	adds	r1, #7
 8005400:	08c8      	lsrs	r0, r1, #3
 8005402:	4770      	bx	lr
 8005404:	4608      	mov	r0, r1
 8005406:	4770      	bx	lr
 8005408:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800540c:	3107      	adds	r1, #7
 800540e:	08c8      	lsrs	r0, r1, #3
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop

08005414 <__errno>:
 8005414:	4b01      	ldr	r3, [pc, #4]	; (800541c <__errno+0x8>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000648 	.word	0x20000648

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4d0d      	ldr	r5, [pc, #52]	; (8005458 <__libc_init_array+0x38>)
 8005424:	4c0d      	ldr	r4, [pc, #52]	; (800545c <__libc_init_array+0x3c>)
 8005426:	1b64      	subs	r4, r4, r5
 8005428:	10a4      	asrs	r4, r4, #2
 800542a:	2600      	movs	r6, #0
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	4d0b      	ldr	r5, [pc, #44]	; (8005460 <__libc_init_array+0x40>)
 8005432:	4c0c      	ldr	r4, [pc, #48]	; (8005464 <__libc_init_array+0x44>)
 8005434:	f002 ff40 	bl	80082b8 <_init>
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	2600      	movs	r6, #0
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	08062e7c 	.word	0x08062e7c
 800545c:	08062e7c 	.word	0x08062e7c
 8005460:	08062e7c 	.word	0x08062e7c
 8005464:	08062e80 	.word	0x08062e80

08005468 <malloc>:
 8005468:	4b02      	ldr	r3, [pc, #8]	; (8005474 <malloc+0xc>)
 800546a:	4601      	mov	r1, r0
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f000 b869 	b.w	8005544 <_malloc_r>
 8005472:	bf00      	nop
 8005474:	20000648 	.word	0x20000648

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548e:	4291      	cmp	r1, r2
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <memset>:
 8005494:	4402      	add	r2, r0
 8005496:	4603      	mov	r3, r0
 8005498:	4293      	cmp	r3, r2
 800549a:	d100      	bne.n	800549e <memset+0xa>
 800549c:	4770      	bx	lr
 800549e:	f803 1b01 	strb.w	r1, [r3], #1
 80054a2:	e7f9      	b.n	8005498 <memset+0x4>

080054a4 <_free_r>:
 80054a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054a6:	2900      	cmp	r1, #0
 80054a8:	d048      	beq.n	800553c <_free_r+0x98>
 80054aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ae:	9001      	str	r0, [sp, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f1a1 0404 	sub.w	r4, r1, #4
 80054b6:	bfb8      	it	lt
 80054b8:	18e4      	addlt	r4, r4, r3
 80054ba:	f001 ff21 	bl	8007300 <__malloc_lock>
 80054be:	4a20      	ldr	r2, [pc, #128]	; (8005540 <_free_r+0x9c>)
 80054c0:	9801      	ldr	r0, [sp, #4]
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	4615      	mov	r5, r2
 80054c6:	b933      	cbnz	r3, 80054d6 <_free_r+0x32>
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	6014      	str	r4, [r2, #0]
 80054cc:	b003      	add	sp, #12
 80054ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d2:	f001 bf1b 	b.w	800730c <__malloc_unlock>
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	d90b      	bls.n	80054f2 <_free_r+0x4e>
 80054da:	6821      	ldr	r1, [r4, #0]
 80054dc:	1862      	adds	r2, r4, r1
 80054de:	4293      	cmp	r3, r2
 80054e0:	bf04      	itt	eq
 80054e2:	681a      	ldreq	r2, [r3, #0]
 80054e4:	685b      	ldreq	r3, [r3, #4]
 80054e6:	6063      	str	r3, [r4, #4]
 80054e8:	bf04      	itt	eq
 80054ea:	1852      	addeq	r2, r2, r1
 80054ec:	6022      	streq	r2, [r4, #0]
 80054ee:	602c      	str	r4, [r5, #0]
 80054f0:	e7ec      	b.n	80054cc <_free_r+0x28>
 80054f2:	461a      	mov	r2, r3
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	b10b      	cbz	r3, 80054fc <_free_r+0x58>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d9fa      	bls.n	80054f2 <_free_r+0x4e>
 80054fc:	6811      	ldr	r1, [r2, #0]
 80054fe:	1855      	adds	r5, r2, r1
 8005500:	42a5      	cmp	r5, r4
 8005502:	d10b      	bne.n	800551c <_free_r+0x78>
 8005504:	6824      	ldr	r4, [r4, #0]
 8005506:	4421      	add	r1, r4
 8005508:	1854      	adds	r4, r2, r1
 800550a:	42a3      	cmp	r3, r4
 800550c:	6011      	str	r1, [r2, #0]
 800550e:	d1dd      	bne.n	80054cc <_free_r+0x28>
 8005510:	681c      	ldr	r4, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	6053      	str	r3, [r2, #4]
 8005516:	4421      	add	r1, r4
 8005518:	6011      	str	r1, [r2, #0]
 800551a:	e7d7      	b.n	80054cc <_free_r+0x28>
 800551c:	d902      	bls.n	8005524 <_free_r+0x80>
 800551e:	230c      	movs	r3, #12
 8005520:	6003      	str	r3, [r0, #0]
 8005522:	e7d3      	b.n	80054cc <_free_r+0x28>
 8005524:	6825      	ldr	r5, [r4, #0]
 8005526:	1961      	adds	r1, r4, r5
 8005528:	428b      	cmp	r3, r1
 800552a:	bf04      	itt	eq
 800552c:	6819      	ldreq	r1, [r3, #0]
 800552e:	685b      	ldreq	r3, [r3, #4]
 8005530:	6063      	str	r3, [r4, #4]
 8005532:	bf04      	itt	eq
 8005534:	1949      	addeq	r1, r1, r5
 8005536:	6021      	streq	r1, [r4, #0]
 8005538:	6054      	str	r4, [r2, #4]
 800553a:	e7c7      	b.n	80054cc <_free_r+0x28>
 800553c:	b003      	add	sp, #12
 800553e:	bd30      	pop	{r4, r5, pc}
 8005540:	20001c48 	.word	0x20001c48

08005544 <_malloc_r>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	1ccd      	adds	r5, r1, #3
 8005548:	f025 0503 	bic.w	r5, r5, #3
 800554c:	3508      	adds	r5, #8
 800554e:	2d0c      	cmp	r5, #12
 8005550:	bf38      	it	cc
 8005552:	250c      	movcc	r5, #12
 8005554:	2d00      	cmp	r5, #0
 8005556:	4606      	mov	r6, r0
 8005558:	db01      	blt.n	800555e <_malloc_r+0x1a>
 800555a:	42a9      	cmp	r1, r5
 800555c:	d903      	bls.n	8005566 <_malloc_r+0x22>
 800555e:	230c      	movs	r3, #12
 8005560:	6033      	str	r3, [r6, #0]
 8005562:	2000      	movs	r0, #0
 8005564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005566:	f001 fecb 	bl	8007300 <__malloc_lock>
 800556a:	4921      	ldr	r1, [pc, #132]	; (80055f0 <_malloc_r+0xac>)
 800556c:	680a      	ldr	r2, [r1, #0]
 800556e:	4614      	mov	r4, r2
 8005570:	b99c      	cbnz	r4, 800559a <_malloc_r+0x56>
 8005572:	4f20      	ldr	r7, [pc, #128]	; (80055f4 <_malloc_r+0xb0>)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	b923      	cbnz	r3, 8005582 <_malloc_r+0x3e>
 8005578:	4621      	mov	r1, r4
 800557a:	4630      	mov	r0, r6
 800557c:	f000 fd34 	bl	8005fe8 <_sbrk_r>
 8005580:	6038      	str	r0, [r7, #0]
 8005582:	4629      	mov	r1, r5
 8005584:	4630      	mov	r0, r6
 8005586:	f000 fd2f 	bl	8005fe8 <_sbrk_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d123      	bne.n	80055d6 <_malloc_r+0x92>
 800558e:	230c      	movs	r3, #12
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	4630      	mov	r0, r6
 8005594:	f001 feba 	bl	800730c <__malloc_unlock>
 8005598:	e7e3      	b.n	8005562 <_malloc_r+0x1e>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	1b5b      	subs	r3, r3, r5
 800559e:	d417      	bmi.n	80055d0 <_malloc_r+0x8c>
 80055a0:	2b0b      	cmp	r3, #11
 80055a2:	d903      	bls.n	80055ac <_malloc_r+0x68>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	441c      	add	r4, r3
 80055a8:	6025      	str	r5, [r4, #0]
 80055aa:	e004      	b.n	80055b6 <_malloc_r+0x72>
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	42a2      	cmp	r2, r4
 80055b0:	bf0c      	ite	eq
 80055b2:	600b      	streq	r3, [r1, #0]
 80055b4:	6053      	strne	r3, [r2, #4]
 80055b6:	4630      	mov	r0, r6
 80055b8:	f001 fea8 	bl	800730c <__malloc_unlock>
 80055bc:	f104 000b 	add.w	r0, r4, #11
 80055c0:	1d23      	adds	r3, r4, #4
 80055c2:	f020 0007 	bic.w	r0, r0, #7
 80055c6:	1ac2      	subs	r2, r0, r3
 80055c8:	d0cc      	beq.n	8005564 <_malloc_r+0x20>
 80055ca:	1a1b      	subs	r3, r3, r0
 80055cc:	50a3      	str	r3, [r4, r2]
 80055ce:	e7c9      	b.n	8005564 <_malloc_r+0x20>
 80055d0:	4622      	mov	r2, r4
 80055d2:	6864      	ldr	r4, [r4, #4]
 80055d4:	e7cc      	b.n	8005570 <_malloc_r+0x2c>
 80055d6:	1cc4      	adds	r4, r0, #3
 80055d8:	f024 0403 	bic.w	r4, r4, #3
 80055dc:	42a0      	cmp	r0, r4
 80055de:	d0e3      	beq.n	80055a8 <_malloc_r+0x64>
 80055e0:	1a21      	subs	r1, r4, r0
 80055e2:	4630      	mov	r0, r6
 80055e4:	f000 fd00 	bl	8005fe8 <_sbrk_r>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d1dd      	bne.n	80055a8 <_malloc_r+0x64>
 80055ec:	e7cf      	b.n	800558e <_malloc_r+0x4a>
 80055ee:	bf00      	nop
 80055f0:	20001c48 	.word	0x20001c48
 80055f4:	20001c4c 	.word	0x20001c4c

080055f8 <__cvt>:
 80055f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055fc:	ec55 4b10 	vmov	r4, r5, d0
 8005600:	2d00      	cmp	r5, #0
 8005602:	460e      	mov	r6, r1
 8005604:	4619      	mov	r1, r3
 8005606:	462b      	mov	r3, r5
 8005608:	bfbb      	ittet	lt
 800560a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800560e:	461d      	movlt	r5, r3
 8005610:	2300      	movge	r3, #0
 8005612:	232d      	movlt	r3, #45	; 0x2d
 8005614:	700b      	strb	r3, [r1, #0]
 8005616:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005618:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800561c:	4691      	mov	r9, r2
 800561e:	f023 0820 	bic.w	r8, r3, #32
 8005622:	bfbc      	itt	lt
 8005624:	4622      	movlt	r2, r4
 8005626:	4614      	movlt	r4, r2
 8005628:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800562c:	d005      	beq.n	800563a <__cvt+0x42>
 800562e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005632:	d100      	bne.n	8005636 <__cvt+0x3e>
 8005634:	3601      	adds	r6, #1
 8005636:	2102      	movs	r1, #2
 8005638:	e000      	b.n	800563c <__cvt+0x44>
 800563a:	2103      	movs	r1, #3
 800563c:	ab03      	add	r3, sp, #12
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	ab02      	add	r3, sp, #8
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	ec45 4b10 	vmov	d0, r4, r5
 8005648:	4653      	mov	r3, sl
 800564a:	4632      	mov	r2, r6
 800564c:	f000 fe48 	bl	80062e0 <_dtoa_r>
 8005650:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005654:	4607      	mov	r7, r0
 8005656:	d102      	bne.n	800565e <__cvt+0x66>
 8005658:	f019 0f01 	tst.w	r9, #1
 800565c:	d022      	beq.n	80056a4 <__cvt+0xac>
 800565e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005662:	eb07 0906 	add.w	r9, r7, r6
 8005666:	d110      	bne.n	800568a <__cvt+0x92>
 8005668:	783b      	ldrb	r3, [r7, #0]
 800566a:	2b30      	cmp	r3, #48	; 0x30
 800566c:	d10a      	bne.n	8005684 <__cvt+0x8c>
 800566e:	2200      	movs	r2, #0
 8005670:	2300      	movs	r3, #0
 8005672:	4620      	mov	r0, r4
 8005674:	4629      	mov	r1, r5
 8005676:	f7fb fa37 	bl	8000ae8 <__aeabi_dcmpeq>
 800567a:	b918      	cbnz	r0, 8005684 <__cvt+0x8c>
 800567c:	f1c6 0601 	rsb	r6, r6, #1
 8005680:	f8ca 6000 	str.w	r6, [sl]
 8005684:	f8da 3000 	ldr.w	r3, [sl]
 8005688:	4499      	add	r9, r3
 800568a:	2200      	movs	r2, #0
 800568c:	2300      	movs	r3, #0
 800568e:	4620      	mov	r0, r4
 8005690:	4629      	mov	r1, r5
 8005692:	f7fb fa29 	bl	8000ae8 <__aeabi_dcmpeq>
 8005696:	b108      	cbz	r0, 800569c <__cvt+0xa4>
 8005698:	f8cd 900c 	str.w	r9, [sp, #12]
 800569c:	2230      	movs	r2, #48	; 0x30
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	454b      	cmp	r3, r9
 80056a2:	d307      	bcc.n	80056b4 <__cvt+0xbc>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056a8:	1bdb      	subs	r3, r3, r7
 80056aa:	4638      	mov	r0, r7
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	b004      	add	sp, #16
 80056b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b4:	1c59      	adds	r1, r3, #1
 80056b6:	9103      	str	r1, [sp, #12]
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	e7f0      	b.n	800569e <__cvt+0xa6>

080056bc <__exponent>:
 80056bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056be:	4603      	mov	r3, r0
 80056c0:	2900      	cmp	r1, #0
 80056c2:	bfb8      	it	lt
 80056c4:	4249      	neglt	r1, r1
 80056c6:	f803 2b02 	strb.w	r2, [r3], #2
 80056ca:	bfb4      	ite	lt
 80056cc:	222d      	movlt	r2, #45	; 0x2d
 80056ce:	222b      	movge	r2, #43	; 0x2b
 80056d0:	2909      	cmp	r1, #9
 80056d2:	7042      	strb	r2, [r0, #1]
 80056d4:	dd2a      	ble.n	800572c <__exponent+0x70>
 80056d6:	f10d 0407 	add.w	r4, sp, #7
 80056da:	46a4      	mov	ip, r4
 80056dc:	270a      	movs	r7, #10
 80056de:	46a6      	mov	lr, r4
 80056e0:	460a      	mov	r2, r1
 80056e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80056e6:	fb07 1516 	mls	r5, r7, r6, r1
 80056ea:	3530      	adds	r5, #48	; 0x30
 80056ec:	2a63      	cmp	r2, #99	; 0x63
 80056ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80056f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056f6:	4631      	mov	r1, r6
 80056f8:	dcf1      	bgt.n	80056de <__exponent+0x22>
 80056fa:	3130      	adds	r1, #48	; 0x30
 80056fc:	f1ae 0502 	sub.w	r5, lr, #2
 8005700:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005704:	1c44      	adds	r4, r0, #1
 8005706:	4629      	mov	r1, r5
 8005708:	4561      	cmp	r1, ip
 800570a:	d30a      	bcc.n	8005722 <__exponent+0x66>
 800570c:	f10d 0209 	add.w	r2, sp, #9
 8005710:	eba2 020e 	sub.w	r2, r2, lr
 8005714:	4565      	cmp	r5, ip
 8005716:	bf88      	it	hi
 8005718:	2200      	movhi	r2, #0
 800571a:	4413      	add	r3, r2
 800571c:	1a18      	subs	r0, r3, r0
 800571e:	b003      	add	sp, #12
 8005720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005726:	f804 2f01 	strb.w	r2, [r4, #1]!
 800572a:	e7ed      	b.n	8005708 <__exponent+0x4c>
 800572c:	2330      	movs	r3, #48	; 0x30
 800572e:	3130      	adds	r1, #48	; 0x30
 8005730:	7083      	strb	r3, [r0, #2]
 8005732:	70c1      	strb	r1, [r0, #3]
 8005734:	1d03      	adds	r3, r0, #4
 8005736:	e7f1      	b.n	800571c <__exponent+0x60>

08005738 <_printf_float>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	ed2d 8b02 	vpush	{d8}
 8005740:	b08d      	sub	sp, #52	; 0x34
 8005742:	460c      	mov	r4, r1
 8005744:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005748:	4616      	mov	r6, r2
 800574a:	461f      	mov	r7, r3
 800574c:	4605      	mov	r5, r0
 800574e:	f001 fd6b 	bl	8007228 <_localeconv_r>
 8005752:	f8d0 a000 	ldr.w	sl, [r0]
 8005756:	4650      	mov	r0, sl
 8005758:	f7fa fd4a 	bl	80001f0 <strlen>
 800575c:	2300      	movs	r3, #0
 800575e:	930a      	str	r3, [sp, #40]	; 0x28
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	f8d8 3000 	ldr.w	r3, [r8]
 8005768:	f894 b018 	ldrb.w	fp, [r4, #24]
 800576c:	3307      	adds	r3, #7
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	f103 0208 	add.w	r2, r3, #8
 8005776:	f8c8 2000 	str.w	r2, [r8]
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005782:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800578a:	9307      	str	r3, [sp, #28]
 800578c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005790:	ee08 0a10 	vmov	s16, r0
 8005794:	4b9f      	ldr	r3, [pc, #636]	; (8005a14 <_printf_float+0x2dc>)
 8005796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800579a:	f04f 32ff 	mov.w	r2, #4294967295
 800579e:	f7fb f9d5 	bl	8000b4c <__aeabi_dcmpun>
 80057a2:	bb88      	cbnz	r0, 8005808 <_printf_float+0xd0>
 80057a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057a8:	4b9a      	ldr	r3, [pc, #616]	; (8005a14 <_printf_float+0x2dc>)
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	f7fb f9af 	bl	8000b10 <__aeabi_dcmple>
 80057b2:	bb48      	cbnz	r0, 8005808 <_printf_float+0xd0>
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	4640      	mov	r0, r8
 80057ba:	4649      	mov	r1, r9
 80057bc:	f7fb f99e 	bl	8000afc <__aeabi_dcmplt>
 80057c0:	b110      	cbz	r0, 80057c8 <_printf_float+0x90>
 80057c2:	232d      	movs	r3, #45	; 0x2d
 80057c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c8:	4b93      	ldr	r3, [pc, #588]	; (8005a18 <_printf_float+0x2e0>)
 80057ca:	4894      	ldr	r0, [pc, #592]	; (8005a1c <_printf_float+0x2e4>)
 80057cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057d0:	bf94      	ite	ls
 80057d2:	4698      	movls	r8, r3
 80057d4:	4680      	movhi	r8, r0
 80057d6:	2303      	movs	r3, #3
 80057d8:	6123      	str	r3, [r4, #16]
 80057da:	9b05      	ldr	r3, [sp, #20]
 80057dc:	f023 0204 	bic.w	r2, r3, #4
 80057e0:	6022      	str	r2, [r4, #0]
 80057e2:	f04f 0900 	mov.w	r9, #0
 80057e6:	9700      	str	r7, [sp, #0]
 80057e8:	4633      	mov	r3, r6
 80057ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 f9d8 	bl	8005ba4 <_printf_common>
 80057f4:	3001      	adds	r0, #1
 80057f6:	f040 8090 	bne.w	800591a <_printf_float+0x1e2>
 80057fa:	f04f 30ff 	mov.w	r0, #4294967295
 80057fe:	b00d      	add	sp, #52	; 0x34
 8005800:	ecbd 8b02 	vpop	{d8}
 8005804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	4640      	mov	r0, r8
 800580e:	4649      	mov	r1, r9
 8005810:	f7fb f99c 	bl	8000b4c <__aeabi_dcmpun>
 8005814:	b140      	cbz	r0, 8005828 <_printf_float+0xf0>
 8005816:	464b      	mov	r3, r9
 8005818:	2b00      	cmp	r3, #0
 800581a:	bfbc      	itt	lt
 800581c:	232d      	movlt	r3, #45	; 0x2d
 800581e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005822:	487f      	ldr	r0, [pc, #508]	; (8005a20 <_printf_float+0x2e8>)
 8005824:	4b7f      	ldr	r3, [pc, #508]	; (8005a24 <_printf_float+0x2ec>)
 8005826:	e7d1      	b.n	80057cc <_printf_float+0x94>
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800582e:	9206      	str	r2, [sp, #24]
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	d13f      	bne.n	80058b4 <_printf_float+0x17c>
 8005834:	2306      	movs	r3, #6
 8005836:	6063      	str	r3, [r4, #4]
 8005838:	9b05      	ldr	r3, [sp, #20]
 800583a:	6861      	ldr	r1, [r4, #4]
 800583c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005840:	2300      	movs	r3, #0
 8005842:	9303      	str	r3, [sp, #12]
 8005844:	ab0a      	add	r3, sp, #40	; 0x28
 8005846:	e9cd b301 	strd	fp, r3, [sp, #4]
 800584a:	ab09      	add	r3, sp, #36	; 0x24
 800584c:	ec49 8b10 	vmov	d0, r8, r9
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005858:	4628      	mov	r0, r5
 800585a:	f7ff fecd 	bl	80055f8 <__cvt>
 800585e:	9b06      	ldr	r3, [sp, #24]
 8005860:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005862:	2b47      	cmp	r3, #71	; 0x47
 8005864:	4680      	mov	r8, r0
 8005866:	d108      	bne.n	800587a <_printf_float+0x142>
 8005868:	1cc8      	adds	r0, r1, #3
 800586a:	db02      	blt.n	8005872 <_printf_float+0x13a>
 800586c:	6863      	ldr	r3, [r4, #4]
 800586e:	4299      	cmp	r1, r3
 8005870:	dd41      	ble.n	80058f6 <_printf_float+0x1be>
 8005872:	f1ab 0b02 	sub.w	fp, fp, #2
 8005876:	fa5f fb8b 	uxtb.w	fp, fp
 800587a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800587e:	d820      	bhi.n	80058c2 <_printf_float+0x18a>
 8005880:	3901      	subs	r1, #1
 8005882:	465a      	mov	r2, fp
 8005884:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005888:	9109      	str	r1, [sp, #36]	; 0x24
 800588a:	f7ff ff17 	bl	80056bc <__exponent>
 800588e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005890:	1813      	adds	r3, r2, r0
 8005892:	2a01      	cmp	r2, #1
 8005894:	4681      	mov	r9, r0
 8005896:	6123      	str	r3, [r4, #16]
 8005898:	dc02      	bgt.n	80058a0 <_printf_float+0x168>
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	07d2      	lsls	r2, r2, #31
 800589e:	d501      	bpl.n	80058a4 <_printf_float+0x16c>
 80058a0:	3301      	adds	r3, #1
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d09c      	beq.n	80057e6 <_printf_float+0xae>
 80058ac:	232d      	movs	r3, #45	; 0x2d
 80058ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b2:	e798      	b.n	80057e6 <_printf_float+0xae>
 80058b4:	9a06      	ldr	r2, [sp, #24]
 80058b6:	2a47      	cmp	r2, #71	; 0x47
 80058b8:	d1be      	bne.n	8005838 <_printf_float+0x100>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1bc      	bne.n	8005838 <_printf_float+0x100>
 80058be:	2301      	movs	r3, #1
 80058c0:	e7b9      	b.n	8005836 <_printf_float+0xfe>
 80058c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058c6:	d118      	bne.n	80058fa <_printf_float+0x1c2>
 80058c8:	2900      	cmp	r1, #0
 80058ca:	6863      	ldr	r3, [r4, #4]
 80058cc:	dd0b      	ble.n	80058e6 <_printf_float+0x1ae>
 80058ce:	6121      	str	r1, [r4, #16]
 80058d0:	b913      	cbnz	r3, 80058d8 <_printf_float+0x1a0>
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	07d0      	lsls	r0, r2, #31
 80058d6:	d502      	bpl.n	80058de <_printf_float+0x1a6>
 80058d8:	3301      	adds	r3, #1
 80058da:	440b      	add	r3, r1
 80058dc:	6123      	str	r3, [r4, #16]
 80058de:	65a1      	str	r1, [r4, #88]	; 0x58
 80058e0:	f04f 0900 	mov.w	r9, #0
 80058e4:	e7de      	b.n	80058a4 <_printf_float+0x16c>
 80058e6:	b913      	cbnz	r3, 80058ee <_printf_float+0x1b6>
 80058e8:	6822      	ldr	r2, [r4, #0]
 80058ea:	07d2      	lsls	r2, r2, #31
 80058ec:	d501      	bpl.n	80058f2 <_printf_float+0x1ba>
 80058ee:	3302      	adds	r3, #2
 80058f0:	e7f4      	b.n	80058dc <_printf_float+0x1a4>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e7f2      	b.n	80058dc <_printf_float+0x1a4>
 80058f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058fc:	4299      	cmp	r1, r3
 80058fe:	db05      	blt.n	800590c <_printf_float+0x1d4>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	6121      	str	r1, [r4, #16]
 8005904:	07d8      	lsls	r0, r3, #31
 8005906:	d5ea      	bpl.n	80058de <_printf_float+0x1a6>
 8005908:	1c4b      	adds	r3, r1, #1
 800590a:	e7e7      	b.n	80058dc <_printf_float+0x1a4>
 800590c:	2900      	cmp	r1, #0
 800590e:	bfd4      	ite	le
 8005910:	f1c1 0202 	rsble	r2, r1, #2
 8005914:	2201      	movgt	r2, #1
 8005916:	4413      	add	r3, r2
 8005918:	e7e0      	b.n	80058dc <_printf_float+0x1a4>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	055a      	lsls	r2, r3, #21
 800591e:	d407      	bmi.n	8005930 <_printf_float+0x1f8>
 8005920:	6923      	ldr	r3, [r4, #16]
 8005922:	4642      	mov	r2, r8
 8005924:	4631      	mov	r1, r6
 8005926:	4628      	mov	r0, r5
 8005928:	47b8      	blx	r7
 800592a:	3001      	adds	r0, #1
 800592c:	d12c      	bne.n	8005988 <_printf_float+0x250>
 800592e:	e764      	b.n	80057fa <_printf_float+0xc2>
 8005930:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005934:	f240 80e0 	bls.w	8005af8 <_printf_float+0x3c0>
 8005938:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800593c:	2200      	movs	r2, #0
 800593e:	2300      	movs	r3, #0
 8005940:	f7fb f8d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005944:	2800      	cmp	r0, #0
 8005946:	d034      	beq.n	80059b2 <_printf_float+0x27a>
 8005948:	4a37      	ldr	r2, [pc, #220]	; (8005a28 <_printf_float+0x2f0>)
 800594a:	2301      	movs	r3, #1
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	47b8      	blx	r7
 8005952:	3001      	adds	r0, #1
 8005954:	f43f af51 	beq.w	80057fa <_printf_float+0xc2>
 8005958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800595c:	429a      	cmp	r2, r3
 800595e:	db02      	blt.n	8005966 <_printf_float+0x22e>
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	07d8      	lsls	r0, r3, #31
 8005964:	d510      	bpl.n	8005988 <_printf_float+0x250>
 8005966:	ee18 3a10 	vmov	r3, s16
 800596a:	4652      	mov	r2, sl
 800596c:	4631      	mov	r1, r6
 800596e:	4628      	mov	r0, r5
 8005970:	47b8      	blx	r7
 8005972:	3001      	adds	r0, #1
 8005974:	f43f af41 	beq.w	80057fa <_printf_float+0xc2>
 8005978:	f04f 0800 	mov.w	r8, #0
 800597c:	f104 091a 	add.w	r9, r4, #26
 8005980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005982:	3b01      	subs	r3, #1
 8005984:	4543      	cmp	r3, r8
 8005986:	dc09      	bgt.n	800599c <_printf_float+0x264>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	079b      	lsls	r3, r3, #30
 800598c:	f100 8105 	bmi.w	8005b9a <_printf_float+0x462>
 8005990:	68e0      	ldr	r0, [r4, #12]
 8005992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005994:	4298      	cmp	r0, r3
 8005996:	bfb8      	it	lt
 8005998:	4618      	movlt	r0, r3
 800599a:	e730      	b.n	80057fe <_printf_float+0xc6>
 800599c:	2301      	movs	r3, #1
 800599e:	464a      	mov	r2, r9
 80059a0:	4631      	mov	r1, r6
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b8      	blx	r7
 80059a6:	3001      	adds	r0, #1
 80059a8:	f43f af27 	beq.w	80057fa <_printf_float+0xc2>
 80059ac:	f108 0801 	add.w	r8, r8, #1
 80059b0:	e7e6      	b.n	8005980 <_printf_float+0x248>
 80059b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	dc39      	bgt.n	8005a2c <_printf_float+0x2f4>
 80059b8:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <_printf_float+0x2f0>)
 80059ba:	2301      	movs	r3, #1
 80059bc:	4631      	mov	r1, r6
 80059be:	4628      	mov	r0, r5
 80059c0:	47b8      	blx	r7
 80059c2:	3001      	adds	r0, #1
 80059c4:	f43f af19 	beq.w	80057fa <_printf_float+0xc2>
 80059c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059cc:	4313      	orrs	r3, r2
 80059ce:	d102      	bne.n	80059d6 <_printf_float+0x29e>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	07d9      	lsls	r1, r3, #31
 80059d4:	d5d8      	bpl.n	8005988 <_printf_float+0x250>
 80059d6:	ee18 3a10 	vmov	r3, s16
 80059da:	4652      	mov	r2, sl
 80059dc:	4631      	mov	r1, r6
 80059de:	4628      	mov	r0, r5
 80059e0:	47b8      	blx	r7
 80059e2:	3001      	adds	r0, #1
 80059e4:	f43f af09 	beq.w	80057fa <_printf_float+0xc2>
 80059e8:	f04f 0900 	mov.w	r9, #0
 80059ec:	f104 0a1a 	add.w	sl, r4, #26
 80059f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f2:	425b      	negs	r3, r3
 80059f4:	454b      	cmp	r3, r9
 80059f6:	dc01      	bgt.n	80059fc <_printf_float+0x2c4>
 80059f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059fa:	e792      	b.n	8005922 <_printf_float+0x1ea>
 80059fc:	2301      	movs	r3, #1
 80059fe:	4652      	mov	r2, sl
 8005a00:	4631      	mov	r1, r6
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b8      	blx	r7
 8005a06:	3001      	adds	r0, #1
 8005a08:	f43f aef7 	beq.w	80057fa <_printf_float+0xc2>
 8005a0c:	f109 0901 	add.w	r9, r9, #1
 8005a10:	e7ee      	b.n	80059f0 <_printf_float+0x2b8>
 8005a12:	bf00      	nop
 8005a14:	7fefffff 	.word	0x7fefffff
 8005a18:	08062a98 	.word	0x08062a98
 8005a1c:	08062a9c 	.word	0x08062a9c
 8005a20:	08062aa4 	.word	0x08062aa4
 8005a24:	08062aa0 	.word	0x08062aa0
 8005a28:	08062aa8 	.word	0x08062aa8
 8005a2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a30:	429a      	cmp	r2, r3
 8005a32:	bfa8      	it	ge
 8005a34:	461a      	movge	r2, r3
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	4691      	mov	r9, r2
 8005a3a:	dc37      	bgt.n	8005aac <_printf_float+0x374>
 8005a3c:	f04f 0b00 	mov.w	fp, #0
 8005a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a44:	f104 021a 	add.w	r2, r4, #26
 8005a48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a4a:	9305      	str	r3, [sp, #20]
 8005a4c:	eba3 0309 	sub.w	r3, r3, r9
 8005a50:	455b      	cmp	r3, fp
 8005a52:	dc33      	bgt.n	8005abc <_printf_float+0x384>
 8005a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	db3b      	blt.n	8005ad4 <_printf_float+0x39c>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	07da      	lsls	r2, r3, #31
 8005a60:	d438      	bmi.n	8005ad4 <_printf_float+0x39c>
 8005a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a64:	9b05      	ldr	r3, [sp, #20]
 8005a66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	eba2 0901 	sub.w	r9, r2, r1
 8005a6e:	4599      	cmp	r9, r3
 8005a70:	bfa8      	it	ge
 8005a72:	4699      	movge	r9, r3
 8005a74:	f1b9 0f00 	cmp.w	r9, #0
 8005a78:	dc35      	bgt.n	8005ae6 <_printf_float+0x3ae>
 8005a7a:	f04f 0800 	mov.w	r8, #0
 8005a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a82:	f104 0a1a 	add.w	sl, r4, #26
 8005a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	eba3 0309 	sub.w	r3, r3, r9
 8005a90:	4543      	cmp	r3, r8
 8005a92:	f77f af79 	ble.w	8005988 <_printf_float+0x250>
 8005a96:	2301      	movs	r3, #1
 8005a98:	4652      	mov	r2, sl
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f aeaa 	beq.w	80057fa <_printf_float+0xc2>
 8005aa6:	f108 0801 	add.w	r8, r8, #1
 8005aaa:	e7ec      	b.n	8005a86 <_printf_float+0x34e>
 8005aac:	4613      	mov	r3, r2
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	d1c0      	bne.n	8005a3c <_printf_float+0x304>
 8005aba:	e69e      	b.n	80057fa <_printf_float+0xc2>
 8005abc:	2301      	movs	r3, #1
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	9205      	str	r2, [sp, #20]
 8005ac4:	47b8      	blx	r7
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	f43f ae97 	beq.w	80057fa <_printf_float+0xc2>
 8005acc:	9a05      	ldr	r2, [sp, #20]
 8005ace:	f10b 0b01 	add.w	fp, fp, #1
 8005ad2:	e7b9      	b.n	8005a48 <_printf_float+0x310>
 8005ad4:	ee18 3a10 	vmov	r3, s16
 8005ad8:	4652      	mov	r2, sl
 8005ada:	4631      	mov	r1, r6
 8005adc:	4628      	mov	r0, r5
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d1be      	bne.n	8005a62 <_printf_float+0x32a>
 8005ae4:	e689      	b.n	80057fa <_printf_float+0xc2>
 8005ae6:	9a05      	ldr	r2, [sp, #20]
 8005ae8:	464b      	mov	r3, r9
 8005aea:	4442      	add	r2, r8
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	d1c1      	bne.n	8005a7a <_printf_float+0x342>
 8005af6:	e680      	b.n	80057fa <_printf_float+0xc2>
 8005af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005afa:	2a01      	cmp	r2, #1
 8005afc:	dc01      	bgt.n	8005b02 <_printf_float+0x3ca>
 8005afe:	07db      	lsls	r3, r3, #31
 8005b00:	d538      	bpl.n	8005b74 <_printf_float+0x43c>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4642      	mov	r2, r8
 8005b06:	4631      	mov	r1, r6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	f43f ae74 	beq.w	80057fa <_printf_float+0xc2>
 8005b12:	ee18 3a10 	vmov	r3, s16
 8005b16:	4652      	mov	r2, sl
 8005b18:	4631      	mov	r1, r6
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	47b8      	blx	r7
 8005b1e:	3001      	adds	r0, #1
 8005b20:	f43f ae6b 	beq.w	80057fa <_printf_float+0xc2>
 8005b24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f7fa ffdc 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b30:	b9d8      	cbnz	r0, 8005b6a <_printf_float+0x432>
 8005b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b34:	f108 0201 	add.w	r2, r8, #1
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	d10e      	bne.n	8005b62 <_printf_float+0x42a>
 8005b44:	e659      	b.n	80057fa <_printf_float+0xc2>
 8005b46:	2301      	movs	r3, #1
 8005b48:	4652      	mov	r2, sl
 8005b4a:	4631      	mov	r1, r6
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	47b8      	blx	r7
 8005b50:	3001      	adds	r0, #1
 8005b52:	f43f ae52 	beq.w	80057fa <_printf_float+0xc2>
 8005b56:	f108 0801 	add.w	r8, r8, #1
 8005b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	4543      	cmp	r3, r8
 8005b60:	dcf1      	bgt.n	8005b46 <_printf_float+0x40e>
 8005b62:	464b      	mov	r3, r9
 8005b64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b68:	e6dc      	b.n	8005924 <_printf_float+0x1ec>
 8005b6a:	f04f 0800 	mov.w	r8, #0
 8005b6e:	f104 0a1a 	add.w	sl, r4, #26
 8005b72:	e7f2      	b.n	8005b5a <_printf_float+0x422>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4642      	mov	r2, r8
 8005b78:	e7df      	b.n	8005b3a <_printf_float+0x402>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	464a      	mov	r2, r9
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	f43f ae38 	beq.w	80057fa <_printf_float+0xc2>
 8005b8a:	f108 0801 	add.w	r8, r8, #1
 8005b8e:	68e3      	ldr	r3, [r4, #12]
 8005b90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b92:	1a5b      	subs	r3, r3, r1
 8005b94:	4543      	cmp	r3, r8
 8005b96:	dcf0      	bgt.n	8005b7a <_printf_float+0x442>
 8005b98:	e6fa      	b.n	8005990 <_printf_float+0x258>
 8005b9a:	f04f 0800 	mov.w	r8, #0
 8005b9e:	f104 0919 	add.w	r9, r4, #25
 8005ba2:	e7f4      	b.n	8005b8e <_printf_float+0x456>

08005ba4 <_printf_common>:
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	4616      	mov	r6, r2
 8005baa:	4699      	mov	r9, r3
 8005bac:	688a      	ldr	r2, [r1, #8]
 8005bae:	690b      	ldr	r3, [r1, #16]
 8005bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	bfb8      	it	lt
 8005bb8:	4613      	movlt	r3, r2
 8005bba:	6033      	str	r3, [r6, #0]
 8005bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	b10a      	cbz	r2, 8005bca <_printf_common+0x26>
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	6033      	str	r3, [r6, #0]
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	0699      	lsls	r1, r3, #26
 8005bce:	bf42      	ittt	mi
 8005bd0:	6833      	ldrmi	r3, [r6, #0]
 8005bd2:	3302      	addmi	r3, #2
 8005bd4:	6033      	strmi	r3, [r6, #0]
 8005bd6:	6825      	ldr	r5, [r4, #0]
 8005bd8:	f015 0506 	ands.w	r5, r5, #6
 8005bdc:	d106      	bne.n	8005bec <_printf_common+0x48>
 8005bde:	f104 0a19 	add.w	sl, r4, #25
 8005be2:	68e3      	ldr	r3, [r4, #12]
 8005be4:	6832      	ldr	r2, [r6, #0]
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	42ab      	cmp	r3, r5
 8005bea:	dc26      	bgt.n	8005c3a <_printf_common+0x96>
 8005bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bf0:	1e13      	subs	r3, r2, #0
 8005bf2:	6822      	ldr	r2, [r4, #0]
 8005bf4:	bf18      	it	ne
 8005bf6:	2301      	movne	r3, #1
 8005bf8:	0692      	lsls	r2, r2, #26
 8005bfa:	d42b      	bmi.n	8005c54 <_printf_common+0xb0>
 8005bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c00:	4649      	mov	r1, r9
 8005c02:	4638      	mov	r0, r7
 8005c04:	47c0      	blx	r8
 8005c06:	3001      	adds	r0, #1
 8005c08:	d01e      	beq.n	8005c48 <_printf_common+0xa4>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	68e5      	ldr	r5, [r4, #12]
 8005c0e:	6832      	ldr	r2, [r6, #0]
 8005c10:	f003 0306 	and.w	r3, r3, #6
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	bf08      	it	eq
 8005c18:	1aad      	subeq	r5, r5, r2
 8005c1a:	68a3      	ldr	r3, [r4, #8]
 8005c1c:	6922      	ldr	r2, [r4, #16]
 8005c1e:	bf0c      	ite	eq
 8005c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c24:	2500      	movne	r5, #0
 8005c26:	4293      	cmp	r3, r2
 8005c28:	bfc4      	itt	gt
 8005c2a:	1a9b      	subgt	r3, r3, r2
 8005c2c:	18ed      	addgt	r5, r5, r3
 8005c2e:	2600      	movs	r6, #0
 8005c30:	341a      	adds	r4, #26
 8005c32:	42b5      	cmp	r5, r6
 8005c34:	d11a      	bne.n	8005c6c <_printf_common+0xc8>
 8005c36:	2000      	movs	r0, #0
 8005c38:	e008      	b.n	8005c4c <_printf_common+0xa8>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4638      	mov	r0, r7
 8005c42:	47c0      	blx	r8
 8005c44:	3001      	adds	r0, #1
 8005c46:	d103      	bne.n	8005c50 <_printf_common+0xac>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c50:	3501      	adds	r5, #1
 8005c52:	e7c6      	b.n	8005be2 <_printf_common+0x3e>
 8005c54:	18e1      	adds	r1, r4, r3
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	2030      	movs	r0, #48	; 0x30
 8005c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c5e:	4422      	add	r2, r4
 8005c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c68:	3302      	adds	r3, #2
 8005c6a:	e7c7      	b.n	8005bfc <_printf_common+0x58>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	4622      	mov	r2, r4
 8005c70:	4649      	mov	r1, r9
 8005c72:	4638      	mov	r0, r7
 8005c74:	47c0      	blx	r8
 8005c76:	3001      	adds	r0, #1
 8005c78:	d0e6      	beq.n	8005c48 <_printf_common+0xa4>
 8005c7a:	3601      	adds	r6, #1
 8005c7c:	e7d9      	b.n	8005c32 <_printf_common+0x8e>
	...

08005c80 <_printf_i>:
 8005c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c84:	460c      	mov	r4, r1
 8005c86:	4691      	mov	r9, r2
 8005c88:	7e27      	ldrb	r7, [r4, #24]
 8005c8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c8c:	2f78      	cmp	r7, #120	; 0x78
 8005c8e:	4680      	mov	r8, r0
 8005c90:	469a      	mov	sl, r3
 8005c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c96:	d807      	bhi.n	8005ca8 <_printf_i+0x28>
 8005c98:	2f62      	cmp	r7, #98	; 0x62
 8005c9a:	d80a      	bhi.n	8005cb2 <_printf_i+0x32>
 8005c9c:	2f00      	cmp	r7, #0
 8005c9e:	f000 80d8 	beq.w	8005e52 <_printf_i+0x1d2>
 8005ca2:	2f58      	cmp	r7, #88	; 0x58
 8005ca4:	f000 80a3 	beq.w	8005dee <_printf_i+0x16e>
 8005ca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cb0:	e03a      	b.n	8005d28 <_printf_i+0xa8>
 8005cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cb6:	2b15      	cmp	r3, #21
 8005cb8:	d8f6      	bhi.n	8005ca8 <_printf_i+0x28>
 8005cba:	a001      	add	r0, pc, #4	; (adr r0, 8005cc0 <_printf_i+0x40>)
 8005cbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cc0:	08005d19 	.word	0x08005d19
 8005cc4:	08005d2d 	.word	0x08005d2d
 8005cc8:	08005ca9 	.word	0x08005ca9
 8005ccc:	08005ca9 	.word	0x08005ca9
 8005cd0:	08005ca9 	.word	0x08005ca9
 8005cd4:	08005ca9 	.word	0x08005ca9
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005ca9 	.word	0x08005ca9
 8005ce0:	08005ca9 	.word	0x08005ca9
 8005ce4:	08005ca9 	.word	0x08005ca9
 8005ce8:	08005ca9 	.word	0x08005ca9
 8005cec:	08005e39 	.word	0x08005e39
 8005cf0:	08005d5d 	.word	0x08005d5d
 8005cf4:	08005e1b 	.word	0x08005e1b
 8005cf8:	08005ca9 	.word	0x08005ca9
 8005cfc:	08005ca9 	.word	0x08005ca9
 8005d00:	08005e5b 	.word	0x08005e5b
 8005d04:	08005ca9 	.word	0x08005ca9
 8005d08:	08005d5d 	.word	0x08005d5d
 8005d0c:	08005ca9 	.word	0x08005ca9
 8005d10:	08005ca9 	.word	0x08005ca9
 8005d14:	08005e23 	.word	0x08005e23
 8005d18:	680b      	ldr	r3, [r1, #0]
 8005d1a:	1d1a      	adds	r2, r3, #4
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	600a      	str	r2, [r1, #0]
 8005d20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e0a3      	b.n	8005e74 <_printf_i+0x1f4>
 8005d2c:	6825      	ldr	r5, [r4, #0]
 8005d2e:	6808      	ldr	r0, [r1, #0]
 8005d30:	062e      	lsls	r6, r5, #24
 8005d32:	f100 0304 	add.w	r3, r0, #4
 8005d36:	d50a      	bpl.n	8005d4e <_printf_i+0xce>
 8005d38:	6805      	ldr	r5, [r0, #0]
 8005d3a:	600b      	str	r3, [r1, #0]
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	da03      	bge.n	8005d48 <_printf_i+0xc8>
 8005d40:	232d      	movs	r3, #45	; 0x2d
 8005d42:	426d      	negs	r5, r5
 8005d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d48:	485e      	ldr	r0, [pc, #376]	; (8005ec4 <_printf_i+0x244>)
 8005d4a:	230a      	movs	r3, #10
 8005d4c:	e019      	b.n	8005d82 <_printf_i+0x102>
 8005d4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d52:	6805      	ldr	r5, [r0, #0]
 8005d54:	600b      	str	r3, [r1, #0]
 8005d56:	bf18      	it	ne
 8005d58:	b22d      	sxthne	r5, r5
 8005d5a:	e7ef      	b.n	8005d3c <_printf_i+0xbc>
 8005d5c:	680b      	ldr	r3, [r1, #0]
 8005d5e:	6825      	ldr	r5, [r4, #0]
 8005d60:	1d18      	adds	r0, r3, #4
 8005d62:	6008      	str	r0, [r1, #0]
 8005d64:	0628      	lsls	r0, r5, #24
 8005d66:	d501      	bpl.n	8005d6c <_printf_i+0xec>
 8005d68:	681d      	ldr	r5, [r3, #0]
 8005d6a:	e002      	b.n	8005d72 <_printf_i+0xf2>
 8005d6c:	0669      	lsls	r1, r5, #25
 8005d6e:	d5fb      	bpl.n	8005d68 <_printf_i+0xe8>
 8005d70:	881d      	ldrh	r5, [r3, #0]
 8005d72:	4854      	ldr	r0, [pc, #336]	; (8005ec4 <_printf_i+0x244>)
 8005d74:	2f6f      	cmp	r7, #111	; 0x6f
 8005d76:	bf0c      	ite	eq
 8005d78:	2308      	moveq	r3, #8
 8005d7a:	230a      	movne	r3, #10
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d82:	6866      	ldr	r6, [r4, #4]
 8005d84:	60a6      	str	r6, [r4, #8]
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	bfa2      	ittt	ge
 8005d8a:	6821      	ldrge	r1, [r4, #0]
 8005d8c:	f021 0104 	bicge.w	r1, r1, #4
 8005d90:	6021      	strge	r1, [r4, #0]
 8005d92:	b90d      	cbnz	r5, 8005d98 <_printf_i+0x118>
 8005d94:	2e00      	cmp	r6, #0
 8005d96:	d04d      	beq.n	8005e34 <_printf_i+0x1b4>
 8005d98:	4616      	mov	r6, r2
 8005d9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d9e:	fb03 5711 	mls	r7, r3, r1, r5
 8005da2:	5dc7      	ldrb	r7, [r0, r7]
 8005da4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005da8:	462f      	mov	r7, r5
 8005daa:	42bb      	cmp	r3, r7
 8005dac:	460d      	mov	r5, r1
 8005dae:	d9f4      	bls.n	8005d9a <_printf_i+0x11a>
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d10b      	bne.n	8005dcc <_printf_i+0x14c>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	07df      	lsls	r7, r3, #31
 8005db8:	d508      	bpl.n	8005dcc <_printf_i+0x14c>
 8005dba:	6923      	ldr	r3, [r4, #16]
 8005dbc:	6861      	ldr	r1, [r4, #4]
 8005dbe:	4299      	cmp	r1, r3
 8005dc0:	bfde      	ittt	le
 8005dc2:	2330      	movle	r3, #48	; 0x30
 8005dc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dcc:	1b92      	subs	r2, r2, r6
 8005dce:	6122      	str	r2, [r4, #16]
 8005dd0:	f8cd a000 	str.w	sl, [sp]
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	aa03      	add	r2, sp, #12
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4640      	mov	r0, r8
 8005ddc:	f7ff fee2 	bl	8005ba4 <_printf_common>
 8005de0:	3001      	adds	r0, #1
 8005de2:	d14c      	bne.n	8005e7e <_printf_i+0x1fe>
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	b004      	add	sp, #16
 8005dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dee:	4835      	ldr	r0, [pc, #212]	; (8005ec4 <_printf_i+0x244>)
 8005df0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	680e      	ldr	r6, [r1, #0]
 8005df8:	061f      	lsls	r7, r3, #24
 8005dfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dfe:	600e      	str	r6, [r1, #0]
 8005e00:	d514      	bpl.n	8005e2c <_printf_i+0x1ac>
 8005e02:	07d9      	lsls	r1, r3, #31
 8005e04:	bf44      	itt	mi
 8005e06:	f043 0320 	orrmi.w	r3, r3, #32
 8005e0a:	6023      	strmi	r3, [r4, #0]
 8005e0c:	b91d      	cbnz	r5, 8005e16 <_printf_i+0x196>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	f023 0320 	bic.w	r3, r3, #32
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	2310      	movs	r3, #16
 8005e18:	e7b0      	b.n	8005d7c <_printf_i+0xfc>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	f043 0320 	orr.w	r3, r3, #32
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	2378      	movs	r3, #120	; 0x78
 8005e24:	4828      	ldr	r0, [pc, #160]	; (8005ec8 <_printf_i+0x248>)
 8005e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e2a:	e7e3      	b.n	8005df4 <_printf_i+0x174>
 8005e2c:	065e      	lsls	r6, r3, #25
 8005e2e:	bf48      	it	mi
 8005e30:	b2ad      	uxthmi	r5, r5
 8005e32:	e7e6      	b.n	8005e02 <_printf_i+0x182>
 8005e34:	4616      	mov	r6, r2
 8005e36:	e7bb      	b.n	8005db0 <_printf_i+0x130>
 8005e38:	680b      	ldr	r3, [r1, #0]
 8005e3a:	6826      	ldr	r6, [r4, #0]
 8005e3c:	6960      	ldr	r0, [r4, #20]
 8005e3e:	1d1d      	adds	r5, r3, #4
 8005e40:	600d      	str	r5, [r1, #0]
 8005e42:	0635      	lsls	r5, r6, #24
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	d501      	bpl.n	8005e4c <_printf_i+0x1cc>
 8005e48:	6018      	str	r0, [r3, #0]
 8005e4a:	e002      	b.n	8005e52 <_printf_i+0x1d2>
 8005e4c:	0671      	lsls	r1, r6, #25
 8005e4e:	d5fb      	bpl.n	8005e48 <_printf_i+0x1c8>
 8005e50:	8018      	strh	r0, [r3, #0]
 8005e52:	2300      	movs	r3, #0
 8005e54:	6123      	str	r3, [r4, #16]
 8005e56:	4616      	mov	r6, r2
 8005e58:	e7ba      	b.n	8005dd0 <_printf_i+0x150>
 8005e5a:	680b      	ldr	r3, [r1, #0]
 8005e5c:	1d1a      	adds	r2, r3, #4
 8005e5e:	600a      	str	r2, [r1, #0]
 8005e60:	681e      	ldr	r6, [r3, #0]
 8005e62:	6862      	ldr	r2, [r4, #4]
 8005e64:	2100      	movs	r1, #0
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7fa f9ca 	bl	8000200 <memchr>
 8005e6c:	b108      	cbz	r0, 8005e72 <_printf_i+0x1f2>
 8005e6e:	1b80      	subs	r0, r0, r6
 8005e70:	6060      	str	r0, [r4, #4]
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	6123      	str	r3, [r4, #16]
 8005e76:	2300      	movs	r3, #0
 8005e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e7c:	e7a8      	b.n	8005dd0 <_printf_i+0x150>
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	4632      	mov	r2, r6
 8005e82:	4649      	mov	r1, r9
 8005e84:	4640      	mov	r0, r8
 8005e86:	47d0      	blx	sl
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d0ab      	beq.n	8005de4 <_printf_i+0x164>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	079b      	lsls	r3, r3, #30
 8005e90:	d413      	bmi.n	8005eba <_printf_i+0x23a>
 8005e92:	68e0      	ldr	r0, [r4, #12]
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	4298      	cmp	r0, r3
 8005e98:	bfb8      	it	lt
 8005e9a:	4618      	movlt	r0, r3
 8005e9c:	e7a4      	b.n	8005de8 <_printf_i+0x168>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4632      	mov	r2, r6
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	47d0      	blx	sl
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d09b      	beq.n	8005de4 <_printf_i+0x164>
 8005eac:	3501      	adds	r5, #1
 8005eae:	68e3      	ldr	r3, [r4, #12]
 8005eb0:	9903      	ldr	r1, [sp, #12]
 8005eb2:	1a5b      	subs	r3, r3, r1
 8005eb4:	42ab      	cmp	r3, r5
 8005eb6:	dcf2      	bgt.n	8005e9e <_printf_i+0x21e>
 8005eb8:	e7eb      	b.n	8005e92 <_printf_i+0x212>
 8005eba:	2500      	movs	r5, #0
 8005ebc:	f104 0619 	add.w	r6, r4, #25
 8005ec0:	e7f5      	b.n	8005eae <_printf_i+0x22e>
 8005ec2:	bf00      	nop
 8005ec4:	08062aaa 	.word	0x08062aaa
 8005ec8:	08062abb 	.word	0x08062abb

08005ecc <iprintf>:
 8005ecc:	b40f      	push	{r0, r1, r2, r3}
 8005ece:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <iprintf+0x2c>)
 8005ed0:	b513      	push	{r0, r1, r4, lr}
 8005ed2:	681c      	ldr	r4, [r3, #0]
 8005ed4:	b124      	cbz	r4, 8005ee0 <iprintf+0x14>
 8005ed6:	69a3      	ldr	r3, [r4, #24]
 8005ed8:	b913      	cbnz	r3, 8005ee0 <iprintf+0x14>
 8005eda:	4620      	mov	r0, r4
 8005edc:	f001 f906 	bl	80070ec <__sinit>
 8005ee0:	ab05      	add	r3, sp, #20
 8005ee2:	9a04      	ldr	r2, [sp, #16]
 8005ee4:	68a1      	ldr	r1, [r4, #8]
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f001 ff4d 	bl	8007d88 <_vfiprintf_r>
 8005eee:	b002      	add	sp, #8
 8005ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef4:	b004      	add	sp, #16
 8005ef6:	4770      	bx	lr
 8005ef8:	20000648 	.word	0x20000648

08005efc <_puts_r>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	460e      	mov	r6, r1
 8005f00:	4605      	mov	r5, r0
 8005f02:	b118      	cbz	r0, 8005f0c <_puts_r+0x10>
 8005f04:	6983      	ldr	r3, [r0, #24]
 8005f06:	b90b      	cbnz	r3, 8005f0c <_puts_r+0x10>
 8005f08:	f001 f8f0 	bl	80070ec <__sinit>
 8005f0c:	69ab      	ldr	r3, [r5, #24]
 8005f0e:	68ac      	ldr	r4, [r5, #8]
 8005f10:	b913      	cbnz	r3, 8005f18 <_puts_r+0x1c>
 8005f12:	4628      	mov	r0, r5
 8005f14:	f001 f8ea 	bl	80070ec <__sinit>
 8005f18:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <_puts_r+0xd0>)
 8005f1a:	429c      	cmp	r4, r3
 8005f1c:	d120      	bne.n	8005f60 <_puts_r+0x64>
 8005f1e:	686c      	ldr	r4, [r5, #4]
 8005f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f22:	07db      	lsls	r3, r3, #31
 8005f24:	d405      	bmi.n	8005f32 <_puts_r+0x36>
 8005f26:	89a3      	ldrh	r3, [r4, #12]
 8005f28:	0598      	lsls	r0, r3, #22
 8005f2a:	d402      	bmi.n	8005f32 <_puts_r+0x36>
 8005f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f2e:	f001 f980 	bl	8007232 <__retarget_lock_acquire_recursive>
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	0719      	lsls	r1, r3, #28
 8005f36:	d51d      	bpl.n	8005f74 <_puts_r+0x78>
 8005f38:	6923      	ldr	r3, [r4, #16]
 8005f3a:	b1db      	cbz	r3, 8005f74 <_puts_r+0x78>
 8005f3c:	3e01      	subs	r6, #1
 8005f3e:	68a3      	ldr	r3, [r4, #8]
 8005f40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f44:	3b01      	subs	r3, #1
 8005f46:	60a3      	str	r3, [r4, #8]
 8005f48:	bb39      	cbnz	r1, 8005f9a <_puts_r+0x9e>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da38      	bge.n	8005fc0 <_puts_r+0xc4>
 8005f4e:	4622      	mov	r2, r4
 8005f50:	210a      	movs	r1, #10
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f878 	bl	8006048 <__swbuf_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d011      	beq.n	8005f80 <_puts_r+0x84>
 8005f5c:	250a      	movs	r5, #10
 8005f5e:	e011      	b.n	8005f84 <_puts_r+0x88>
 8005f60:	4b1b      	ldr	r3, [pc, #108]	; (8005fd0 <_puts_r+0xd4>)
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d101      	bne.n	8005f6a <_puts_r+0x6e>
 8005f66:	68ac      	ldr	r4, [r5, #8]
 8005f68:	e7da      	b.n	8005f20 <_puts_r+0x24>
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	; (8005fd4 <_puts_r+0xd8>)
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	bf08      	it	eq
 8005f70:	68ec      	ldreq	r4, [r5, #12]
 8005f72:	e7d5      	b.n	8005f20 <_puts_r+0x24>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f8b8 	bl	80060ec <__swsetup_r>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	d0dd      	beq.n	8005f3c <_puts_r+0x40>
 8005f80:	f04f 35ff 	mov.w	r5, #4294967295
 8005f84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f86:	07da      	lsls	r2, r3, #31
 8005f88:	d405      	bmi.n	8005f96 <_puts_r+0x9a>
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	d402      	bmi.n	8005f96 <_puts_r+0x9a>
 8005f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f92:	f001 f94f 	bl	8007234 <__retarget_lock_release_recursive>
 8005f96:	4628      	mov	r0, r5
 8005f98:	bd70      	pop	{r4, r5, r6, pc}
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da04      	bge.n	8005fa8 <_puts_r+0xac>
 8005f9e:	69a2      	ldr	r2, [r4, #24]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	dc06      	bgt.n	8005fb2 <_puts_r+0xb6>
 8005fa4:	290a      	cmp	r1, #10
 8005fa6:	d004      	beq.n	8005fb2 <_puts_r+0xb6>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	7019      	strb	r1, [r3, #0]
 8005fb0:	e7c5      	b.n	8005f3e <_puts_r+0x42>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 f847 	bl	8006048 <__swbuf_r>
 8005fba:	3001      	adds	r0, #1
 8005fbc:	d1bf      	bne.n	8005f3e <_puts_r+0x42>
 8005fbe:	e7df      	b.n	8005f80 <_puts_r+0x84>
 8005fc0:	6823      	ldr	r3, [r4, #0]
 8005fc2:	250a      	movs	r5, #10
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	6022      	str	r2, [r4, #0]
 8005fc8:	701d      	strb	r5, [r3, #0]
 8005fca:	e7db      	b.n	8005f84 <_puts_r+0x88>
 8005fcc:	08062b80 	.word	0x08062b80
 8005fd0:	08062ba0 	.word	0x08062ba0
 8005fd4:	08062b60 	.word	0x08062b60

08005fd8 <puts>:
 8005fd8:	4b02      	ldr	r3, [pc, #8]	; (8005fe4 <puts+0xc>)
 8005fda:	4601      	mov	r1, r0
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	f7ff bf8d 	b.w	8005efc <_puts_r>
 8005fe2:	bf00      	nop
 8005fe4:	20000648 	.word	0x20000648

08005fe8 <_sbrk_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d06      	ldr	r5, [pc, #24]	; (8006004 <_sbrk_r+0x1c>)
 8005fec:	2300      	movs	r3, #0
 8005fee:	4604      	mov	r4, r0
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	602b      	str	r3, [r5, #0]
 8005ff4:	f7fd fdca 	bl	8003b8c <_sbrk>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_sbrk_r+0x1a>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_sbrk_r+0x1a>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20001fb8 	.word	0x20001fb8

08006008 <siprintf>:
 8006008:	b40e      	push	{r1, r2, r3}
 800600a:	b500      	push	{lr}
 800600c:	b09c      	sub	sp, #112	; 0x70
 800600e:	ab1d      	add	r3, sp, #116	; 0x74
 8006010:	9002      	str	r0, [sp, #8]
 8006012:	9006      	str	r0, [sp, #24]
 8006014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006018:	4809      	ldr	r0, [pc, #36]	; (8006040 <siprintf+0x38>)
 800601a:	9107      	str	r1, [sp, #28]
 800601c:	9104      	str	r1, [sp, #16]
 800601e:	4909      	ldr	r1, [pc, #36]	; (8006044 <siprintf+0x3c>)
 8006020:	f853 2b04 	ldr.w	r2, [r3], #4
 8006024:	9105      	str	r1, [sp, #20]
 8006026:	6800      	ldr	r0, [r0, #0]
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	a902      	add	r1, sp, #8
 800602c:	f001 fd82 	bl	8007b34 <_svfiprintf_r>
 8006030:	9b02      	ldr	r3, [sp, #8]
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	b01c      	add	sp, #112	; 0x70
 8006038:	f85d eb04 	ldr.w	lr, [sp], #4
 800603c:	b003      	add	sp, #12
 800603e:	4770      	bx	lr
 8006040:	20000648 	.word	0x20000648
 8006044:	ffff0208 	.word	0xffff0208

08006048 <__swbuf_r>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	460e      	mov	r6, r1
 800604c:	4614      	mov	r4, r2
 800604e:	4605      	mov	r5, r0
 8006050:	b118      	cbz	r0, 800605a <__swbuf_r+0x12>
 8006052:	6983      	ldr	r3, [r0, #24]
 8006054:	b90b      	cbnz	r3, 800605a <__swbuf_r+0x12>
 8006056:	f001 f849 	bl	80070ec <__sinit>
 800605a:	4b21      	ldr	r3, [pc, #132]	; (80060e0 <__swbuf_r+0x98>)
 800605c:	429c      	cmp	r4, r3
 800605e:	d12b      	bne.n	80060b8 <__swbuf_r+0x70>
 8006060:	686c      	ldr	r4, [r5, #4]
 8006062:	69a3      	ldr	r3, [r4, #24]
 8006064:	60a3      	str	r3, [r4, #8]
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	071a      	lsls	r2, r3, #28
 800606a:	d52f      	bpl.n	80060cc <__swbuf_r+0x84>
 800606c:	6923      	ldr	r3, [r4, #16]
 800606e:	b36b      	cbz	r3, 80060cc <__swbuf_r+0x84>
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	6820      	ldr	r0, [r4, #0]
 8006074:	1ac0      	subs	r0, r0, r3
 8006076:	6963      	ldr	r3, [r4, #20]
 8006078:	b2f6      	uxtb	r6, r6
 800607a:	4283      	cmp	r3, r0
 800607c:	4637      	mov	r7, r6
 800607e:	dc04      	bgt.n	800608a <__swbuf_r+0x42>
 8006080:	4621      	mov	r1, r4
 8006082:	4628      	mov	r0, r5
 8006084:	f000 ff9e 	bl	8006fc4 <_fflush_r>
 8006088:	bb30      	cbnz	r0, 80060d8 <__swbuf_r+0x90>
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	3b01      	subs	r3, #1
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	6022      	str	r2, [r4, #0]
 8006096:	701e      	strb	r6, [r3, #0]
 8006098:	6963      	ldr	r3, [r4, #20]
 800609a:	3001      	adds	r0, #1
 800609c:	4283      	cmp	r3, r0
 800609e:	d004      	beq.n	80060aa <__swbuf_r+0x62>
 80060a0:	89a3      	ldrh	r3, [r4, #12]
 80060a2:	07db      	lsls	r3, r3, #31
 80060a4:	d506      	bpl.n	80060b4 <__swbuf_r+0x6c>
 80060a6:	2e0a      	cmp	r6, #10
 80060a8:	d104      	bne.n	80060b4 <__swbuf_r+0x6c>
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 ff89 	bl	8006fc4 <_fflush_r>
 80060b2:	b988      	cbnz	r0, 80060d8 <__swbuf_r+0x90>
 80060b4:	4638      	mov	r0, r7
 80060b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b8:	4b0a      	ldr	r3, [pc, #40]	; (80060e4 <__swbuf_r+0x9c>)
 80060ba:	429c      	cmp	r4, r3
 80060bc:	d101      	bne.n	80060c2 <__swbuf_r+0x7a>
 80060be:	68ac      	ldr	r4, [r5, #8]
 80060c0:	e7cf      	b.n	8006062 <__swbuf_r+0x1a>
 80060c2:	4b09      	ldr	r3, [pc, #36]	; (80060e8 <__swbuf_r+0xa0>)
 80060c4:	429c      	cmp	r4, r3
 80060c6:	bf08      	it	eq
 80060c8:	68ec      	ldreq	r4, [r5, #12]
 80060ca:	e7ca      	b.n	8006062 <__swbuf_r+0x1a>
 80060cc:	4621      	mov	r1, r4
 80060ce:	4628      	mov	r0, r5
 80060d0:	f000 f80c 	bl	80060ec <__swsetup_r>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d0cb      	beq.n	8006070 <__swbuf_r+0x28>
 80060d8:	f04f 37ff 	mov.w	r7, #4294967295
 80060dc:	e7ea      	b.n	80060b4 <__swbuf_r+0x6c>
 80060de:	bf00      	nop
 80060e0:	08062b80 	.word	0x08062b80
 80060e4:	08062ba0 	.word	0x08062ba0
 80060e8:	08062b60 	.word	0x08062b60

080060ec <__swsetup_r>:
 80060ec:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <__swsetup_r+0xcc>)
 80060ee:	b570      	push	{r4, r5, r6, lr}
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	4606      	mov	r6, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	b125      	cbz	r5, 8006102 <__swsetup_r+0x16>
 80060f8:	69ab      	ldr	r3, [r5, #24]
 80060fa:	b913      	cbnz	r3, 8006102 <__swsetup_r+0x16>
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fff5 	bl	80070ec <__sinit>
 8006102:	4b2e      	ldr	r3, [pc, #184]	; (80061bc <__swsetup_r+0xd0>)
 8006104:	429c      	cmp	r4, r3
 8006106:	d10f      	bne.n	8006128 <__swsetup_r+0x3c>
 8006108:	686c      	ldr	r4, [r5, #4]
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006110:	0719      	lsls	r1, r3, #28
 8006112:	d42c      	bmi.n	800616e <__swsetup_r+0x82>
 8006114:	06dd      	lsls	r5, r3, #27
 8006116:	d411      	bmi.n	800613c <__swsetup_r+0x50>
 8006118:	2309      	movs	r3, #9
 800611a:	6033      	str	r3, [r6, #0]
 800611c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006120:	81a3      	strh	r3, [r4, #12]
 8006122:	f04f 30ff 	mov.w	r0, #4294967295
 8006126:	e03e      	b.n	80061a6 <__swsetup_r+0xba>
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <__swsetup_r+0xd4>)
 800612a:	429c      	cmp	r4, r3
 800612c:	d101      	bne.n	8006132 <__swsetup_r+0x46>
 800612e:	68ac      	ldr	r4, [r5, #8]
 8006130:	e7eb      	b.n	800610a <__swsetup_r+0x1e>
 8006132:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <__swsetup_r+0xd8>)
 8006134:	429c      	cmp	r4, r3
 8006136:	bf08      	it	eq
 8006138:	68ec      	ldreq	r4, [r5, #12]
 800613a:	e7e6      	b.n	800610a <__swsetup_r+0x1e>
 800613c:	0758      	lsls	r0, r3, #29
 800613e:	d512      	bpl.n	8006166 <__swsetup_r+0x7a>
 8006140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006142:	b141      	cbz	r1, 8006156 <__swsetup_r+0x6a>
 8006144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006148:	4299      	cmp	r1, r3
 800614a:	d002      	beq.n	8006152 <__swsetup_r+0x66>
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff f9a9 	bl	80054a4 <_free_r>
 8006152:	2300      	movs	r3, #0
 8006154:	6363      	str	r3, [r4, #52]	; 0x34
 8006156:	89a3      	ldrh	r3, [r4, #12]
 8006158:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800615c:	81a3      	strh	r3, [r4, #12]
 800615e:	2300      	movs	r3, #0
 8006160:	6063      	str	r3, [r4, #4]
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	f043 0308 	orr.w	r3, r3, #8
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	b94b      	cbnz	r3, 8006186 <__swsetup_r+0x9a>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617c:	d003      	beq.n	8006186 <__swsetup_r+0x9a>
 800617e:	4621      	mov	r1, r4
 8006180:	4630      	mov	r0, r6
 8006182:	f001 f87d 	bl	8007280 <__smakebuf_r>
 8006186:	89a0      	ldrh	r0, [r4, #12]
 8006188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800618c:	f010 0301 	ands.w	r3, r0, #1
 8006190:	d00a      	beq.n	80061a8 <__swsetup_r+0xbc>
 8006192:	2300      	movs	r3, #0
 8006194:	60a3      	str	r3, [r4, #8]
 8006196:	6963      	ldr	r3, [r4, #20]
 8006198:	425b      	negs	r3, r3
 800619a:	61a3      	str	r3, [r4, #24]
 800619c:	6923      	ldr	r3, [r4, #16]
 800619e:	b943      	cbnz	r3, 80061b2 <__swsetup_r+0xc6>
 80061a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061a4:	d1ba      	bne.n	800611c <__swsetup_r+0x30>
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	0781      	lsls	r1, r0, #30
 80061aa:	bf58      	it	pl
 80061ac:	6963      	ldrpl	r3, [r4, #20]
 80061ae:	60a3      	str	r3, [r4, #8]
 80061b0:	e7f4      	b.n	800619c <__swsetup_r+0xb0>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e7f7      	b.n	80061a6 <__swsetup_r+0xba>
 80061b6:	bf00      	nop
 80061b8:	20000648 	.word	0x20000648
 80061bc:	08062b80 	.word	0x08062b80
 80061c0:	08062ba0 	.word	0x08062ba0
 80061c4:	08062b60 	.word	0x08062b60

080061c8 <quorem>:
 80061c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	6903      	ldr	r3, [r0, #16]
 80061ce:	690c      	ldr	r4, [r1, #16]
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	4607      	mov	r7, r0
 80061d4:	f2c0 8081 	blt.w	80062da <quorem+0x112>
 80061d8:	3c01      	subs	r4, #1
 80061da:	f101 0814 	add.w	r8, r1, #20
 80061de:	f100 0514 	add.w	r5, r0, #20
 80061e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061f0:	3301      	adds	r3, #1
 80061f2:	429a      	cmp	r2, r3
 80061f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006200:	d331      	bcc.n	8006266 <quorem+0x9e>
 8006202:	f04f 0e00 	mov.w	lr, #0
 8006206:	4640      	mov	r0, r8
 8006208:	46ac      	mov	ip, r5
 800620a:	46f2      	mov	sl, lr
 800620c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006210:	b293      	uxth	r3, r2
 8006212:	fb06 e303 	mla	r3, r6, r3, lr
 8006216:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800621a:	b29b      	uxth	r3, r3
 800621c:	ebaa 0303 	sub.w	r3, sl, r3
 8006220:	0c12      	lsrs	r2, r2, #16
 8006222:	f8dc a000 	ldr.w	sl, [ip]
 8006226:	fb06 e202 	mla	r2, r6, r2, lr
 800622a:	fa13 f38a 	uxtah	r3, r3, sl
 800622e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006232:	fa1f fa82 	uxth.w	sl, r2
 8006236:	f8dc 2000 	ldr.w	r2, [ip]
 800623a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800623e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006248:	4581      	cmp	r9, r0
 800624a:	f84c 3b04 	str.w	r3, [ip], #4
 800624e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006252:	d2db      	bcs.n	800620c <quorem+0x44>
 8006254:	f855 300b 	ldr.w	r3, [r5, fp]
 8006258:	b92b      	cbnz	r3, 8006266 <quorem+0x9e>
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	3b04      	subs	r3, #4
 800625e:	429d      	cmp	r5, r3
 8006260:	461a      	mov	r2, r3
 8006262:	d32e      	bcc.n	80062c2 <quorem+0xfa>
 8006264:	613c      	str	r4, [r7, #16]
 8006266:	4638      	mov	r0, r7
 8006268:	f001 fad4 	bl	8007814 <__mcmp>
 800626c:	2800      	cmp	r0, #0
 800626e:	db24      	blt.n	80062ba <quorem+0xf2>
 8006270:	3601      	adds	r6, #1
 8006272:	4628      	mov	r0, r5
 8006274:	f04f 0c00 	mov.w	ip, #0
 8006278:	f858 2b04 	ldr.w	r2, [r8], #4
 800627c:	f8d0 e000 	ldr.w	lr, [r0]
 8006280:	b293      	uxth	r3, r2
 8006282:	ebac 0303 	sub.w	r3, ip, r3
 8006286:	0c12      	lsrs	r2, r2, #16
 8006288:	fa13 f38e 	uxtah	r3, r3, lr
 800628c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006294:	b29b      	uxth	r3, r3
 8006296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800629a:	45c1      	cmp	r9, r8
 800629c:	f840 3b04 	str.w	r3, [r0], #4
 80062a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062a4:	d2e8      	bcs.n	8006278 <quorem+0xb0>
 80062a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062ae:	b922      	cbnz	r2, 80062ba <quorem+0xf2>
 80062b0:	3b04      	subs	r3, #4
 80062b2:	429d      	cmp	r5, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	d30a      	bcc.n	80062ce <quorem+0x106>
 80062b8:	613c      	str	r4, [r7, #16]
 80062ba:	4630      	mov	r0, r6
 80062bc:	b003      	add	sp, #12
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d1cc      	bne.n	8006264 <quorem+0x9c>
 80062ca:	3c01      	subs	r4, #1
 80062cc:	e7c7      	b.n	800625e <quorem+0x96>
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	d1f0      	bne.n	80062b8 <quorem+0xf0>
 80062d6:	3c01      	subs	r4, #1
 80062d8:	e7eb      	b.n	80062b2 <quorem+0xea>
 80062da:	2000      	movs	r0, #0
 80062dc:	e7ee      	b.n	80062bc <quorem+0xf4>
	...

080062e0 <_dtoa_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	ed2d 8b02 	vpush	{d8}
 80062e8:	ec57 6b10 	vmov	r6, r7, d0
 80062ec:	b095      	sub	sp, #84	; 0x54
 80062ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80062f4:	9105      	str	r1, [sp, #20]
 80062f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80062fa:	4604      	mov	r4, r0
 80062fc:	9209      	str	r2, [sp, #36]	; 0x24
 80062fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006300:	b975      	cbnz	r5, 8006320 <_dtoa_r+0x40>
 8006302:	2010      	movs	r0, #16
 8006304:	f7ff f8b0 	bl	8005468 <malloc>
 8006308:	4602      	mov	r2, r0
 800630a:	6260      	str	r0, [r4, #36]	; 0x24
 800630c:	b920      	cbnz	r0, 8006318 <_dtoa_r+0x38>
 800630e:	4bb2      	ldr	r3, [pc, #712]	; (80065d8 <_dtoa_r+0x2f8>)
 8006310:	21ea      	movs	r1, #234	; 0xea
 8006312:	48b2      	ldr	r0, [pc, #712]	; (80065dc <_dtoa_r+0x2fc>)
 8006314:	f001 febe 	bl	8008094 <__assert_func>
 8006318:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800631c:	6005      	str	r5, [r0, #0]
 800631e:	60c5      	str	r5, [r0, #12]
 8006320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006322:	6819      	ldr	r1, [r3, #0]
 8006324:	b151      	cbz	r1, 800633c <_dtoa_r+0x5c>
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	604a      	str	r2, [r1, #4]
 800632a:	2301      	movs	r3, #1
 800632c:	4093      	lsls	r3, r2
 800632e:	608b      	str	r3, [r1, #8]
 8006330:	4620      	mov	r0, r4
 8006332:	f001 f831 	bl	8007398 <_Bfree>
 8006336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	1e3b      	subs	r3, r7, #0
 800633e:	bfb9      	ittee	lt
 8006340:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006344:	9303      	strlt	r3, [sp, #12]
 8006346:	2300      	movge	r3, #0
 8006348:	f8c8 3000 	strge.w	r3, [r8]
 800634c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006350:	4ba3      	ldr	r3, [pc, #652]	; (80065e0 <_dtoa_r+0x300>)
 8006352:	bfbc      	itt	lt
 8006354:	2201      	movlt	r2, #1
 8006356:	f8c8 2000 	strlt.w	r2, [r8]
 800635a:	ea33 0309 	bics.w	r3, r3, r9
 800635e:	d11b      	bne.n	8006398 <_dtoa_r+0xb8>
 8006360:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006362:	f242 730f 	movw	r3, #9999	; 0x270f
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800636c:	4333      	orrs	r3, r6
 800636e:	f000 857a 	beq.w	8006e66 <_dtoa_r+0xb86>
 8006372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006374:	b963      	cbnz	r3, 8006390 <_dtoa_r+0xb0>
 8006376:	4b9b      	ldr	r3, [pc, #620]	; (80065e4 <_dtoa_r+0x304>)
 8006378:	e024      	b.n	80063c4 <_dtoa_r+0xe4>
 800637a:	4b9b      	ldr	r3, [pc, #620]	; (80065e8 <_dtoa_r+0x308>)
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	9800      	ldr	r0, [sp, #0]
 8006386:	b015      	add	sp, #84	; 0x54
 8006388:	ecbd 8b02 	vpop	{d8}
 800638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006390:	4b94      	ldr	r3, [pc, #592]	; (80065e4 <_dtoa_r+0x304>)
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	3303      	adds	r3, #3
 8006396:	e7f3      	b.n	8006380 <_dtoa_r+0xa0>
 8006398:	ed9d 7b02 	vldr	d7, [sp, #8]
 800639c:	2200      	movs	r2, #0
 800639e:	ec51 0b17 	vmov	r0, r1, d7
 80063a2:	2300      	movs	r3, #0
 80063a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80063a8:	f7fa fb9e 	bl	8000ae8 <__aeabi_dcmpeq>
 80063ac:	4680      	mov	r8, r0
 80063ae:	b158      	cbz	r0, 80063c8 <_dtoa_r+0xe8>
 80063b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063b2:	2301      	movs	r3, #1
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8551 	beq.w	8006e60 <_dtoa_r+0xb80>
 80063be:	488b      	ldr	r0, [pc, #556]	; (80065ec <_dtoa_r+0x30c>)
 80063c0:	6018      	str	r0, [r3, #0]
 80063c2:	1e43      	subs	r3, r0, #1
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	e7dd      	b.n	8006384 <_dtoa_r+0xa4>
 80063c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80063cc:	aa12      	add	r2, sp, #72	; 0x48
 80063ce:	a913      	add	r1, sp, #76	; 0x4c
 80063d0:	4620      	mov	r0, r4
 80063d2:	f001 fac3 	bl	800795c <__d2b>
 80063d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063da:	4683      	mov	fp, r0
 80063dc:	2d00      	cmp	r5, #0
 80063de:	d07c      	beq.n	80064da <_dtoa_r+0x1fa>
 80063e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80063e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80063ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80063f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80063f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80063fa:	4b7d      	ldr	r3, [pc, #500]	; (80065f0 <_dtoa_r+0x310>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	4630      	mov	r0, r6
 8006400:	4639      	mov	r1, r7
 8006402:	f7f9 ff51 	bl	80002a8 <__aeabi_dsub>
 8006406:	a36e      	add	r3, pc, #440	; (adr r3, 80065c0 <_dtoa_r+0x2e0>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa f904 	bl	8000618 <__aeabi_dmul>
 8006410:	a36d      	add	r3, pc, #436	; (adr r3, 80065c8 <_dtoa_r+0x2e8>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7f9 ff49 	bl	80002ac <__adddf3>
 800641a:	4606      	mov	r6, r0
 800641c:	4628      	mov	r0, r5
 800641e:	460f      	mov	r7, r1
 8006420:	f7fa f890 	bl	8000544 <__aeabi_i2d>
 8006424:	a36a      	add	r3, pc, #424	; (adr r3, 80065d0 <_dtoa_r+0x2f0>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7fa f8f5 	bl	8000618 <__aeabi_dmul>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4630      	mov	r0, r6
 8006434:	4639      	mov	r1, r7
 8006436:	f7f9 ff39 	bl	80002ac <__adddf3>
 800643a:	4606      	mov	r6, r0
 800643c:	460f      	mov	r7, r1
 800643e:	f7fa fb9b 	bl	8000b78 <__aeabi_d2iz>
 8006442:	2200      	movs	r2, #0
 8006444:	4682      	mov	sl, r0
 8006446:	2300      	movs	r3, #0
 8006448:	4630      	mov	r0, r6
 800644a:	4639      	mov	r1, r7
 800644c:	f7fa fb56 	bl	8000afc <__aeabi_dcmplt>
 8006450:	b148      	cbz	r0, 8006466 <_dtoa_r+0x186>
 8006452:	4650      	mov	r0, sl
 8006454:	f7fa f876 	bl	8000544 <__aeabi_i2d>
 8006458:	4632      	mov	r2, r6
 800645a:	463b      	mov	r3, r7
 800645c:	f7fa fb44 	bl	8000ae8 <__aeabi_dcmpeq>
 8006460:	b908      	cbnz	r0, 8006466 <_dtoa_r+0x186>
 8006462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006466:	f1ba 0f16 	cmp.w	sl, #22
 800646a:	d854      	bhi.n	8006516 <_dtoa_r+0x236>
 800646c:	4b61      	ldr	r3, [pc, #388]	; (80065f4 <_dtoa_r+0x314>)
 800646e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800647a:	f7fa fb3f 	bl	8000afc <__aeabi_dcmplt>
 800647e:	2800      	cmp	r0, #0
 8006480:	d04b      	beq.n	800651a <_dtoa_r+0x23a>
 8006482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006486:	2300      	movs	r3, #0
 8006488:	930e      	str	r3, [sp, #56]	; 0x38
 800648a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800648c:	1b5d      	subs	r5, r3, r5
 800648e:	1e6b      	subs	r3, r5, #1
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	bf43      	ittte	mi
 8006494:	2300      	movmi	r3, #0
 8006496:	f1c5 0801 	rsbmi	r8, r5, #1
 800649a:	9304      	strmi	r3, [sp, #16]
 800649c:	f04f 0800 	movpl.w	r8, #0
 80064a0:	f1ba 0f00 	cmp.w	sl, #0
 80064a4:	db3b      	blt.n	800651e <_dtoa_r+0x23e>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80064ac:	4453      	add	r3, sl
 80064ae:	9304      	str	r3, [sp, #16]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9306      	str	r3, [sp, #24]
 80064b4:	9b05      	ldr	r3, [sp, #20]
 80064b6:	2b09      	cmp	r3, #9
 80064b8:	d869      	bhi.n	800658e <_dtoa_r+0x2ae>
 80064ba:	2b05      	cmp	r3, #5
 80064bc:	bfc4      	itt	gt
 80064be:	3b04      	subgt	r3, #4
 80064c0:	9305      	strgt	r3, [sp, #20]
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	f1a3 0302 	sub.w	r3, r3, #2
 80064c8:	bfcc      	ite	gt
 80064ca:	2500      	movgt	r5, #0
 80064cc:	2501      	movle	r5, #1
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d869      	bhi.n	80065a6 <_dtoa_r+0x2c6>
 80064d2:	e8df f003 	tbb	[pc, r3]
 80064d6:	4e2c      	.short	0x4e2c
 80064d8:	5a4c      	.short	0x5a4c
 80064da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80064de:	441d      	add	r5, r3
 80064e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	bfc1      	itttt	gt
 80064e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80064f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80064f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80064f8:	bfda      	itte	le
 80064fa:	f1c3 0320 	rsble	r3, r3, #32
 80064fe:	fa06 f003 	lslle.w	r0, r6, r3
 8006502:	4318      	orrgt	r0, r3
 8006504:	f7fa f80e 	bl	8000524 <__aeabi_ui2d>
 8006508:	2301      	movs	r3, #1
 800650a:	4606      	mov	r6, r0
 800650c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006510:	3d01      	subs	r5, #1
 8006512:	9310      	str	r3, [sp, #64]	; 0x40
 8006514:	e771      	b.n	80063fa <_dtoa_r+0x11a>
 8006516:	2301      	movs	r3, #1
 8006518:	e7b6      	b.n	8006488 <_dtoa_r+0x1a8>
 800651a:	900e      	str	r0, [sp, #56]	; 0x38
 800651c:	e7b5      	b.n	800648a <_dtoa_r+0x1aa>
 800651e:	f1ca 0300 	rsb	r3, sl, #0
 8006522:	9306      	str	r3, [sp, #24]
 8006524:	2300      	movs	r3, #0
 8006526:	eba8 080a 	sub.w	r8, r8, sl
 800652a:	930d      	str	r3, [sp, #52]	; 0x34
 800652c:	e7c2      	b.n	80064b4 <_dtoa_r+0x1d4>
 800652e:	2300      	movs	r3, #0
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	dc39      	bgt.n	80065ac <_dtoa_r+0x2cc>
 8006538:	f04f 0901 	mov.w	r9, #1
 800653c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006540:	464b      	mov	r3, r9
 8006542:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006546:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006548:	2200      	movs	r2, #0
 800654a:	6042      	str	r2, [r0, #4]
 800654c:	2204      	movs	r2, #4
 800654e:	f102 0614 	add.w	r6, r2, #20
 8006552:	429e      	cmp	r6, r3
 8006554:	6841      	ldr	r1, [r0, #4]
 8006556:	d92f      	bls.n	80065b8 <_dtoa_r+0x2d8>
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fedd 	bl	8007318 <_Balloc>
 800655e:	9000      	str	r0, [sp, #0]
 8006560:	2800      	cmp	r0, #0
 8006562:	d14b      	bne.n	80065fc <_dtoa_r+0x31c>
 8006564:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <_dtoa_r+0x318>)
 8006566:	4602      	mov	r2, r0
 8006568:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800656c:	e6d1      	b.n	8006312 <_dtoa_r+0x32>
 800656e:	2301      	movs	r3, #1
 8006570:	e7de      	b.n	8006530 <_dtoa_r+0x250>
 8006572:	2300      	movs	r3, #0
 8006574:	9308      	str	r3, [sp, #32]
 8006576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006578:	eb0a 0903 	add.w	r9, sl, r3
 800657c:	f109 0301 	add.w	r3, r9, #1
 8006580:	2b01      	cmp	r3, #1
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	bfb8      	it	lt
 8006586:	2301      	movlt	r3, #1
 8006588:	e7dd      	b.n	8006546 <_dtoa_r+0x266>
 800658a:	2301      	movs	r3, #1
 800658c:	e7f2      	b.n	8006574 <_dtoa_r+0x294>
 800658e:	2501      	movs	r5, #1
 8006590:	2300      	movs	r3, #0
 8006592:	9305      	str	r3, [sp, #20]
 8006594:	9508      	str	r5, [sp, #32]
 8006596:	f04f 39ff 	mov.w	r9, #4294967295
 800659a:	2200      	movs	r2, #0
 800659c:	f8cd 9004 	str.w	r9, [sp, #4]
 80065a0:	2312      	movs	r3, #18
 80065a2:	9209      	str	r2, [sp, #36]	; 0x24
 80065a4:	e7cf      	b.n	8006546 <_dtoa_r+0x266>
 80065a6:	2301      	movs	r3, #1
 80065a8:	9308      	str	r3, [sp, #32]
 80065aa:	e7f4      	b.n	8006596 <_dtoa_r+0x2b6>
 80065ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80065b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80065b4:	464b      	mov	r3, r9
 80065b6:	e7c6      	b.n	8006546 <_dtoa_r+0x266>
 80065b8:	3101      	adds	r1, #1
 80065ba:	6041      	str	r1, [r0, #4]
 80065bc:	0052      	lsls	r2, r2, #1
 80065be:	e7c6      	b.n	800654e <_dtoa_r+0x26e>
 80065c0:	636f4361 	.word	0x636f4361
 80065c4:	3fd287a7 	.word	0x3fd287a7
 80065c8:	8b60c8b3 	.word	0x8b60c8b3
 80065cc:	3fc68a28 	.word	0x3fc68a28
 80065d0:	509f79fb 	.word	0x509f79fb
 80065d4:	3fd34413 	.word	0x3fd34413
 80065d8:	08062ad9 	.word	0x08062ad9
 80065dc:	08062af0 	.word	0x08062af0
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	08062ad5 	.word	0x08062ad5
 80065e8:	08062acc 	.word	0x08062acc
 80065ec:	08062aa9 	.word	0x08062aa9
 80065f0:	3ff80000 	.word	0x3ff80000
 80065f4:	08062c48 	.word	0x08062c48
 80065f8:	08062b4f 	.word	0x08062b4f
 80065fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065fe:	9a00      	ldr	r2, [sp, #0]
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	9b01      	ldr	r3, [sp, #4]
 8006604:	2b0e      	cmp	r3, #14
 8006606:	f200 80ad 	bhi.w	8006764 <_dtoa_r+0x484>
 800660a:	2d00      	cmp	r5, #0
 800660c:	f000 80aa 	beq.w	8006764 <_dtoa_r+0x484>
 8006610:	f1ba 0f00 	cmp.w	sl, #0
 8006614:	dd36      	ble.n	8006684 <_dtoa_r+0x3a4>
 8006616:	4ac3      	ldr	r2, [pc, #780]	; (8006924 <_dtoa_r+0x644>)
 8006618:	f00a 030f 	and.w	r3, sl, #15
 800661c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006620:	ed93 7b00 	vldr	d7, [r3]
 8006624:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006628:	ea4f 172a 	mov.w	r7, sl, asr #4
 800662c:	eeb0 8a47 	vmov.f32	s16, s14
 8006630:	eef0 8a67 	vmov.f32	s17, s15
 8006634:	d016      	beq.n	8006664 <_dtoa_r+0x384>
 8006636:	4bbc      	ldr	r3, [pc, #752]	; (8006928 <_dtoa_r+0x648>)
 8006638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800663c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006640:	f7fa f914 	bl	800086c <__aeabi_ddiv>
 8006644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006648:	f007 070f 	and.w	r7, r7, #15
 800664c:	2503      	movs	r5, #3
 800664e:	4eb6      	ldr	r6, [pc, #728]	; (8006928 <_dtoa_r+0x648>)
 8006650:	b957      	cbnz	r7, 8006668 <_dtoa_r+0x388>
 8006652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006656:	ec53 2b18 	vmov	r2, r3, d8
 800665a:	f7fa f907 	bl	800086c <__aeabi_ddiv>
 800665e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006662:	e029      	b.n	80066b8 <_dtoa_r+0x3d8>
 8006664:	2502      	movs	r5, #2
 8006666:	e7f2      	b.n	800664e <_dtoa_r+0x36e>
 8006668:	07f9      	lsls	r1, r7, #31
 800666a:	d508      	bpl.n	800667e <_dtoa_r+0x39e>
 800666c:	ec51 0b18 	vmov	r0, r1, d8
 8006670:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006674:	f7f9 ffd0 	bl	8000618 <__aeabi_dmul>
 8006678:	ec41 0b18 	vmov	d8, r0, r1
 800667c:	3501      	adds	r5, #1
 800667e:	107f      	asrs	r7, r7, #1
 8006680:	3608      	adds	r6, #8
 8006682:	e7e5      	b.n	8006650 <_dtoa_r+0x370>
 8006684:	f000 80a6 	beq.w	80067d4 <_dtoa_r+0x4f4>
 8006688:	f1ca 0600 	rsb	r6, sl, #0
 800668c:	4ba5      	ldr	r3, [pc, #660]	; (8006924 <_dtoa_r+0x644>)
 800668e:	4fa6      	ldr	r7, [pc, #664]	; (8006928 <_dtoa_r+0x648>)
 8006690:	f006 020f 	and.w	r2, r6, #15
 8006694:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066a0:	f7f9 ffba 	bl	8000618 <__aeabi_dmul>
 80066a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a8:	1136      	asrs	r6, r6, #4
 80066aa:	2300      	movs	r3, #0
 80066ac:	2502      	movs	r5, #2
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	f040 8085 	bne.w	80067be <_dtoa_r+0x4de>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1d2      	bne.n	800665e <_dtoa_r+0x37e>
 80066b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 808c 	beq.w	80067d8 <_dtoa_r+0x4f8>
 80066c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066c4:	4b99      	ldr	r3, [pc, #612]	; (800692c <_dtoa_r+0x64c>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	f7fa fa16 	bl	8000afc <__aeabi_dcmplt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f000 8081 	beq.w	80067d8 <_dtoa_r+0x4f8>
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d07d      	beq.n	80067d8 <_dtoa_r+0x4f8>
 80066dc:	f1b9 0f00 	cmp.w	r9, #0
 80066e0:	dd3c      	ble.n	800675c <_dtoa_r+0x47c>
 80066e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80066e6:	9307      	str	r3, [sp, #28]
 80066e8:	2200      	movs	r2, #0
 80066ea:	4b91      	ldr	r3, [pc, #580]	; (8006930 <_dtoa_r+0x650>)
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7f9 ff92 	bl	8000618 <__aeabi_dmul>
 80066f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f8:	3501      	adds	r5, #1
 80066fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80066fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006702:	4628      	mov	r0, r5
 8006704:	f7f9 ff1e 	bl	8000544 <__aeabi_i2d>
 8006708:	4632      	mov	r2, r6
 800670a:	463b      	mov	r3, r7
 800670c:	f7f9 ff84 	bl	8000618 <__aeabi_dmul>
 8006710:	4b88      	ldr	r3, [pc, #544]	; (8006934 <_dtoa_r+0x654>)
 8006712:	2200      	movs	r2, #0
 8006714:	f7f9 fdca 	bl	80002ac <__adddf3>
 8006718:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800671c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006720:	9303      	str	r3, [sp, #12]
 8006722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006724:	2b00      	cmp	r3, #0
 8006726:	d15c      	bne.n	80067e2 <_dtoa_r+0x502>
 8006728:	4b83      	ldr	r3, [pc, #524]	; (8006938 <_dtoa_r+0x658>)
 800672a:	2200      	movs	r2, #0
 800672c:	4630      	mov	r0, r6
 800672e:	4639      	mov	r1, r7
 8006730:	f7f9 fdba 	bl	80002a8 <__aeabi_dsub>
 8006734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006738:	4606      	mov	r6, r0
 800673a:	460f      	mov	r7, r1
 800673c:	f7fa f9fc 	bl	8000b38 <__aeabi_dcmpgt>
 8006740:	2800      	cmp	r0, #0
 8006742:	f040 8296 	bne.w	8006c72 <_dtoa_r+0x992>
 8006746:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800674a:	4630      	mov	r0, r6
 800674c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006750:	4639      	mov	r1, r7
 8006752:	f7fa f9d3 	bl	8000afc <__aeabi_dcmplt>
 8006756:	2800      	cmp	r0, #0
 8006758:	f040 8288 	bne.w	8006c6c <_dtoa_r+0x98c>
 800675c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006760:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006766:	2b00      	cmp	r3, #0
 8006768:	f2c0 8158 	blt.w	8006a1c <_dtoa_r+0x73c>
 800676c:	f1ba 0f0e 	cmp.w	sl, #14
 8006770:	f300 8154 	bgt.w	8006a1c <_dtoa_r+0x73c>
 8006774:	4b6b      	ldr	r3, [pc, #428]	; (8006924 <_dtoa_r+0x644>)
 8006776:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800677a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006780:	2b00      	cmp	r3, #0
 8006782:	f280 80e3 	bge.w	800694c <_dtoa_r+0x66c>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f300 80df 	bgt.w	800694c <_dtoa_r+0x66c>
 800678e:	f040 826d 	bne.w	8006c6c <_dtoa_r+0x98c>
 8006792:	4b69      	ldr	r3, [pc, #420]	; (8006938 <_dtoa_r+0x658>)
 8006794:	2200      	movs	r2, #0
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7f9 ff3d 	bl	8000618 <__aeabi_dmul>
 800679e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a2:	f7fa f9bf 	bl	8000b24 <__aeabi_dcmpge>
 80067a6:	9e01      	ldr	r6, [sp, #4]
 80067a8:	4637      	mov	r7, r6
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f040 8243 	bne.w	8006c36 <_dtoa_r+0x956>
 80067b0:	9d00      	ldr	r5, [sp, #0]
 80067b2:	2331      	movs	r3, #49	; 0x31
 80067b4:	f805 3b01 	strb.w	r3, [r5], #1
 80067b8:	f10a 0a01 	add.w	sl, sl, #1
 80067bc:	e23f      	b.n	8006c3e <_dtoa_r+0x95e>
 80067be:	07f2      	lsls	r2, r6, #31
 80067c0:	d505      	bpl.n	80067ce <_dtoa_r+0x4ee>
 80067c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c6:	f7f9 ff27 	bl	8000618 <__aeabi_dmul>
 80067ca:	3501      	adds	r5, #1
 80067cc:	2301      	movs	r3, #1
 80067ce:	1076      	asrs	r6, r6, #1
 80067d0:	3708      	adds	r7, #8
 80067d2:	e76c      	b.n	80066ae <_dtoa_r+0x3ce>
 80067d4:	2502      	movs	r5, #2
 80067d6:	e76f      	b.n	80066b8 <_dtoa_r+0x3d8>
 80067d8:	9b01      	ldr	r3, [sp, #4]
 80067da:	f8cd a01c 	str.w	sl, [sp, #28]
 80067de:	930c      	str	r3, [sp, #48]	; 0x30
 80067e0:	e78d      	b.n	80066fe <_dtoa_r+0x41e>
 80067e2:	9900      	ldr	r1, [sp, #0]
 80067e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067e8:	4b4e      	ldr	r3, [pc, #312]	; (8006924 <_dtoa_r+0x644>)
 80067ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067ee:	4401      	add	r1, r0
 80067f0:	9102      	str	r1, [sp, #8]
 80067f2:	9908      	ldr	r1, [sp, #32]
 80067f4:	eeb0 8a47 	vmov.f32	s16, s14
 80067f8:	eef0 8a67 	vmov.f32	s17, s15
 80067fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006800:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006804:	2900      	cmp	r1, #0
 8006806:	d045      	beq.n	8006894 <_dtoa_r+0x5b4>
 8006808:	494c      	ldr	r1, [pc, #304]	; (800693c <_dtoa_r+0x65c>)
 800680a:	2000      	movs	r0, #0
 800680c:	f7fa f82e 	bl	800086c <__aeabi_ddiv>
 8006810:	ec53 2b18 	vmov	r2, r3, d8
 8006814:	f7f9 fd48 	bl	80002a8 <__aeabi_dsub>
 8006818:	9d00      	ldr	r5, [sp, #0]
 800681a:	ec41 0b18 	vmov	d8, r0, r1
 800681e:	4639      	mov	r1, r7
 8006820:	4630      	mov	r0, r6
 8006822:	f7fa f9a9 	bl	8000b78 <__aeabi_d2iz>
 8006826:	900c      	str	r0, [sp, #48]	; 0x30
 8006828:	f7f9 fe8c 	bl	8000544 <__aeabi_i2d>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4630      	mov	r0, r6
 8006832:	4639      	mov	r1, r7
 8006834:	f7f9 fd38 	bl	80002a8 <__aeabi_dsub>
 8006838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800683a:	3330      	adds	r3, #48	; 0x30
 800683c:	f805 3b01 	strb.w	r3, [r5], #1
 8006840:	ec53 2b18 	vmov	r2, r3, d8
 8006844:	4606      	mov	r6, r0
 8006846:	460f      	mov	r7, r1
 8006848:	f7fa f958 	bl	8000afc <__aeabi_dcmplt>
 800684c:	2800      	cmp	r0, #0
 800684e:	d165      	bne.n	800691c <_dtoa_r+0x63c>
 8006850:	4632      	mov	r2, r6
 8006852:	463b      	mov	r3, r7
 8006854:	4935      	ldr	r1, [pc, #212]	; (800692c <_dtoa_r+0x64c>)
 8006856:	2000      	movs	r0, #0
 8006858:	f7f9 fd26 	bl	80002a8 <__aeabi_dsub>
 800685c:	ec53 2b18 	vmov	r2, r3, d8
 8006860:	f7fa f94c 	bl	8000afc <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	f040 80b9 	bne.w	80069dc <_dtoa_r+0x6fc>
 800686a:	9b02      	ldr	r3, [sp, #8]
 800686c:	429d      	cmp	r5, r3
 800686e:	f43f af75 	beq.w	800675c <_dtoa_r+0x47c>
 8006872:	4b2f      	ldr	r3, [pc, #188]	; (8006930 <_dtoa_r+0x650>)
 8006874:	ec51 0b18 	vmov	r0, r1, d8
 8006878:	2200      	movs	r2, #0
 800687a:	f7f9 fecd 	bl	8000618 <__aeabi_dmul>
 800687e:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <_dtoa_r+0x650>)
 8006880:	ec41 0b18 	vmov	d8, r0, r1
 8006884:	2200      	movs	r2, #0
 8006886:	4630      	mov	r0, r6
 8006888:	4639      	mov	r1, r7
 800688a:	f7f9 fec5 	bl	8000618 <__aeabi_dmul>
 800688e:	4606      	mov	r6, r0
 8006890:	460f      	mov	r7, r1
 8006892:	e7c4      	b.n	800681e <_dtoa_r+0x53e>
 8006894:	ec51 0b17 	vmov	r0, r1, d7
 8006898:	f7f9 febe 	bl	8000618 <__aeabi_dmul>
 800689c:	9b02      	ldr	r3, [sp, #8]
 800689e:	9d00      	ldr	r5, [sp, #0]
 80068a0:	930c      	str	r3, [sp, #48]	; 0x30
 80068a2:	ec41 0b18 	vmov	d8, r0, r1
 80068a6:	4639      	mov	r1, r7
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7fa f965 	bl	8000b78 <__aeabi_d2iz>
 80068ae:	9011      	str	r0, [sp, #68]	; 0x44
 80068b0:	f7f9 fe48 	bl	8000544 <__aeabi_i2d>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7f9 fcf4 	bl	80002a8 <__aeabi_dsub>
 80068c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068c2:	3330      	adds	r3, #48	; 0x30
 80068c4:	f805 3b01 	strb.w	r3, [r5], #1
 80068c8:	9b02      	ldr	r3, [sp, #8]
 80068ca:	429d      	cmp	r5, r3
 80068cc:	4606      	mov	r6, r0
 80068ce:	460f      	mov	r7, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	d134      	bne.n	8006940 <_dtoa_r+0x660>
 80068d6:	4b19      	ldr	r3, [pc, #100]	; (800693c <_dtoa_r+0x65c>)
 80068d8:	ec51 0b18 	vmov	r0, r1, d8
 80068dc:	f7f9 fce6 	bl	80002ac <__adddf3>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7fa f926 	bl	8000b38 <__aeabi_dcmpgt>
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d175      	bne.n	80069dc <_dtoa_r+0x6fc>
 80068f0:	ec53 2b18 	vmov	r2, r3, d8
 80068f4:	4911      	ldr	r1, [pc, #68]	; (800693c <_dtoa_r+0x65c>)
 80068f6:	2000      	movs	r0, #0
 80068f8:	f7f9 fcd6 	bl	80002a8 <__aeabi_dsub>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4630      	mov	r0, r6
 8006902:	4639      	mov	r1, r7
 8006904:	f7fa f8fa 	bl	8000afc <__aeabi_dcmplt>
 8006908:	2800      	cmp	r0, #0
 800690a:	f43f af27 	beq.w	800675c <_dtoa_r+0x47c>
 800690e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006910:	1e6b      	subs	r3, r5, #1
 8006912:	930c      	str	r3, [sp, #48]	; 0x30
 8006914:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006918:	2b30      	cmp	r3, #48	; 0x30
 800691a:	d0f8      	beq.n	800690e <_dtoa_r+0x62e>
 800691c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006920:	e04a      	b.n	80069b8 <_dtoa_r+0x6d8>
 8006922:	bf00      	nop
 8006924:	08062c48 	.word	0x08062c48
 8006928:	08062c20 	.word	0x08062c20
 800692c:	3ff00000 	.word	0x3ff00000
 8006930:	40240000 	.word	0x40240000
 8006934:	401c0000 	.word	0x401c0000
 8006938:	40140000 	.word	0x40140000
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	4baf      	ldr	r3, [pc, #700]	; (8006c00 <_dtoa_r+0x920>)
 8006942:	f7f9 fe69 	bl	8000618 <__aeabi_dmul>
 8006946:	4606      	mov	r6, r0
 8006948:	460f      	mov	r7, r1
 800694a:	e7ac      	b.n	80068a6 <_dtoa_r+0x5c6>
 800694c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006950:	9d00      	ldr	r5, [sp, #0]
 8006952:	4642      	mov	r2, r8
 8006954:	464b      	mov	r3, r9
 8006956:	4630      	mov	r0, r6
 8006958:	4639      	mov	r1, r7
 800695a:	f7f9 ff87 	bl	800086c <__aeabi_ddiv>
 800695e:	f7fa f90b 	bl	8000b78 <__aeabi_d2iz>
 8006962:	9002      	str	r0, [sp, #8]
 8006964:	f7f9 fdee 	bl	8000544 <__aeabi_i2d>
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	f7f9 fe54 	bl	8000618 <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4630      	mov	r0, r6
 8006976:	4639      	mov	r1, r7
 8006978:	f7f9 fc96 	bl	80002a8 <__aeabi_dsub>
 800697c:	9e02      	ldr	r6, [sp, #8]
 800697e:	9f01      	ldr	r7, [sp, #4]
 8006980:	3630      	adds	r6, #48	; 0x30
 8006982:	f805 6b01 	strb.w	r6, [r5], #1
 8006986:	9e00      	ldr	r6, [sp, #0]
 8006988:	1bae      	subs	r6, r5, r6
 800698a:	42b7      	cmp	r7, r6
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	d137      	bne.n	8006a02 <_dtoa_r+0x722>
 8006992:	f7f9 fc8b 	bl	80002ac <__adddf3>
 8006996:	4642      	mov	r2, r8
 8006998:	464b      	mov	r3, r9
 800699a:	4606      	mov	r6, r0
 800699c:	460f      	mov	r7, r1
 800699e:	f7fa f8cb 	bl	8000b38 <__aeabi_dcmpgt>
 80069a2:	b9c8      	cbnz	r0, 80069d8 <_dtoa_r+0x6f8>
 80069a4:	4642      	mov	r2, r8
 80069a6:	464b      	mov	r3, r9
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7fa f89c 	bl	8000ae8 <__aeabi_dcmpeq>
 80069b0:	b110      	cbz	r0, 80069b8 <_dtoa_r+0x6d8>
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	07d9      	lsls	r1, r3, #31
 80069b6:	d40f      	bmi.n	80069d8 <_dtoa_r+0x6f8>
 80069b8:	4620      	mov	r0, r4
 80069ba:	4659      	mov	r1, fp
 80069bc:	f000 fcec 	bl	8007398 <_Bfree>
 80069c0:	2300      	movs	r3, #0
 80069c2:	702b      	strb	r3, [r5, #0]
 80069c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069c6:	f10a 0001 	add.w	r0, sl, #1
 80069ca:	6018      	str	r0, [r3, #0]
 80069cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f43f acd8 	beq.w	8006384 <_dtoa_r+0xa4>
 80069d4:	601d      	str	r5, [r3, #0]
 80069d6:	e4d5      	b.n	8006384 <_dtoa_r+0xa4>
 80069d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80069dc:	462b      	mov	r3, r5
 80069de:	461d      	mov	r5, r3
 80069e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069e4:	2a39      	cmp	r2, #57	; 0x39
 80069e6:	d108      	bne.n	80069fa <_dtoa_r+0x71a>
 80069e8:	9a00      	ldr	r2, [sp, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d1f7      	bne.n	80069de <_dtoa_r+0x6fe>
 80069ee:	9a07      	ldr	r2, [sp, #28]
 80069f0:	9900      	ldr	r1, [sp, #0]
 80069f2:	3201      	adds	r2, #1
 80069f4:	9207      	str	r2, [sp, #28]
 80069f6:	2230      	movs	r2, #48	; 0x30
 80069f8:	700a      	strb	r2, [r1, #0]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	3201      	adds	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e78c      	b.n	800691c <_dtoa_r+0x63c>
 8006a02:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <_dtoa_r+0x920>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	f7f9 fe07 	bl	8000618 <__aeabi_dmul>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4606      	mov	r6, r0
 8006a10:	460f      	mov	r7, r1
 8006a12:	f7fa f869 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d09b      	beq.n	8006952 <_dtoa_r+0x672>
 8006a1a:	e7cd      	b.n	80069b8 <_dtoa_r+0x6d8>
 8006a1c:	9a08      	ldr	r2, [sp, #32]
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	f000 80c4 	beq.w	8006bac <_dtoa_r+0x8cc>
 8006a24:	9a05      	ldr	r2, [sp, #20]
 8006a26:	2a01      	cmp	r2, #1
 8006a28:	f300 80a8 	bgt.w	8006b7c <_dtoa_r+0x89c>
 8006a2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	f000 80a0 	beq.w	8006b74 <_dtoa_r+0x894>
 8006a34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a38:	9e06      	ldr	r6, [sp, #24]
 8006a3a:	4645      	mov	r5, r8
 8006a3c:	9a04      	ldr	r2, [sp, #16]
 8006a3e:	2101      	movs	r1, #1
 8006a40:	441a      	add	r2, r3
 8006a42:	4620      	mov	r0, r4
 8006a44:	4498      	add	r8, r3
 8006a46:	9204      	str	r2, [sp, #16]
 8006a48:	f000 fd62 	bl	8007510 <__i2b>
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	dd0b      	ble.n	8006a6a <_dtoa_r+0x78a>
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dd08      	ble.n	8006a6a <_dtoa_r+0x78a>
 8006a58:	42ab      	cmp	r3, r5
 8006a5a:	9a04      	ldr	r2, [sp, #16]
 8006a5c:	bfa8      	it	ge
 8006a5e:	462b      	movge	r3, r5
 8006a60:	eba8 0803 	sub.w	r8, r8, r3
 8006a64:	1aed      	subs	r5, r5, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	9b06      	ldr	r3, [sp, #24]
 8006a6c:	b1fb      	cbz	r3, 8006aae <_dtoa_r+0x7ce>
 8006a6e:	9b08      	ldr	r3, [sp, #32]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 809f 	beq.w	8006bb4 <_dtoa_r+0x8d4>
 8006a76:	2e00      	cmp	r6, #0
 8006a78:	dd11      	ble.n	8006a9e <_dtoa_r+0x7be>
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 fe02 	bl	8007688 <__pow5mult>
 8006a84:	465a      	mov	r2, fp
 8006a86:	4601      	mov	r1, r0
 8006a88:	4607      	mov	r7, r0
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 fd56 	bl	800753c <__multiply>
 8006a90:	4659      	mov	r1, fp
 8006a92:	9007      	str	r0, [sp, #28]
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fc7f 	bl	8007398 <_Bfree>
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	469b      	mov	fp, r3
 8006a9e:	9b06      	ldr	r3, [sp, #24]
 8006aa0:	1b9a      	subs	r2, r3, r6
 8006aa2:	d004      	beq.n	8006aae <_dtoa_r+0x7ce>
 8006aa4:	4659      	mov	r1, fp
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 fdee 	bl	8007688 <__pow5mult>
 8006aac:	4683      	mov	fp, r0
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f000 fd2d 	bl	8007510 <__i2b>
 8006ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	4606      	mov	r6, r0
 8006abc:	dd7c      	ble.n	8006bb8 <_dtoa_r+0x8d8>
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 fde0 	bl	8007688 <__pow5mult>
 8006ac8:	9b05      	ldr	r3, [sp, #20]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	4606      	mov	r6, r0
 8006ace:	dd76      	ble.n	8006bbe <_dtoa_r+0x8de>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9306      	str	r3, [sp, #24]
 8006ad4:	6933      	ldr	r3, [r6, #16]
 8006ad6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ada:	6918      	ldr	r0, [r3, #16]
 8006adc:	f000 fcc8 	bl	8007470 <__hi0bits>
 8006ae0:	f1c0 0020 	rsb	r0, r0, #32
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	4418      	add	r0, r3
 8006ae8:	f010 001f 	ands.w	r0, r0, #31
 8006aec:	f000 8086 	beq.w	8006bfc <_dtoa_r+0x91c>
 8006af0:	f1c0 0320 	rsb	r3, r0, #32
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	dd7f      	ble.n	8006bf8 <_dtoa_r+0x918>
 8006af8:	f1c0 001c 	rsb	r0, r0, #28
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	4403      	add	r3, r0
 8006b00:	4480      	add	r8, r0
 8006b02:	4405      	add	r5, r0
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	f1b8 0f00 	cmp.w	r8, #0
 8006b0a:	dd05      	ble.n	8006b18 <_dtoa_r+0x838>
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	4642      	mov	r2, r8
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 fe13 	bl	800773c <__lshift>
 8006b16:	4683      	mov	fp, r0
 8006b18:	9b04      	ldr	r3, [sp, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	dd05      	ble.n	8006b2a <_dtoa_r+0x84a>
 8006b1e:	4631      	mov	r1, r6
 8006b20:	461a      	mov	r2, r3
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fe0a 	bl	800773c <__lshift>
 8006b28:	4606      	mov	r6, r0
 8006b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d069      	beq.n	8006c04 <_dtoa_r+0x924>
 8006b30:	4631      	mov	r1, r6
 8006b32:	4658      	mov	r0, fp
 8006b34:	f000 fe6e 	bl	8007814 <__mcmp>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	da63      	bge.n	8006c04 <_dtoa_r+0x924>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	4659      	mov	r1, fp
 8006b40:	220a      	movs	r2, #10
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fc4a 	bl	80073dc <__multadd>
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b4e:	4683      	mov	fp, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 818f 	beq.w	8006e74 <_dtoa_r+0xb94>
 8006b56:	4639      	mov	r1, r7
 8006b58:	2300      	movs	r3, #0
 8006b5a:	220a      	movs	r2, #10
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 fc3d 	bl	80073dc <__multadd>
 8006b62:	f1b9 0f00 	cmp.w	r9, #0
 8006b66:	4607      	mov	r7, r0
 8006b68:	f300 808e 	bgt.w	8006c88 <_dtoa_r+0x9a8>
 8006b6c:	9b05      	ldr	r3, [sp, #20]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	dc50      	bgt.n	8006c14 <_dtoa_r+0x934>
 8006b72:	e089      	b.n	8006c88 <_dtoa_r+0x9a8>
 8006b74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b7a:	e75d      	b.n	8006a38 <_dtoa_r+0x758>
 8006b7c:	9b01      	ldr	r3, [sp, #4]
 8006b7e:	1e5e      	subs	r6, r3, #1
 8006b80:	9b06      	ldr	r3, [sp, #24]
 8006b82:	42b3      	cmp	r3, r6
 8006b84:	bfbf      	itttt	lt
 8006b86:	9b06      	ldrlt	r3, [sp, #24]
 8006b88:	9606      	strlt	r6, [sp, #24]
 8006b8a:	1af2      	sublt	r2, r6, r3
 8006b8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b8e:	bfb6      	itet	lt
 8006b90:	189b      	addlt	r3, r3, r2
 8006b92:	1b9e      	subge	r6, r3, r6
 8006b94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b96:	9b01      	ldr	r3, [sp, #4]
 8006b98:	bfb8      	it	lt
 8006b9a:	2600      	movlt	r6, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	bfb5      	itete	lt
 8006ba0:	eba8 0503 	sublt.w	r5, r8, r3
 8006ba4:	9b01      	ldrge	r3, [sp, #4]
 8006ba6:	2300      	movlt	r3, #0
 8006ba8:	4645      	movge	r5, r8
 8006baa:	e747      	b.n	8006a3c <_dtoa_r+0x75c>
 8006bac:	9e06      	ldr	r6, [sp, #24]
 8006bae:	9f08      	ldr	r7, [sp, #32]
 8006bb0:	4645      	mov	r5, r8
 8006bb2:	e74c      	b.n	8006a4e <_dtoa_r+0x76e>
 8006bb4:	9a06      	ldr	r2, [sp, #24]
 8006bb6:	e775      	b.n	8006aa4 <_dtoa_r+0x7c4>
 8006bb8:	9b05      	ldr	r3, [sp, #20]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	dc18      	bgt.n	8006bf0 <_dtoa_r+0x910>
 8006bbe:	9b02      	ldr	r3, [sp, #8]
 8006bc0:	b9b3      	cbnz	r3, 8006bf0 <_dtoa_r+0x910>
 8006bc2:	9b03      	ldr	r3, [sp, #12]
 8006bc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bc8:	b9a3      	cbnz	r3, 8006bf4 <_dtoa_r+0x914>
 8006bca:	9b03      	ldr	r3, [sp, #12]
 8006bcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	0d1b      	lsrs	r3, r3, #20
 8006bd2:	051b      	lsls	r3, r3, #20
 8006bd4:	b12b      	cbz	r3, 8006be2 <_dtoa_r+0x902>
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	f108 0801 	add.w	r8, r8, #1
 8006be0:	2301      	movs	r3, #1
 8006be2:	9306      	str	r3, [sp, #24]
 8006be4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f47f af74 	bne.w	8006ad4 <_dtoa_r+0x7f4>
 8006bec:	2001      	movs	r0, #1
 8006bee:	e779      	b.n	8006ae4 <_dtoa_r+0x804>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e7f6      	b.n	8006be2 <_dtoa_r+0x902>
 8006bf4:	9b02      	ldr	r3, [sp, #8]
 8006bf6:	e7f4      	b.n	8006be2 <_dtoa_r+0x902>
 8006bf8:	d085      	beq.n	8006b06 <_dtoa_r+0x826>
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	301c      	adds	r0, #28
 8006bfe:	e77d      	b.n	8006afc <_dtoa_r+0x81c>
 8006c00:	40240000 	.word	0x40240000
 8006c04:	9b01      	ldr	r3, [sp, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	dc38      	bgt.n	8006c7c <_dtoa_r+0x99c>
 8006c0a:	9b05      	ldr	r3, [sp, #20]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	dd35      	ble.n	8006c7c <_dtoa_r+0x99c>
 8006c10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c14:	f1b9 0f00 	cmp.w	r9, #0
 8006c18:	d10d      	bne.n	8006c36 <_dtoa_r+0x956>
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	2205      	movs	r2, #5
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fbdb 	bl	80073dc <__multadd>
 8006c26:	4601      	mov	r1, r0
 8006c28:	4606      	mov	r6, r0
 8006c2a:	4658      	mov	r0, fp
 8006c2c:	f000 fdf2 	bl	8007814 <__mcmp>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	f73f adbd 	bgt.w	80067b0 <_dtoa_r+0x4d0>
 8006c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c38:	9d00      	ldr	r5, [sp, #0]
 8006c3a:	ea6f 0a03 	mvn.w	sl, r3
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	4631      	mov	r1, r6
 8006c44:	4620      	mov	r0, r4
 8006c46:	f000 fba7 	bl	8007398 <_Bfree>
 8006c4a:	2f00      	cmp	r7, #0
 8006c4c:	f43f aeb4 	beq.w	80069b8 <_dtoa_r+0x6d8>
 8006c50:	f1b8 0f00 	cmp.w	r8, #0
 8006c54:	d005      	beq.n	8006c62 <_dtoa_r+0x982>
 8006c56:	45b8      	cmp	r8, r7
 8006c58:	d003      	beq.n	8006c62 <_dtoa_r+0x982>
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f000 fb9b 	bl	8007398 <_Bfree>
 8006c62:	4639      	mov	r1, r7
 8006c64:	4620      	mov	r0, r4
 8006c66:	f000 fb97 	bl	8007398 <_Bfree>
 8006c6a:	e6a5      	b.n	80069b8 <_dtoa_r+0x6d8>
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	4637      	mov	r7, r6
 8006c70:	e7e1      	b.n	8006c36 <_dtoa_r+0x956>
 8006c72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c78:	4637      	mov	r7, r6
 8006c7a:	e599      	b.n	80067b0 <_dtoa_r+0x4d0>
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 80fd 	beq.w	8006e82 <_dtoa_r+0xba2>
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	dd05      	ble.n	8006c98 <_dtoa_r+0x9b8>
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	462a      	mov	r2, r5
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 fd53 	bl	800773c <__lshift>
 8006c96:	4607      	mov	r7, r0
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d05c      	beq.n	8006d58 <_dtoa_r+0xa78>
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fb39 	bl	8007318 <_Balloc>
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	b928      	cbnz	r0, 8006cb6 <_dtoa_r+0x9d6>
 8006caa:	4b80      	ldr	r3, [pc, #512]	; (8006eac <_dtoa_r+0xbcc>)
 8006cac:	4602      	mov	r2, r0
 8006cae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006cb2:	f7ff bb2e 	b.w	8006312 <_dtoa_r+0x32>
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	3202      	adds	r2, #2
 8006cba:	0092      	lsls	r2, r2, #2
 8006cbc:	f107 010c 	add.w	r1, r7, #12
 8006cc0:	300c      	adds	r0, #12
 8006cc2:	f7fe fbd9 	bl	8005478 <memcpy>
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4629      	mov	r1, r5
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 fd36 	bl	800773c <__lshift>
 8006cd0:	9b00      	ldr	r3, [sp, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	9301      	str	r3, [sp, #4]
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	444b      	add	r3, r9
 8006cda:	9307      	str	r3, [sp, #28]
 8006cdc:	9b02      	ldr	r3, [sp, #8]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	46b8      	mov	r8, r7
 8006ce4:	9306      	str	r3, [sp, #24]
 8006ce6:	4607      	mov	r7, r0
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	4631      	mov	r1, r6
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4658      	mov	r0, fp
 8006cf0:	9302      	str	r3, [sp, #8]
 8006cf2:	f7ff fa69 	bl	80061c8 <quorem>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	3330      	adds	r3, #48	; 0x30
 8006cfa:	9004      	str	r0, [sp, #16]
 8006cfc:	4641      	mov	r1, r8
 8006cfe:	4658      	mov	r0, fp
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	f000 fd87 	bl	8007814 <__mcmp>
 8006d06:	463a      	mov	r2, r7
 8006d08:	4681      	mov	r9, r0
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 fd9d 	bl	800784c <__mdiff>
 8006d12:	68c2      	ldr	r2, [r0, #12]
 8006d14:	9b08      	ldr	r3, [sp, #32]
 8006d16:	4605      	mov	r5, r0
 8006d18:	bb02      	cbnz	r2, 8006d5c <_dtoa_r+0xa7c>
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	f000 fd79 	bl	8007814 <__mcmp>
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	4602      	mov	r2, r0
 8006d26:	4629      	mov	r1, r5
 8006d28:	4620      	mov	r0, r4
 8006d2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006d2e:	f000 fb33 	bl	8007398 <_Bfree>
 8006d32:	9b05      	ldr	r3, [sp, #20]
 8006d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d36:	9d01      	ldr	r5, [sp, #4]
 8006d38:	ea43 0102 	orr.w	r1, r3, r2
 8006d3c:	9b06      	ldr	r3, [sp, #24]
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	d10d      	bne.n	8006d60 <_dtoa_r+0xa80>
 8006d44:	2b39      	cmp	r3, #57	; 0x39
 8006d46:	d029      	beq.n	8006d9c <_dtoa_r+0xabc>
 8006d48:	f1b9 0f00 	cmp.w	r9, #0
 8006d4c:	dd01      	ble.n	8006d52 <_dtoa_r+0xa72>
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	3331      	adds	r3, #49	; 0x31
 8006d52:	9a02      	ldr	r2, [sp, #8]
 8006d54:	7013      	strb	r3, [r2, #0]
 8006d56:	e774      	b.n	8006c42 <_dtoa_r+0x962>
 8006d58:	4638      	mov	r0, r7
 8006d5a:	e7b9      	b.n	8006cd0 <_dtoa_r+0x9f0>
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	e7e2      	b.n	8006d26 <_dtoa_r+0xa46>
 8006d60:	f1b9 0f00 	cmp.w	r9, #0
 8006d64:	db06      	blt.n	8006d74 <_dtoa_r+0xa94>
 8006d66:	9905      	ldr	r1, [sp, #20]
 8006d68:	ea41 0909 	orr.w	r9, r1, r9
 8006d6c:	9906      	ldr	r1, [sp, #24]
 8006d6e:	ea59 0101 	orrs.w	r1, r9, r1
 8006d72:	d120      	bne.n	8006db6 <_dtoa_r+0xad6>
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	ddec      	ble.n	8006d52 <_dtoa_r+0xa72>
 8006d78:	4659      	mov	r1, fp
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	9301      	str	r3, [sp, #4]
 8006d80:	f000 fcdc 	bl	800773c <__lshift>
 8006d84:	4631      	mov	r1, r6
 8006d86:	4683      	mov	fp, r0
 8006d88:	f000 fd44 	bl	8007814 <__mcmp>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	dc02      	bgt.n	8006d98 <_dtoa_r+0xab8>
 8006d92:	d1de      	bne.n	8006d52 <_dtoa_r+0xa72>
 8006d94:	07da      	lsls	r2, r3, #31
 8006d96:	d5dc      	bpl.n	8006d52 <_dtoa_r+0xa72>
 8006d98:	2b39      	cmp	r3, #57	; 0x39
 8006d9a:	d1d8      	bne.n	8006d4e <_dtoa_r+0xa6e>
 8006d9c:	9a02      	ldr	r2, [sp, #8]
 8006d9e:	2339      	movs	r3, #57	; 0x39
 8006da0:	7013      	strb	r3, [r2, #0]
 8006da2:	462b      	mov	r3, r5
 8006da4:	461d      	mov	r5, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dac:	2a39      	cmp	r2, #57	; 0x39
 8006dae:	d050      	beq.n	8006e52 <_dtoa_r+0xb72>
 8006db0:	3201      	adds	r2, #1
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	e745      	b.n	8006c42 <_dtoa_r+0x962>
 8006db6:	2a00      	cmp	r2, #0
 8006db8:	dd03      	ble.n	8006dc2 <_dtoa_r+0xae2>
 8006dba:	2b39      	cmp	r3, #57	; 0x39
 8006dbc:	d0ee      	beq.n	8006d9c <_dtoa_r+0xabc>
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	e7c7      	b.n	8006d52 <_dtoa_r+0xa72>
 8006dc2:	9a01      	ldr	r2, [sp, #4]
 8006dc4:	9907      	ldr	r1, [sp, #28]
 8006dc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006dca:	428a      	cmp	r2, r1
 8006dcc:	d02a      	beq.n	8006e24 <_dtoa_r+0xb44>
 8006dce:	4659      	mov	r1, fp
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fb01 	bl	80073dc <__multadd>
 8006dda:	45b8      	cmp	r8, r7
 8006ddc:	4683      	mov	fp, r0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	f04f 020a 	mov.w	r2, #10
 8006de6:	4641      	mov	r1, r8
 8006de8:	4620      	mov	r0, r4
 8006dea:	d107      	bne.n	8006dfc <_dtoa_r+0xb1c>
 8006dec:	f000 faf6 	bl	80073dc <__multadd>
 8006df0:	4680      	mov	r8, r0
 8006df2:	4607      	mov	r7, r0
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	3301      	adds	r3, #1
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	e775      	b.n	8006ce8 <_dtoa_r+0xa08>
 8006dfc:	f000 faee 	bl	80073dc <__multadd>
 8006e00:	4639      	mov	r1, r7
 8006e02:	4680      	mov	r8, r0
 8006e04:	2300      	movs	r3, #0
 8006e06:	220a      	movs	r2, #10
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f000 fae7 	bl	80073dc <__multadd>
 8006e0e:	4607      	mov	r7, r0
 8006e10:	e7f0      	b.n	8006df4 <_dtoa_r+0xb14>
 8006e12:	f1b9 0f00 	cmp.w	r9, #0
 8006e16:	9a00      	ldr	r2, [sp, #0]
 8006e18:	bfcc      	ite	gt
 8006e1a:	464d      	movgt	r5, r9
 8006e1c:	2501      	movle	r5, #1
 8006e1e:	4415      	add	r5, r2
 8006e20:	f04f 0800 	mov.w	r8, #0
 8006e24:	4659      	mov	r1, fp
 8006e26:	2201      	movs	r2, #1
 8006e28:	4620      	mov	r0, r4
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	f000 fc86 	bl	800773c <__lshift>
 8006e30:	4631      	mov	r1, r6
 8006e32:	4683      	mov	fp, r0
 8006e34:	f000 fcee 	bl	8007814 <__mcmp>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	dcb2      	bgt.n	8006da2 <_dtoa_r+0xac2>
 8006e3c:	d102      	bne.n	8006e44 <_dtoa_r+0xb64>
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	07db      	lsls	r3, r3, #31
 8006e42:	d4ae      	bmi.n	8006da2 <_dtoa_r+0xac2>
 8006e44:	462b      	mov	r3, r5
 8006e46:	461d      	mov	r5, r3
 8006e48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e4c:	2a30      	cmp	r2, #48	; 0x30
 8006e4e:	d0fa      	beq.n	8006e46 <_dtoa_r+0xb66>
 8006e50:	e6f7      	b.n	8006c42 <_dtoa_r+0x962>
 8006e52:	9a00      	ldr	r2, [sp, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d1a5      	bne.n	8006da4 <_dtoa_r+0xac4>
 8006e58:	f10a 0a01 	add.w	sl, sl, #1
 8006e5c:	2331      	movs	r3, #49	; 0x31
 8006e5e:	e779      	b.n	8006d54 <_dtoa_r+0xa74>
 8006e60:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <_dtoa_r+0xbd0>)
 8006e62:	f7ff baaf 	b.w	80063c4 <_dtoa_r+0xe4>
 8006e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f47f aa86 	bne.w	800637a <_dtoa_r+0x9a>
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <_dtoa_r+0xbd4>)
 8006e70:	f7ff baa8 	b.w	80063c4 <_dtoa_r+0xe4>
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
 8006e78:	dc03      	bgt.n	8006e82 <_dtoa_r+0xba2>
 8006e7a:	9b05      	ldr	r3, [sp, #20]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	f73f aec9 	bgt.w	8006c14 <_dtoa_r+0x934>
 8006e82:	9d00      	ldr	r5, [sp, #0]
 8006e84:	4631      	mov	r1, r6
 8006e86:	4658      	mov	r0, fp
 8006e88:	f7ff f99e 	bl	80061c8 <quorem>
 8006e8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e90:	f805 3b01 	strb.w	r3, [r5], #1
 8006e94:	9a00      	ldr	r2, [sp, #0]
 8006e96:	1aaa      	subs	r2, r5, r2
 8006e98:	4591      	cmp	r9, r2
 8006e9a:	ddba      	ble.n	8006e12 <_dtoa_r+0xb32>
 8006e9c:	4659      	mov	r1, fp
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 fa9a 	bl	80073dc <__multadd>
 8006ea8:	4683      	mov	fp, r0
 8006eaa:	e7eb      	b.n	8006e84 <_dtoa_r+0xba4>
 8006eac:	08062b4f 	.word	0x08062b4f
 8006eb0:	08062aa8 	.word	0x08062aa8
 8006eb4:	08062acc 	.word	0x08062acc

08006eb8 <__sflush_r>:
 8006eb8:	898a      	ldrh	r2, [r1, #12]
 8006eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	0710      	lsls	r0, r2, #28
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	d458      	bmi.n	8006f78 <__sflush_r+0xc0>
 8006ec6:	684b      	ldr	r3, [r1, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	dc05      	bgt.n	8006ed8 <__sflush_r+0x20>
 8006ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dc02      	bgt.n	8006ed8 <__sflush_r+0x20>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	d0f9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ee4:	682f      	ldr	r7, [r5, #0]
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	d032      	beq.n	8006f50 <__sflush_r+0x98>
 8006eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	075a      	lsls	r2, r3, #29
 8006ef0:	d505      	bpl.n	8006efe <__sflush_r+0x46>
 8006ef2:	6863      	ldr	r3, [r4, #4]
 8006ef4:	1ac0      	subs	r0, r0, r3
 8006ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ef8:	b10b      	cbz	r3, 8006efe <__sflush_r+0x46>
 8006efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006efc:	1ac0      	subs	r0, r0, r3
 8006efe:	2300      	movs	r3, #0
 8006f00:	4602      	mov	r2, r0
 8006f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f04:	6a21      	ldr	r1, [r4, #32]
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b0      	blx	r6
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	d106      	bne.n	8006f1e <__sflush_r+0x66>
 8006f10:	6829      	ldr	r1, [r5, #0]
 8006f12:	291d      	cmp	r1, #29
 8006f14:	d82c      	bhi.n	8006f70 <__sflush_r+0xb8>
 8006f16:	4a2a      	ldr	r2, [pc, #168]	; (8006fc0 <__sflush_r+0x108>)
 8006f18:	40ca      	lsrs	r2, r1
 8006f1a:	07d6      	lsls	r6, r2, #31
 8006f1c:	d528      	bpl.n	8006f70 <__sflush_r+0xb8>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	6062      	str	r2, [r4, #4]
 8006f22:	04d9      	lsls	r1, r3, #19
 8006f24:	6922      	ldr	r2, [r4, #16]
 8006f26:	6022      	str	r2, [r4, #0]
 8006f28:	d504      	bpl.n	8006f34 <__sflush_r+0x7c>
 8006f2a:	1c42      	adds	r2, r0, #1
 8006f2c:	d101      	bne.n	8006f32 <__sflush_r+0x7a>
 8006f2e:	682b      	ldr	r3, [r5, #0]
 8006f30:	b903      	cbnz	r3, 8006f34 <__sflush_r+0x7c>
 8006f32:	6560      	str	r0, [r4, #84]	; 0x54
 8006f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f36:	602f      	str	r7, [r5, #0]
 8006f38:	2900      	cmp	r1, #0
 8006f3a:	d0ca      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f40:	4299      	cmp	r1, r3
 8006f42:	d002      	beq.n	8006f4a <__sflush_r+0x92>
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7fe faad 	bl	80054a4 <_free_r>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8006f4e:	e7c1      	b.n	8006ed4 <__sflush_r+0x1c>
 8006f50:	6a21      	ldr	r1, [r4, #32]
 8006f52:	2301      	movs	r3, #1
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b0      	blx	r6
 8006f58:	1c41      	adds	r1, r0, #1
 8006f5a:	d1c7      	bne.n	8006eec <__sflush_r+0x34>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0c4      	beq.n	8006eec <__sflush_r+0x34>
 8006f62:	2b1d      	cmp	r3, #29
 8006f64:	d001      	beq.n	8006f6a <__sflush_r+0xb2>
 8006f66:	2b16      	cmp	r3, #22
 8006f68:	d101      	bne.n	8006f6e <__sflush_r+0xb6>
 8006f6a:	602f      	str	r7, [r5, #0]
 8006f6c:	e7b1      	b.n	8006ed2 <__sflush_r+0x1a>
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f74:	81a3      	strh	r3, [r4, #12]
 8006f76:	e7ad      	b.n	8006ed4 <__sflush_r+0x1c>
 8006f78:	690f      	ldr	r7, [r1, #16]
 8006f7a:	2f00      	cmp	r7, #0
 8006f7c:	d0a9      	beq.n	8006ed2 <__sflush_r+0x1a>
 8006f7e:	0793      	lsls	r3, r2, #30
 8006f80:	680e      	ldr	r6, [r1, #0]
 8006f82:	bf08      	it	eq
 8006f84:	694b      	ldreq	r3, [r1, #20]
 8006f86:	600f      	str	r7, [r1, #0]
 8006f88:	bf18      	it	ne
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	eba6 0807 	sub.w	r8, r6, r7
 8006f90:	608b      	str	r3, [r1, #8]
 8006f92:	f1b8 0f00 	cmp.w	r8, #0
 8006f96:	dd9c      	ble.n	8006ed2 <__sflush_r+0x1a>
 8006f98:	6a21      	ldr	r1, [r4, #32]
 8006f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	463a      	mov	r2, r7
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b0      	blx	r6
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	dc06      	bgt.n	8006fb6 <__sflush_r+0xfe>
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fae:	81a3      	strh	r3, [r4, #12]
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e78e      	b.n	8006ed4 <__sflush_r+0x1c>
 8006fb6:	4407      	add	r7, r0
 8006fb8:	eba8 0800 	sub.w	r8, r8, r0
 8006fbc:	e7e9      	b.n	8006f92 <__sflush_r+0xda>
 8006fbe:	bf00      	nop
 8006fc0:	20400001 	.word	0x20400001

08006fc4 <_fflush_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	690b      	ldr	r3, [r1, #16]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	460c      	mov	r4, r1
 8006fcc:	b913      	cbnz	r3, 8006fd4 <_fflush_r+0x10>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	b118      	cbz	r0, 8006fde <_fflush_r+0x1a>
 8006fd6:	6983      	ldr	r3, [r0, #24]
 8006fd8:	b90b      	cbnz	r3, 8006fde <_fflush_r+0x1a>
 8006fda:	f000 f887 	bl	80070ec <__sinit>
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <_fflush_r+0x6c>)
 8006fe0:	429c      	cmp	r4, r3
 8006fe2:	d11b      	bne.n	800701c <_fflush_r+0x58>
 8006fe4:	686c      	ldr	r4, [r5, #4]
 8006fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0ef      	beq.n	8006fce <_fflush_r+0xa>
 8006fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ff0:	07d0      	lsls	r0, r2, #31
 8006ff2:	d404      	bmi.n	8006ffe <_fflush_r+0x3a>
 8006ff4:	0599      	lsls	r1, r3, #22
 8006ff6:	d402      	bmi.n	8006ffe <_fflush_r+0x3a>
 8006ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ffa:	f000 f91a 	bl	8007232 <__retarget_lock_acquire_recursive>
 8006ffe:	4628      	mov	r0, r5
 8007000:	4621      	mov	r1, r4
 8007002:	f7ff ff59 	bl	8006eb8 <__sflush_r>
 8007006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007008:	07da      	lsls	r2, r3, #31
 800700a:	4605      	mov	r5, r0
 800700c:	d4e0      	bmi.n	8006fd0 <_fflush_r+0xc>
 800700e:	89a3      	ldrh	r3, [r4, #12]
 8007010:	059b      	lsls	r3, r3, #22
 8007012:	d4dd      	bmi.n	8006fd0 <_fflush_r+0xc>
 8007014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007016:	f000 f90d 	bl	8007234 <__retarget_lock_release_recursive>
 800701a:	e7d9      	b.n	8006fd0 <_fflush_r+0xc>
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <_fflush_r+0x70>)
 800701e:	429c      	cmp	r4, r3
 8007020:	d101      	bne.n	8007026 <_fflush_r+0x62>
 8007022:	68ac      	ldr	r4, [r5, #8]
 8007024:	e7df      	b.n	8006fe6 <_fflush_r+0x22>
 8007026:	4b04      	ldr	r3, [pc, #16]	; (8007038 <_fflush_r+0x74>)
 8007028:	429c      	cmp	r4, r3
 800702a:	bf08      	it	eq
 800702c:	68ec      	ldreq	r4, [r5, #12]
 800702e:	e7da      	b.n	8006fe6 <_fflush_r+0x22>
 8007030:	08062b80 	.word	0x08062b80
 8007034:	08062ba0 	.word	0x08062ba0
 8007038:	08062b60 	.word	0x08062b60

0800703c <std>:
 800703c:	2300      	movs	r3, #0
 800703e:	b510      	push	{r4, lr}
 8007040:	4604      	mov	r4, r0
 8007042:	e9c0 3300 	strd	r3, r3, [r0]
 8007046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800704a:	6083      	str	r3, [r0, #8]
 800704c:	8181      	strh	r1, [r0, #12]
 800704e:	6643      	str	r3, [r0, #100]	; 0x64
 8007050:	81c2      	strh	r2, [r0, #14]
 8007052:	6183      	str	r3, [r0, #24]
 8007054:	4619      	mov	r1, r3
 8007056:	2208      	movs	r2, #8
 8007058:	305c      	adds	r0, #92	; 0x5c
 800705a:	f7fe fa1b 	bl	8005494 <memset>
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <std+0x38>)
 8007060:	6263      	str	r3, [r4, #36]	; 0x24
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <std+0x3c>)
 8007064:	62a3      	str	r3, [r4, #40]	; 0x28
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <std+0x40>)
 8007068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <std+0x44>)
 800706c:	6224      	str	r4, [r4, #32]
 800706e:	6323      	str	r3, [r4, #48]	; 0x30
 8007070:	bd10      	pop	{r4, pc}
 8007072:	bf00      	nop
 8007074:	08007fe9 	.word	0x08007fe9
 8007078:	0800800b 	.word	0x0800800b
 800707c:	08008043 	.word	0x08008043
 8007080:	08008067 	.word	0x08008067

08007084 <_cleanup_r>:
 8007084:	4901      	ldr	r1, [pc, #4]	; (800708c <_cleanup_r+0x8>)
 8007086:	f000 b8af 	b.w	80071e8 <_fwalk_reent>
 800708a:	bf00      	nop
 800708c:	08006fc5 	.word	0x08006fc5

08007090 <__sfmoreglue>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	1e4a      	subs	r2, r1, #1
 8007094:	2568      	movs	r5, #104	; 0x68
 8007096:	4355      	muls	r5, r2
 8007098:	460e      	mov	r6, r1
 800709a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800709e:	f7fe fa51 	bl	8005544 <_malloc_r>
 80070a2:	4604      	mov	r4, r0
 80070a4:	b140      	cbz	r0, 80070b8 <__sfmoreglue+0x28>
 80070a6:	2100      	movs	r1, #0
 80070a8:	e9c0 1600 	strd	r1, r6, [r0]
 80070ac:	300c      	adds	r0, #12
 80070ae:	60a0      	str	r0, [r4, #8]
 80070b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070b4:	f7fe f9ee 	bl	8005494 <memset>
 80070b8:	4620      	mov	r0, r4
 80070ba:	bd70      	pop	{r4, r5, r6, pc}

080070bc <__sfp_lock_acquire>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__sfp_lock_acquire+0x8>)
 80070be:	f000 b8b8 	b.w	8007232 <__retarget_lock_acquire_recursive>
 80070c2:	bf00      	nop
 80070c4:	20001fb4 	.word	0x20001fb4

080070c8 <__sfp_lock_release>:
 80070c8:	4801      	ldr	r0, [pc, #4]	; (80070d0 <__sfp_lock_release+0x8>)
 80070ca:	f000 b8b3 	b.w	8007234 <__retarget_lock_release_recursive>
 80070ce:	bf00      	nop
 80070d0:	20001fb4 	.word	0x20001fb4

080070d4 <__sinit_lock_acquire>:
 80070d4:	4801      	ldr	r0, [pc, #4]	; (80070dc <__sinit_lock_acquire+0x8>)
 80070d6:	f000 b8ac 	b.w	8007232 <__retarget_lock_acquire_recursive>
 80070da:	bf00      	nop
 80070dc:	20001faf 	.word	0x20001faf

080070e0 <__sinit_lock_release>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__sinit_lock_release+0x8>)
 80070e2:	f000 b8a7 	b.w	8007234 <__retarget_lock_release_recursive>
 80070e6:	bf00      	nop
 80070e8:	20001faf 	.word	0x20001faf

080070ec <__sinit>:
 80070ec:	b510      	push	{r4, lr}
 80070ee:	4604      	mov	r4, r0
 80070f0:	f7ff fff0 	bl	80070d4 <__sinit_lock_acquire>
 80070f4:	69a3      	ldr	r3, [r4, #24]
 80070f6:	b11b      	cbz	r3, 8007100 <__sinit+0x14>
 80070f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070fc:	f7ff bff0 	b.w	80070e0 <__sinit_lock_release>
 8007100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007104:	6523      	str	r3, [r4, #80]	; 0x50
 8007106:	4b13      	ldr	r3, [pc, #76]	; (8007154 <__sinit+0x68>)
 8007108:	4a13      	ldr	r2, [pc, #76]	; (8007158 <__sinit+0x6c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	62a2      	str	r2, [r4, #40]	; 0x28
 800710e:	42a3      	cmp	r3, r4
 8007110:	bf04      	itt	eq
 8007112:	2301      	moveq	r3, #1
 8007114:	61a3      	streq	r3, [r4, #24]
 8007116:	4620      	mov	r0, r4
 8007118:	f000 f820 	bl	800715c <__sfp>
 800711c:	6060      	str	r0, [r4, #4]
 800711e:	4620      	mov	r0, r4
 8007120:	f000 f81c 	bl	800715c <__sfp>
 8007124:	60a0      	str	r0, [r4, #8]
 8007126:	4620      	mov	r0, r4
 8007128:	f000 f818 	bl	800715c <__sfp>
 800712c:	2200      	movs	r2, #0
 800712e:	60e0      	str	r0, [r4, #12]
 8007130:	2104      	movs	r1, #4
 8007132:	6860      	ldr	r0, [r4, #4]
 8007134:	f7ff ff82 	bl	800703c <std>
 8007138:	68a0      	ldr	r0, [r4, #8]
 800713a:	2201      	movs	r2, #1
 800713c:	2109      	movs	r1, #9
 800713e:	f7ff ff7d 	bl	800703c <std>
 8007142:	68e0      	ldr	r0, [r4, #12]
 8007144:	2202      	movs	r2, #2
 8007146:	2112      	movs	r1, #18
 8007148:	f7ff ff78 	bl	800703c <std>
 800714c:	2301      	movs	r3, #1
 800714e:	61a3      	str	r3, [r4, #24]
 8007150:	e7d2      	b.n	80070f8 <__sinit+0xc>
 8007152:	bf00      	nop
 8007154:	08062a94 	.word	0x08062a94
 8007158:	08007085 	.word	0x08007085

0800715c <__sfp>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	4607      	mov	r7, r0
 8007160:	f7ff ffac 	bl	80070bc <__sfp_lock_acquire>
 8007164:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <__sfp+0x84>)
 8007166:	681e      	ldr	r6, [r3, #0]
 8007168:	69b3      	ldr	r3, [r6, #24]
 800716a:	b913      	cbnz	r3, 8007172 <__sfp+0x16>
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff ffbd 	bl	80070ec <__sinit>
 8007172:	3648      	adds	r6, #72	; 0x48
 8007174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007178:	3b01      	subs	r3, #1
 800717a:	d503      	bpl.n	8007184 <__sfp+0x28>
 800717c:	6833      	ldr	r3, [r6, #0]
 800717e:	b30b      	cbz	r3, 80071c4 <__sfp+0x68>
 8007180:	6836      	ldr	r6, [r6, #0]
 8007182:	e7f7      	b.n	8007174 <__sfp+0x18>
 8007184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007188:	b9d5      	cbnz	r5, 80071c0 <__sfp+0x64>
 800718a:	4b16      	ldr	r3, [pc, #88]	; (80071e4 <__sfp+0x88>)
 800718c:	60e3      	str	r3, [r4, #12]
 800718e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007192:	6665      	str	r5, [r4, #100]	; 0x64
 8007194:	f000 f84c 	bl	8007230 <__retarget_lock_init_recursive>
 8007198:	f7ff ff96 	bl	80070c8 <__sfp_lock_release>
 800719c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071a4:	6025      	str	r5, [r4, #0]
 80071a6:	61a5      	str	r5, [r4, #24]
 80071a8:	2208      	movs	r2, #8
 80071aa:	4629      	mov	r1, r5
 80071ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071b0:	f7fe f970 	bl	8005494 <memset>
 80071b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071bc:	4620      	mov	r0, r4
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c0:	3468      	adds	r4, #104	; 0x68
 80071c2:	e7d9      	b.n	8007178 <__sfp+0x1c>
 80071c4:	2104      	movs	r1, #4
 80071c6:	4638      	mov	r0, r7
 80071c8:	f7ff ff62 	bl	8007090 <__sfmoreglue>
 80071cc:	4604      	mov	r4, r0
 80071ce:	6030      	str	r0, [r6, #0]
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d1d5      	bne.n	8007180 <__sfp+0x24>
 80071d4:	f7ff ff78 	bl	80070c8 <__sfp_lock_release>
 80071d8:	230c      	movs	r3, #12
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	e7ee      	b.n	80071bc <__sfp+0x60>
 80071de:	bf00      	nop
 80071e0:	08062a94 	.word	0x08062a94
 80071e4:	ffff0001 	.word	0xffff0001

080071e8 <_fwalk_reent>:
 80071e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ec:	4606      	mov	r6, r0
 80071ee:	4688      	mov	r8, r1
 80071f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071f4:	2700      	movs	r7, #0
 80071f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071fa:	f1b9 0901 	subs.w	r9, r9, #1
 80071fe:	d505      	bpl.n	800720c <_fwalk_reent+0x24>
 8007200:	6824      	ldr	r4, [r4, #0]
 8007202:	2c00      	cmp	r4, #0
 8007204:	d1f7      	bne.n	80071f6 <_fwalk_reent+0xe>
 8007206:	4638      	mov	r0, r7
 8007208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800720c:	89ab      	ldrh	r3, [r5, #12]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d907      	bls.n	8007222 <_fwalk_reent+0x3a>
 8007212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007216:	3301      	adds	r3, #1
 8007218:	d003      	beq.n	8007222 <_fwalk_reent+0x3a>
 800721a:	4629      	mov	r1, r5
 800721c:	4630      	mov	r0, r6
 800721e:	47c0      	blx	r8
 8007220:	4307      	orrs	r7, r0
 8007222:	3568      	adds	r5, #104	; 0x68
 8007224:	e7e9      	b.n	80071fa <_fwalk_reent+0x12>
	...

08007228 <_localeconv_r>:
 8007228:	4800      	ldr	r0, [pc, #0]	; (800722c <_localeconv_r+0x4>)
 800722a:	4770      	bx	lr
 800722c:	2000079c 	.word	0x2000079c

08007230 <__retarget_lock_init_recursive>:
 8007230:	4770      	bx	lr

08007232 <__retarget_lock_acquire_recursive>:
 8007232:	4770      	bx	lr

08007234 <__retarget_lock_release_recursive>:
 8007234:	4770      	bx	lr

08007236 <__swhatbuf_r>:
 8007236:	b570      	push	{r4, r5, r6, lr}
 8007238:	460e      	mov	r6, r1
 800723a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723e:	2900      	cmp	r1, #0
 8007240:	b096      	sub	sp, #88	; 0x58
 8007242:	4614      	mov	r4, r2
 8007244:	461d      	mov	r5, r3
 8007246:	da07      	bge.n	8007258 <__swhatbuf_r+0x22>
 8007248:	2300      	movs	r3, #0
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	89b3      	ldrh	r3, [r6, #12]
 800724e:	061a      	lsls	r2, r3, #24
 8007250:	d410      	bmi.n	8007274 <__swhatbuf_r+0x3e>
 8007252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007256:	e00e      	b.n	8007276 <__swhatbuf_r+0x40>
 8007258:	466a      	mov	r2, sp
 800725a:	f000 ff5b 	bl	8008114 <_fstat_r>
 800725e:	2800      	cmp	r0, #0
 8007260:	dbf2      	blt.n	8007248 <__swhatbuf_r+0x12>
 8007262:	9a01      	ldr	r2, [sp, #4]
 8007264:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007268:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800726c:	425a      	negs	r2, r3
 800726e:	415a      	adcs	r2, r3
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	e7ee      	b.n	8007252 <__swhatbuf_r+0x1c>
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	2000      	movs	r0, #0
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	b016      	add	sp, #88	; 0x58
 800727c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007280 <__smakebuf_r>:
 8007280:	898b      	ldrh	r3, [r1, #12]
 8007282:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007284:	079d      	lsls	r5, r3, #30
 8007286:	4606      	mov	r6, r0
 8007288:	460c      	mov	r4, r1
 800728a:	d507      	bpl.n	800729c <__smakebuf_r+0x1c>
 800728c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	2301      	movs	r3, #1
 8007296:	6163      	str	r3, [r4, #20]
 8007298:	b002      	add	sp, #8
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	ab01      	add	r3, sp, #4
 800729e:	466a      	mov	r2, sp
 80072a0:	f7ff ffc9 	bl	8007236 <__swhatbuf_r>
 80072a4:	9900      	ldr	r1, [sp, #0]
 80072a6:	4605      	mov	r5, r0
 80072a8:	4630      	mov	r0, r6
 80072aa:	f7fe f94b 	bl	8005544 <_malloc_r>
 80072ae:	b948      	cbnz	r0, 80072c4 <__smakebuf_r+0x44>
 80072b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b4:	059a      	lsls	r2, r3, #22
 80072b6:	d4ef      	bmi.n	8007298 <__smakebuf_r+0x18>
 80072b8:	f023 0303 	bic.w	r3, r3, #3
 80072bc:	f043 0302 	orr.w	r3, r3, #2
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	e7e3      	b.n	800728c <__smakebuf_r+0xc>
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <__smakebuf_r+0x7c>)
 80072c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	6020      	str	r0, [r4, #0]
 80072cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d0:	81a3      	strh	r3, [r4, #12]
 80072d2:	9b00      	ldr	r3, [sp, #0]
 80072d4:	6163      	str	r3, [r4, #20]
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	6120      	str	r0, [r4, #16]
 80072da:	b15b      	cbz	r3, 80072f4 <__smakebuf_r+0x74>
 80072dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072e0:	4630      	mov	r0, r6
 80072e2:	f000 ff29 	bl	8008138 <_isatty_r>
 80072e6:	b128      	cbz	r0, 80072f4 <__smakebuf_r+0x74>
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	f043 0301 	orr.w	r3, r3, #1
 80072f2:	81a3      	strh	r3, [r4, #12]
 80072f4:	89a0      	ldrh	r0, [r4, #12]
 80072f6:	4305      	orrs	r5, r0
 80072f8:	81a5      	strh	r5, [r4, #12]
 80072fa:	e7cd      	b.n	8007298 <__smakebuf_r+0x18>
 80072fc:	08007085 	.word	0x08007085

08007300 <__malloc_lock>:
 8007300:	4801      	ldr	r0, [pc, #4]	; (8007308 <__malloc_lock+0x8>)
 8007302:	f7ff bf96 	b.w	8007232 <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	20001fb0 	.word	0x20001fb0

0800730c <__malloc_unlock>:
 800730c:	4801      	ldr	r0, [pc, #4]	; (8007314 <__malloc_unlock+0x8>)
 800730e:	f7ff bf91 	b.w	8007234 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	20001fb0 	.word	0x20001fb0

08007318 <_Balloc>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	b976      	cbnz	r6, 8007340 <_Balloc+0x28>
 8007322:	2010      	movs	r0, #16
 8007324:	f7fe f8a0 	bl	8005468 <malloc>
 8007328:	4602      	mov	r2, r0
 800732a:	6260      	str	r0, [r4, #36]	; 0x24
 800732c:	b920      	cbnz	r0, 8007338 <_Balloc+0x20>
 800732e:	4b18      	ldr	r3, [pc, #96]	; (8007390 <_Balloc+0x78>)
 8007330:	4818      	ldr	r0, [pc, #96]	; (8007394 <_Balloc+0x7c>)
 8007332:	2166      	movs	r1, #102	; 0x66
 8007334:	f000 feae 	bl	8008094 <__assert_func>
 8007338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800733c:	6006      	str	r6, [r0, #0]
 800733e:	60c6      	str	r6, [r0, #12]
 8007340:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007342:	68f3      	ldr	r3, [r6, #12]
 8007344:	b183      	cbz	r3, 8007368 <_Balloc+0x50>
 8007346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800734e:	b9b8      	cbnz	r0, 8007380 <_Balloc+0x68>
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f605 	lsl.w	r6, r1, r5
 8007356:	1d72      	adds	r2, r6, #5
 8007358:	0092      	lsls	r2, r2, #2
 800735a:	4620      	mov	r0, r4
 800735c:	f000 fb5a 	bl	8007a14 <_calloc_r>
 8007360:	b160      	cbz	r0, 800737c <_Balloc+0x64>
 8007362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007366:	e00e      	b.n	8007386 <_Balloc+0x6e>
 8007368:	2221      	movs	r2, #33	; 0x21
 800736a:	2104      	movs	r1, #4
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fb51 	bl	8007a14 <_calloc_r>
 8007372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007374:	60f0      	str	r0, [r6, #12]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e4      	bne.n	8007346 <_Balloc+0x2e>
 800737c:	2000      	movs	r0, #0
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	6802      	ldr	r2, [r0, #0]
 8007382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007386:	2300      	movs	r3, #0
 8007388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800738c:	e7f7      	b.n	800737e <_Balloc+0x66>
 800738e:	bf00      	nop
 8007390:	08062ad9 	.word	0x08062ad9
 8007394:	08062bc0 	.word	0x08062bc0

08007398 <_Bfree>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800739c:	4605      	mov	r5, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	b976      	cbnz	r6, 80073c0 <_Bfree+0x28>
 80073a2:	2010      	movs	r0, #16
 80073a4:	f7fe f860 	bl	8005468 <malloc>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6268      	str	r0, [r5, #36]	; 0x24
 80073ac:	b920      	cbnz	r0, 80073b8 <_Bfree+0x20>
 80073ae:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <_Bfree+0x3c>)
 80073b0:	4809      	ldr	r0, [pc, #36]	; (80073d8 <_Bfree+0x40>)
 80073b2:	218a      	movs	r1, #138	; 0x8a
 80073b4:	f000 fe6e 	bl	8008094 <__assert_func>
 80073b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073bc:	6006      	str	r6, [r0, #0]
 80073be:	60c6      	str	r6, [r0, #12]
 80073c0:	b13c      	cbz	r4, 80073d2 <_Bfree+0x3a>
 80073c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073c4:	6862      	ldr	r2, [r4, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073cc:	6021      	str	r1, [r4, #0]
 80073ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	08062ad9 	.word	0x08062ad9
 80073d8:	08062bc0 	.word	0x08062bc0

080073dc <__multadd>:
 80073dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e0:	690e      	ldr	r6, [r1, #16]
 80073e2:	4607      	mov	r7, r0
 80073e4:	4698      	mov	r8, r3
 80073e6:	460c      	mov	r4, r1
 80073e8:	f101 0014 	add.w	r0, r1, #20
 80073ec:	2300      	movs	r3, #0
 80073ee:	6805      	ldr	r5, [r0, #0]
 80073f0:	b2a9      	uxth	r1, r5
 80073f2:	fb02 8101 	mla	r1, r2, r1, r8
 80073f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80073fa:	0c2d      	lsrs	r5, r5, #16
 80073fc:	fb02 c505 	mla	r5, r2, r5, ip
 8007400:	b289      	uxth	r1, r1
 8007402:	3301      	adds	r3, #1
 8007404:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007408:	429e      	cmp	r6, r3
 800740a:	f840 1b04 	str.w	r1, [r0], #4
 800740e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007412:	dcec      	bgt.n	80073ee <__multadd+0x12>
 8007414:	f1b8 0f00 	cmp.w	r8, #0
 8007418:	d022      	beq.n	8007460 <__multadd+0x84>
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	42b3      	cmp	r3, r6
 800741e:	dc19      	bgt.n	8007454 <__multadd+0x78>
 8007420:	6861      	ldr	r1, [r4, #4]
 8007422:	4638      	mov	r0, r7
 8007424:	3101      	adds	r1, #1
 8007426:	f7ff ff77 	bl	8007318 <_Balloc>
 800742a:	4605      	mov	r5, r0
 800742c:	b928      	cbnz	r0, 800743a <__multadd+0x5e>
 800742e:	4602      	mov	r2, r0
 8007430:	4b0d      	ldr	r3, [pc, #52]	; (8007468 <__multadd+0x8c>)
 8007432:	480e      	ldr	r0, [pc, #56]	; (800746c <__multadd+0x90>)
 8007434:	21b5      	movs	r1, #181	; 0xb5
 8007436:	f000 fe2d 	bl	8008094 <__assert_func>
 800743a:	6922      	ldr	r2, [r4, #16]
 800743c:	3202      	adds	r2, #2
 800743e:	f104 010c 	add.w	r1, r4, #12
 8007442:	0092      	lsls	r2, r2, #2
 8007444:	300c      	adds	r0, #12
 8007446:	f7fe f817 	bl	8005478 <memcpy>
 800744a:	4621      	mov	r1, r4
 800744c:	4638      	mov	r0, r7
 800744e:	f7ff ffa3 	bl	8007398 <_Bfree>
 8007452:	462c      	mov	r4, r5
 8007454:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007458:	3601      	adds	r6, #1
 800745a:	f8c3 8014 	str.w	r8, [r3, #20]
 800745e:	6126      	str	r6, [r4, #16]
 8007460:	4620      	mov	r0, r4
 8007462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007466:	bf00      	nop
 8007468:	08062b4f 	.word	0x08062b4f
 800746c:	08062bc0 	.word	0x08062bc0

08007470 <__hi0bits>:
 8007470:	0c03      	lsrs	r3, r0, #16
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	b9d3      	cbnz	r3, 80074ac <__hi0bits+0x3c>
 8007476:	0400      	lsls	r0, r0, #16
 8007478:	2310      	movs	r3, #16
 800747a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800747e:	bf04      	itt	eq
 8007480:	0200      	lsleq	r0, r0, #8
 8007482:	3308      	addeq	r3, #8
 8007484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007488:	bf04      	itt	eq
 800748a:	0100      	lsleq	r0, r0, #4
 800748c:	3304      	addeq	r3, #4
 800748e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007492:	bf04      	itt	eq
 8007494:	0080      	lsleq	r0, r0, #2
 8007496:	3302      	addeq	r3, #2
 8007498:	2800      	cmp	r0, #0
 800749a:	db05      	blt.n	80074a8 <__hi0bits+0x38>
 800749c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80074a0:	f103 0301 	add.w	r3, r3, #1
 80074a4:	bf08      	it	eq
 80074a6:	2320      	moveq	r3, #32
 80074a8:	4618      	mov	r0, r3
 80074aa:	4770      	bx	lr
 80074ac:	2300      	movs	r3, #0
 80074ae:	e7e4      	b.n	800747a <__hi0bits+0xa>

080074b0 <__lo0bits>:
 80074b0:	6803      	ldr	r3, [r0, #0]
 80074b2:	f013 0207 	ands.w	r2, r3, #7
 80074b6:	4601      	mov	r1, r0
 80074b8:	d00b      	beq.n	80074d2 <__lo0bits+0x22>
 80074ba:	07da      	lsls	r2, r3, #31
 80074bc:	d424      	bmi.n	8007508 <__lo0bits+0x58>
 80074be:	0798      	lsls	r0, r3, #30
 80074c0:	bf49      	itett	mi
 80074c2:	085b      	lsrmi	r3, r3, #1
 80074c4:	089b      	lsrpl	r3, r3, #2
 80074c6:	2001      	movmi	r0, #1
 80074c8:	600b      	strmi	r3, [r1, #0]
 80074ca:	bf5c      	itt	pl
 80074cc:	600b      	strpl	r3, [r1, #0]
 80074ce:	2002      	movpl	r0, #2
 80074d0:	4770      	bx	lr
 80074d2:	b298      	uxth	r0, r3
 80074d4:	b9b0      	cbnz	r0, 8007504 <__lo0bits+0x54>
 80074d6:	0c1b      	lsrs	r3, r3, #16
 80074d8:	2010      	movs	r0, #16
 80074da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074de:	bf04      	itt	eq
 80074e0:	0a1b      	lsreq	r3, r3, #8
 80074e2:	3008      	addeq	r0, #8
 80074e4:	071a      	lsls	r2, r3, #28
 80074e6:	bf04      	itt	eq
 80074e8:	091b      	lsreq	r3, r3, #4
 80074ea:	3004      	addeq	r0, #4
 80074ec:	079a      	lsls	r2, r3, #30
 80074ee:	bf04      	itt	eq
 80074f0:	089b      	lsreq	r3, r3, #2
 80074f2:	3002      	addeq	r0, #2
 80074f4:	07da      	lsls	r2, r3, #31
 80074f6:	d403      	bmi.n	8007500 <__lo0bits+0x50>
 80074f8:	085b      	lsrs	r3, r3, #1
 80074fa:	f100 0001 	add.w	r0, r0, #1
 80074fe:	d005      	beq.n	800750c <__lo0bits+0x5c>
 8007500:	600b      	str	r3, [r1, #0]
 8007502:	4770      	bx	lr
 8007504:	4610      	mov	r0, r2
 8007506:	e7e8      	b.n	80074da <__lo0bits+0x2a>
 8007508:	2000      	movs	r0, #0
 800750a:	4770      	bx	lr
 800750c:	2020      	movs	r0, #32
 800750e:	4770      	bx	lr

08007510 <__i2b>:
 8007510:	b510      	push	{r4, lr}
 8007512:	460c      	mov	r4, r1
 8007514:	2101      	movs	r1, #1
 8007516:	f7ff feff 	bl	8007318 <_Balloc>
 800751a:	4602      	mov	r2, r0
 800751c:	b928      	cbnz	r0, 800752a <__i2b+0x1a>
 800751e:	4b05      	ldr	r3, [pc, #20]	; (8007534 <__i2b+0x24>)
 8007520:	4805      	ldr	r0, [pc, #20]	; (8007538 <__i2b+0x28>)
 8007522:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007526:	f000 fdb5 	bl	8008094 <__assert_func>
 800752a:	2301      	movs	r3, #1
 800752c:	6144      	str	r4, [r0, #20]
 800752e:	6103      	str	r3, [r0, #16]
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	08062b4f 	.word	0x08062b4f
 8007538:	08062bc0 	.word	0x08062bc0

0800753c <__multiply>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	4614      	mov	r4, r2
 8007542:	690a      	ldr	r2, [r1, #16]
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	bfb8      	it	lt
 800754a:	460b      	movlt	r3, r1
 800754c:	460d      	mov	r5, r1
 800754e:	bfbc      	itt	lt
 8007550:	4625      	movlt	r5, r4
 8007552:	461c      	movlt	r4, r3
 8007554:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007558:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800755c:	68ab      	ldr	r3, [r5, #8]
 800755e:	6869      	ldr	r1, [r5, #4]
 8007560:	eb0a 0709 	add.w	r7, sl, r9
 8007564:	42bb      	cmp	r3, r7
 8007566:	b085      	sub	sp, #20
 8007568:	bfb8      	it	lt
 800756a:	3101      	addlt	r1, #1
 800756c:	f7ff fed4 	bl	8007318 <_Balloc>
 8007570:	b930      	cbnz	r0, 8007580 <__multiply+0x44>
 8007572:	4602      	mov	r2, r0
 8007574:	4b42      	ldr	r3, [pc, #264]	; (8007680 <__multiply+0x144>)
 8007576:	4843      	ldr	r0, [pc, #268]	; (8007684 <__multiply+0x148>)
 8007578:	f240 115d 	movw	r1, #349	; 0x15d
 800757c:	f000 fd8a 	bl	8008094 <__assert_func>
 8007580:	f100 0614 	add.w	r6, r0, #20
 8007584:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007588:	4633      	mov	r3, r6
 800758a:	2200      	movs	r2, #0
 800758c:	4543      	cmp	r3, r8
 800758e:	d31e      	bcc.n	80075ce <__multiply+0x92>
 8007590:	f105 0c14 	add.w	ip, r5, #20
 8007594:	f104 0314 	add.w	r3, r4, #20
 8007598:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800759c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80075a0:	9202      	str	r2, [sp, #8]
 80075a2:	ebac 0205 	sub.w	r2, ip, r5
 80075a6:	3a15      	subs	r2, #21
 80075a8:	f022 0203 	bic.w	r2, r2, #3
 80075ac:	3204      	adds	r2, #4
 80075ae:	f105 0115 	add.w	r1, r5, #21
 80075b2:	458c      	cmp	ip, r1
 80075b4:	bf38      	it	cc
 80075b6:	2204      	movcc	r2, #4
 80075b8:	9201      	str	r2, [sp, #4]
 80075ba:	9a02      	ldr	r2, [sp, #8]
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d808      	bhi.n	80075d4 <__multiply+0x98>
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	dc55      	bgt.n	8007672 <__multiply+0x136>
 80075c6:	6107      	str	r7, [r0, #16]
 80075c8:	b005      	add	sp, #20
 80075ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ce:	f843 2b04 	str.w	r2, [r3], #4
 80075d2:	e7db      	b.n	800758c <__multiply+0x50>
 80075d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80075d8:	f1ba 0f00 	cmp.w	sl, #0
 80075dc:	d020      	beq.n	8007620 <__multiply+0xe4>
 80075de:	f105 0e14 	add.w	lr, r5, #20
 80075e2:	46b1      	mov	r9, r6
 80075e4:	2200      	movs	r2, #0
 80075e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80075ea:	f8d9 b000 	ldr.w	fp, [r9]
 80075ee:	b2a1      	uxth	r1, r4
 80075f0:	fa1f fb8b 	uxth.w	fp, fp
 80075f4:	fb0a b101 	mla	r1, sl, r1, fp
 80075f8:	4411      	add	r1, r2
 80075fa:	f8d9 2000 	ldr.w	r2, [r9]
 80075fe:	0c24      	lsrs	r4, r4, #16
 8007600:	0c12      	lsrs	r2, r2, #16
 8007602:	fb0a 2404 	mla	r4, sl, r4, r2
 8007606:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800760a:	b289      	uxth	r1, r1
 800760c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007610:	45f4      	cmp	ip, lr
 8007612:	f849 1b04 	str.w	r1, [r9], #4
 8007616:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800761a:	d8e4      	bhi.n	80075e6 <__multiply+0xaa>
 800761c:	9901      	ldr	r1, [sp, #4]
 800761e:	5072      	str	r2, [r6, r1]
 8007620:	9a03      	ldr	r2, [sp, #12]
 8007622:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007626:	3304      	adds	r3, #4
 8007628:	f1b9 0f00 	cmp.w	r9, #0
 800762c:	d01f      	beq.n	800766e <__multiply+0x132>
 800762e:	6834      	ldr	r4, [r6, #0]
 8007630:	f105 0114 	add.w	r1, r5, #20
 8007634:	46b6      	mov	lr, r6
 8007636:	f04f 0a00 	mov.w	sl, #0
 800763a:	880a      	ldrh	r2, [r1, #0]
 800763c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007640:	fb09 b202 	mla	r2, r9, r2, fp
 8007644:	4492      	add	sl, r2
 8007646:	b2a4      	uxth	r4, r4
 8007648:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800764c:	f84e 4b04 	str.w	r4, [lr], #4
 8007650:	f851 4b04 	ldr.w	r4, [r1], #4
 8007654:	f8be 2000 	ldrh.w	r2, [lr]
 8007658:	0c24      	lsrs	r4, r4, #16
 800765a:	fb09 2404 	mla	r4, r9, r4, r2
 800765e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007662:	458c      	cmp	ip, r1
 8007664:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007668:	d8e7      	bhi.n	800763a <__multiply+0xfe>
 800766a:	9a01      	ldr	r2, [sp, #4]
 800766c:	50b4      	str	r4, [r6, r2]
 800766e:	3604      	adds	r6, #4
 8007670:	e7a3      	b.n	80075ba <__multiply+0x7e>
 8007672:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1a5      	bne.n	80075c6 <__multiply+0x8a>
 800767a:	3f01      	subs	r7, #1
 800767c:	e7a1      	b.n	80075c2 <__multiply+0x86>
 800767e:	bf00      	nop
 8007680:	08062b4f 	.word	0x08062b4f
 8007684:	08062bc0 	.word	0x08062bc0

08007688 <__pow5mult>:
 8007688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800768c:	4615      	mov	r5, r2
 800768e:	f012 0203 	ands.w	r2, r2, #3
 8007692:	4606      	mov	r6, r0
 8007694:	460f      	mov	r7, r1
 8007696:	d007      	beq.n	80076a8 <__pow5mult+0x20>
 8007698:	4c25      	ldr	r4, [pc, #148]	; (8007730 <__pow5mult+0xa8>)
 800769a:	3a01      	subs	r2, #1
 800769c:	2300      	movs	r3, #0
 800769e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076a2:	f7ff fe9b 	bl	80073dc <__multadd>
 80076a6:	4607      	mov	r7, r0
 80076a8:	10ad      	asrs	r5, r5, #2
 80076aa:	d03d      	beq.n	8007728 <__pow5mult+0xa0>
 80076ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076ae:	b97c      	cbnz	r4, 80076d0 <__pow5mult+0x48>
 80076b0:	2010      	movs	r0, #16
 80076b2:	f7fd fed9 	bl	8005468 <malloc>
 80076b6:	4602      	mov	r2, r0
 80076b8:	6270      	str	r0, [r6, #36]	; 0x24
 80076ba:	b928      	cbnz	r0, 80076c8 <__pow5mult+0x40>
 80076bc:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <__pow5mult+0xac>)
 80076be:	481e      	ldr	r0, [pc, #120]	; (8007738 <__pow5mult+0xb0>)
 80076c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076c4:	f000 fce6 	bl	8008094 <__assert_func>
 80076c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076cc:	6004      	str	r4, [r0, #0]
 80076ce:	60c4      	str	r4, [r0, #12]
 80076d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076d8:	b94c      	cbnz	r4, 80076ee <__pow5mult+0x66>
 80076da:	f240 2171 	movw	r1, #625	; 0x271
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ff16 	bl	8007510 <__i2b>
 80076e4:	2300      	movs	r3, #0
 80076e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80076ea:	4604      	mov	r4, r0
 80076ec:	6003      	str	r3, [r0, #0]
 80076ee:	f04f 0900 	mov.w	r9, #0
 80076f2:	07eb      	lsls	r3, r5, #31
 80076f4:	d50a      	bpl.n	800770c <__pow5mult+0x84>
 80076f6:	4639      	mov	r1, r7
 80076f8:	4622      	mov	r2, r4
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7ff ff1e 	bl	800753c <__multiply>
 8007700:	4639      	mov	r1, r7
 8007702:	4680      	mov	r8, r0
 8007704:	4630      	mov	r0, r6
 8007706:	f7ff fe47 	bl	8007398 <_Bfree>
 800770a:	4647      	mov	r7, r8
 800770c:	106d      	asrs	r5, r5, #1
 800770e:	d00b      	beq.n	8007728 <__pow5mult+0xa0>
 8007710:	6820      	ldr	r0, [r4, #0]
 8007712:	b938      	cbnz	r0, 8007724 <__pow5mult+0x9c>
 8007714:	4622      	mov	r2, r4
 8007716:	4621      	mov	r1, r4
 8007718:	4630      	mov	r0, r6
 800771a:	f7ff ff0f 	bl	800753c <__multiply>
 800771e:	6020      	str	r0, [r4, #0]
 8007720:	f8c0 9000 	str.w	r9, [r0]
 8007724:	4604      	mov	r4, r0
 8007726:	e7e4      	b.n	80076f2 <__pow5mult+0x6a>
 8007728:	4638      	mov	r0, r7
 800772a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800772e:	bf00      	nop
 8007730:	08062d10 	.word	0x08062d10
 8007734:	08062ad9 	.word	0x08062ad9
 8007738:	08062bc0 	.word	0x08062bc0

0800773c <__lshift>:
 800773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	460c      	mov	r4, r1
 8007742:	6849      	ldr	r1, [r1, #4]
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800774a:	68a3      	ldr	r3, [r4, #8]
 800774c:	4607      	mov	r7, r0
 800774e:	4691      	mov	r9, r2
 8007750:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007754:	f108 0601 	add.w	r6, r8, #1
 8007758:	42b3      	cmp	r3, r6
 800775a:	db0b      	blt.n	8007774 <__lshift+0x38>
 800775c:	4638      	mov	r0, r7
 800775e:	f7ff fddb 	bl	8007318 <_Balloc>
 8007762:	4605      	mov	r5, r0
 8007764:	b948      	cbnz	r0, 800777a <__lshift+0x3e>
 8007766:	4602      	mov	r2, r0
 8007768:	4b28      	ldr	r3, [pc, #160]	; (800780c <__lshift+0xd0>)
 800776a:	4829      	ldr	r0, [pc, #164]	; (8007810 <__lshift+0xd4>)
 800776c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007770:	f000 fc90 	bl	8008094 <__assert_func>
 8007774:	3101      	adds	r1, #1
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	e7ee      	b.n	8007758 <__lshift+0x1c>
 800777a:	2300      	movs	r3, #0
 800777c:	f100 0114 	add.w	r1, r0, #20
 8007780:	f100 0210 	add.w	r2, r0, #16
 8007784:	4618      	mov	r0, r3
 8007786:	4553      	cmp	r3, sl
 8007788:	db33      	blt.n	80077f2 <__lshift+0xb6>
 800778a:	6920      	ldr	r0, [r4, #16]
 800778c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007790:	f104 0314 	add.w	r3, r4, #20
 8007794:	f019 091f 	ands.w	r9, r9, #31
 8007798:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800779c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077a0:	d02b      	beq.n	80077fa <__lshift+0xbe>
 80077a2:	f1c9 0e20 	rsb	lr, r9, #32
 80077a6:	468a      	mov	sl, r1
 80077a8:	2200      	movs	r2, #0
 80077aa:	6818      	ldr	r0, [r3, #0]
 80077ac:	fa00 f009 	lsl.w	r0, r0, r9
 80077b0:	4302      	orrs	r2, r0
 80077b2:	f84a 2b04 	str.w	r2, [sl], #4
 80077b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ba:	459c      	cmp	ip, r3
 80077bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80077c0:	d8f3      	bhi.n	80077aa <__lshift+0x6e>
 80077c2:	ebac 0304 	sub.w	r3, ip, r4
 80077c6:	3b15      	subs	r3, #21
 80077c8:	f023 0303 	bic.w	r3, r3, #3
 80077cc:	3304      	adds	r3, #4
 80077ce:	f104 0015 	add.w	r0, r4, #21
 80077d2:	4584      	cmp	ip, r0
 80077d4:	bf38      	it	cc
 80077d6:	2304      	movcc	r3, #4
 80077d8:	50ca      	str	r2, [r1, r3]
 80077da:	b10a      	cbz	r2, 80077e0 <__lshift+0xa4>
 80077dc:	f108 0602 	add.w	r6, r8, #2
 80077e0:	3e01      	subs	r6, #1
 80077e2:	4638      	mov	r0, r7
 80077e4:	612e      	str	r6, [r5, #16]
 80077e6:	4621      	mov	r1, r4
 80077e8:	f7ff fdd6 	bl	8007398 <_Bfree>
 80077ec:	4628      	mov	r0, r5
 80077ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077f6:	3301      	adds	r3, #1
 80077f8:	e7c5      	b.n	8007786 <__lshift+0x4a>
 80077fa:	3904      	subs	r1, #4
 80077fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007800:	f841 2f04 	str.w	r2, [r1, #4]!
 8007804:	459c      	cmp	ip, r3
 8007806:	d8f9      	bhi.n	80077fc <__lshift+0xc0>
 8007808:	e7ea      	b.n	80077e0 <__lshift+0xa4>
 800780a:	bf00      	nop
 800780c:	08062b4f 	.word	0x08062b4f
 8007810:	08062bc0 	.word	0x08062bc0

08007814 <__mcmp>:
 8007814:	b530      	push	{r4, r5, lr}
 8007816:	6902      	ldr	r2, [r0, #16]
 8007818:	690c      	ldr	r4, [r1, #16]
 800781a:	1b12      	subs	r2, r2, r4
 800781c:	d10e      	bne.n	800783c <__mcmp+0x28>
 800781e:	f100 0314 	add.w	r3, r0, #20
 8007822:	3114      	adds	r1, #20
 8007824:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007828:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800782c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007830:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007834:	42a5      	cmp	r5, r4
 8007836:	d003      	beq.n	8007840 <__mcmp+0x2c>
 8007838:	d305      	bcc.n	8007846 <__mcmp+0x32>
 800783a:	2201      	movs	r2, #1
 800783c:	4610      	mov	r0, r2
 800783e:	bd30      	pop	{r4, r5, pc}
 8007840:	4283      	cmp	r3, r0
 8007842:	d3f3      	bcc.n	800782c <__mcmp+0x18>
 8007844:	e7fa      	b.n	800783c <__mcmp+0x28>
 8007846:	f04f 32ff 	mov.w	r2, #4294967295
 800784a:	e7f7      	b.n	800783c <__mcmp+0x28>

0800784c <__mdiff>:
 800784c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007850:	460c      	mov	r4, r1
 8007852:	4606      	mov	r6, r0
 8007854:	4611      	mov	r1, r2
 8007856:	4620      	mov	r0, r4
 8007858:	4617      	mov	r7, r2
 800785a:	f7ff ffdb 	bl	8007814 <__mcmp>
 800785e:	1e05      	subs	r5, r0, #0
 8007860:	d110      	bne.n	8007884 <__mdiff+0x38>
 8007862:	4629      	mov	r1, r5
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff fd57 	bl	8007318 <_Balloc>
 800786a:	b930      	cbnz	r0, 800787a <__mdiff+0x2e>
 800786c:	4b39      	ldr	r3, [pc, #228]	; (8007954 <__mdiff+0x108>)
 800786e:	4602      	mov	r2, r0
 8007870:	f240 2132 	movw	r1, #562	; 0x232
 8007874:	4838      	ldr	r0, [pc, #224]	; (8007958 <__mdiff+0x10c>)
 8007876:	f000 fc0d 	bl	8008094 <__assert_func>
 800787a:	2301      	movs	r3, #1
 800787c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	bfa4      	itt	ge
 8007886:	463b      	movge	r3, r7
 8007888:	4627      	movge	r7, r4
 800788a:	4630      	mov	r0, r6
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	bfa6      	itte	ge
 8007890:	461c      	movge	r4, r3
 8007892:	2500      	movge	r5, #0
 8007894:	2501      	movlt	r5, #1
 8007896:	f7ff fd3f 	bl	8007318 <_Balloc>
 800789a:	b920      	cbnz	r0, 80078a6 <__mdiff+0x5a>
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <__mdiff+0x108>)
 800789e:	4602      	mov	r2, r0
 80078a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078a4:	e7e6      	b.n	8007874 <__mdiff+0x28>
 80078a6:	693e      	ldr	r6, [r7, #16]
 80078a8:	60c5      	str	r5, [r0, #12]
 80078aa:	6925      	ldr	r5, [r4, #16]
 80078ac:	f107 0114 	add.w	r1, r7, #20
 80078b0:	f104 0914 	add.w	r9, r4, #20
 80078b4:	f100 0e14 	add.w	lr, r0, #20
 80078b8:	f107 0210 	add.w	r2, r7, #16
 80078bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80078c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80078c4:	46f2      	mov	sl, lr
 80078c6:	2700      	movs	r7, #0
 80078c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80078cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078d0:	fa1f f883 	uxth.w	r8, r3
 80078d4:	fa17 f78b 	uxtah	r7, r7, fp
 80078d8:	0c1b      	lsrs	r3, r3, #16
 80078da:	eba7 0808 	sub.w	r8, r7, r8
 80078de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078e6:	fa1f f888 	uxth.w	r8, r8
 80078ea:	141f      	asrs	r7, r3, #16
 80078ec:	454d      	cmp	r5, r9
 80078ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078f2:	f84a 3b04 	str.w	r3, [sl], #4
 80078f6:	d8e7      	bhi.n	80078c8 <__mdiff+0x7c>
 80078f8:	1b2b      	subs	r3, r5, r4
 80078fa:	3b15      	subs	r3, #21
 80078fc:	f023 0303 	bic.w	r3, r3, #3
 8007900:	3304      	adds	r3, #4
 8007902:	3415      	adds	r4, #21
 8007904:	42a5      	cmp	r5, r4
 8007906:	bf38      	it	cc
 8007908:	2304      	movcc	r3, #4
 800790a:	4419      	add	r1, r3
 800790c:	4473      	add	r3, lr
 800790e:	469e      	mov	lr, r3
 8007910:	460d      	mov	r5, r1
 8007912:	4565      	cmp	r5, ip
 8007914:	d30e      	bcc.n	8007934 <__mdiff+0xe8>
 8007916:	f10c 0203 	add.w	r2, ip, #3
 800791a:	1a52      	subs	r2, r2, r1
 800791c:	f022 0203 	bic.w	r2, r2, #3
 8007920:	3903      	subs	r1, #3
 8007922:	458c      	cmp	ip, r1
 8007924:	bf38      	it	cc
 8007926:	2200      	movcc	r2, #0
 8007928:	441a      	add	r2, r3
 800792a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800792e:	b17b      	cbz	r3, 8007950 <__mdiff+0x104>
 8007930:	6106      	str	r6, [r0, #16]
 8007932:	e7a5      	b.n	8007880 <__mdiff+0x34>
 8007934:	f855 8b04 	ldr.w	r8, [r5], #4
 8007938:	fa17 f488 	uxtah	r4, r7, r8
 800793c:	1422      	asrs	r2, r4, #16
 800793e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007942:	b2a4      	uxth	r4, r4
 8007944:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007948:	f84e 4b04 	str.w	r4, [lr], #4
 800794c:	1417      	asrs	r7, r2, #16
 800794e:	e7e0      	b.n	8007912 <__mdiff+0xc6>
 8007950:	3e01      	subs	r6, #1
 8007952:	e7ea      	b.n	800792a <__mdiff+0xde>
 8007954:	08062b4f 	.word	0x08062b4f
 8007958:	08062bc0 	.word	0x08062bc0

0800795c <__d2b>:
 800795c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007960:	4689      	mov	r9, r1
 8007962:	2101      	movs	r1, #1
 8007964:	ec57 6b10 	vmov	r6, r7, d0
 8007968:	4690      	mov	r8, r2
 800796a:	f7ff fcd5 	bl	8007318 <_Balloc>
 800796e:	4604      	mov	r4, r0
 8007970:	b930      	cbnz	r0, 8007980 <__d2b+0x24>
 8007972:	4602      	mov	r2, r0
 8007974:	4b25      	ldr	r3, [pc, #148]	; (8007a0c <__d2b+0xb0>)
 8007976:	4826      	ldr	r0, [pc, #152]	; (8007a10 <__d2b+0xb4>)
 8007978:	f240 310a 	movw	r1, #778	; 0x30a
 800797c:	f000 fb8a 	bl	8008094 <__assert_func>
 8007980:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007984:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007988:	bb35      	cbnz	r5, 80079d8 <__d2b+0x7c>
 800798a:	2e00      	cmp	r6, #0
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	d028      	beq.n	80079e2 <__d2b+0x86>
 8007990:	4668      	mov	r0, sp
 8007992:	9600      	str	r6, [sp, #0]
 8007994:	f7ff fd8c 	bl	80074b0 <__lo0bits>
 8007998:	9900      	ldr	r1, [sp, #0]
 800799a:	b300      	cbz	r0, 80079de <__d2b+0x82>
 800799c:	9a01      	ldr	r2, [sp, #4]
 800799e:	f1c0 0320 	rsb	r3, r0, #32
 80079a2:	fa02 f303 	lsl.w	r3, r2, r3
 80079a6:	430b      	orrs	r3, r1
 80079a8:	40c2      	lsrs	r2, r0
 80079aa:	6163      	str	r3, [r4, #20]
 80079ac:	9201      	str	r2, [sp, #4]
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	61a3      	str	r3, [r4, #24]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	bf14      	ite	ne
 80079b6:	2202      	movne	r2, #2
 80079b8:	2201      	moveq	r2, #1
 80079ba:	6122      	str	r2, [r4, #16]
 80079bc:	b1d5      	cbz	r5, 80079f4 <__d2b+0x98>
 80079be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079c2:	4405      	add	r5, r0
 80079c4:	f8c9 5000 	str.w	r5, [r9]
 80079c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079cc:	f8c8 0000 	str.w	r0, [r8]
 80079d0:	4620      	mov	r0, r4
 80079d2:	b003      	add	sp, #12
 80079d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079dc:	e7d5      	b.n	800798a <__d2b+0x2e>
 80079de:	6161      	str	r1, [r4, #20]
 80079e0:	e7e5      	b.n	80079ae <__d2b+0x52>
 80079e2:	a801      	add	r0, sp, #4
 80079e4:	f7ff fd64 	bl	80074b0 <__lo0bits>
 80079e8:	9b01      	ldr	r3, [sp, #4]
 80079ea:	6163      	str	r3, [r4, #20]
 80079ec:	2201      	movs	r2, #1
 80079ee:	6122      	str	r2, [r4, #16]
 80079f0:	3020      	adds	r0, #32
 80079f2:	e7e3      	b.n	80079bc <__d2b+0x60>
 80079f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079fc:	f8c9 0000 	str.w	r0, [r9]
 8007a00:	6918      	ldr	r0, [r3, #16]
 8007a02:	f7ff fd35 	bl	8007470 <__hi0bits>
 8007a06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007a0a:	e7df      	b.n	80079cc <__d2b+0x70>
 8007a0c:	08062b4f 	.word	0x08062b4f
 8007a10:	08062bc0 	.word	0x08062bc0

08007a14 <_calloc_r>:
 8007a14:	b513      	push	{r0, r1, r4, lr}
 8007a16:	434a      	muls	r2, r1
 8007a18:	4611      	mov	r1, r2
 8007a1a:	9201      	str	r2, [sp, #4]
 8007a1c:	f7fd fd92 	bl	8005544 <_malloc_r>
 8007a20:	4604      	mov	r4, r0
 8007a22:	b118      	cbz	r0, 8007a2c <_calloc_r+0x18>
 8007a24:	9a01      	ldr	r2, [sp, #4]
 8007a26:	2100      	movs	r1, #0
 8007a28:	f7fd fd34 	bl	8005494 <memset>
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	b002      	add	sp, #8
 8007a30:	bd10      	pop	{r4, pc}

08007a32 <_realloc_r>:
 8007a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a34:	4607      	mov	r7, r0
 8007a36:	4614      	mov	r4, r2
 8007a38:	460e      	mov	r6, r1
 8007a3a:	b921      	cbnz	r1, 8007a46 <_realloc_r+0x14>
 8007a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a40:	4611      	mov	r1, r2
 8007a42:	f7fd bd7f 	b.w	8005544 <_malloc_r>
 8007a46:	b922      	cbnz	r2, 8007a52 <_realloc_r+0x20>
 8007a48:	f7fd fd2c 	bl	80054a4 <_free_r>
 8007a4c:	4625      	mov	r5, r4
 8007a4e:	4628      	mov	r0, r5
 8007a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a52:	f000 fbbf 	bl	80081d4 <_malloc_usable_size_r>
 8007a56:	42a0      	cmp	r0, r4
 8007a58:	d20f      	bcs.n	8007a7a <_realloc_r+0x48>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f7fd fd71 	bl	8005544 <_malloc_r>
 8007a62:	4605      	mov	r5, r0
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d0f2      	beq.n	8007a4e <_realloc_r+0x1c>
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	f7fd fd04 	bl	8005478 <memcpy>
 8007a70:	4631      	mov	r1, r6
 8007a72:	4638      	mov	r0, r7
 8007a74:	f7fd fd16 	bl	80054a4 <_free_r>
 8007a78:	e7e9      	b.n	8007a4e <_realloc_r+0x1c>
 8007a7a:	4635      	mov	r5, r6
 8007a7c:	e7e7      	b.n	8007a4e <_realloc_r+0x1c>

08007a7e <__ssputs_r>:
 8007a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a82:	688e      	ldr	r6, [r1, #8]
 8007a84:	429e      	cmp	r6, r3
 8007a86:	4682      	mov	sl, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	4690      	mov	r8, r2
 8007a8c:	461f      	mov	r7, r3
 8007a8e:	d838      	bhi.n	8007b02 <__ssputs_r+0x84>
 8007a90:	898a      	ldrh	r2, [r1, #12]
 8007a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a96:	d032      	beq.n	8007afe <__ssputs_r+0x80>
 8007a98:	6825      	ldr	r5, [r4, #0]
 8007a9a:	6909      	ldr	r1, [r1, #16]
 8007a9c:	eba5 0901 	sub.w	r9, r5, r1
 8007aa0:	6965      	ldr	r5, [r4, #20]
 8007aa2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007aaa:	3301      	adds	r3, #1
 8007aac:	444b      	add	r3, r9
 8007aae:	106d      	asrs	r5, r5, #1
 8007ab0:	429d      	cmp	r5, r3
 8007ab2:	bf38      	it	cc
 8007ab4:	461d      	movcc	r5, r3
 8007ab6:	0553      	lsls	r3, r2, #21
 8007ab8:	d531      	bpl.n	8007b1e <__ssputs_r+0xa0>
 8007aba:	4629      	mov	r1, r5
 8007abc:	f7fd fd42 	bl	8005544 <_malloc_r>
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	b950      	cbnz	r0, 8007ada <__ssputs_r+0x5c>
 8007ac4:	230c      	movs	r3, #12
 8007ac6:	f8ca 3000 	str.w	r3, [sl]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	6921      	ldr	r1, [r4, #16]
 8007adc:	464a      	mov	r2, r9
 8007ade:	f7fd fccb 	bl	8005478 <memcpy>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	6126      	str	r6, [r4, #16]
 8007af0:	6165      	str	r5, [r4, #20]
 8007af2:	444e      	add	r6, r9
 8007af4:	eba5 0509 	sub.w	r5, r5, r9
 8007af8:	6026      	str	r6, [r4, #0]
 8007afa:	60a5      	str	r5, [r4, #8]
 8007afc:	463e      	mov	r6, r7
 8007afe:	42be      	cmp	r6, r7
 8007b00:	d900      	bls.n	8007b04 <__ssputs_r+0x86>
 8007b02:	463e      	mov	r6, r7
 8007b04:	4632      	mov	r2, r6
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	4641      	mov	r1, r8
 8007b0a:	f000 fb49 	bl	80081a0 <memmove>
 8007b0e:	68a3      	ldr	r3, [r4, #8]
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	1b9b      	subs	r3, r3, r6
 8007b14:	4432      	add	r2, r6
 8007b16:	60a3      	str	r3, [r4, #8]
 8007b18:	6022      	str	r2, [r4, #0]
 8007b1a:	2000      	movs	r0, #0
 8007b1c:	e7db      	b.n	8007ad6 <__ssputs_r+0x58>
 8007b1e:	462a      	mov	r2, r5
 8007b20:	f7ff ff87 	bl	8007a32 <_realloc_r>
 8007b24:	4606      	mov	r6, r0
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d1e1      	bne.n	8007aee <__ssputs_r+0x70>
 8007b2a:	6921      	ldr	r1, [r4, #16]
 8007b2c:	4650      	mov	r0, sl
 8007b2e:	f7fd fcb9 	bl	80054a4 <_free_r>
 8007b32:	e7c7      	b.n	8007ac4 <__ssputs_r+0x46>

08007b34 <_svfiprintf_r>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	4698      	mov	r8, r3
 8007b3a:	898b      	ldrh	r3, [r1, #12]
 8007b3c:	061b      	lsls	r3, r3, #24
 8007b3e:	b09d      	sub	sp, #116	; 0x74
 8007b40:	4607      	mov	r7, r0
 8007b42:	460d      	mov	r5, r1
 8007b44:	4614      	mov	r4, r2
 8007b46:	d50e      	bpl.n	8007b66 <_svfiprintf_r+0x32>
 8007b48:	690b      	ldr	r3, [r1, #16]
 8007b4a:	b963      	cbnz	r3, 8007b66 <_svfiprintf_r+0x32>
 8007b4c:	2140      	movs	r1, #64	; 0x40
 8007b4e:	f7fd fcf9 	bl	8005544 <_malloc_r>
 8007b52:	6028      	str	r0, [r5, #0]
 8007b54:	6128      	str	r0, [r5, #16]
 8007b56:	b920      	cbnz	r0, 8007b62 <_svfiprintf_r+0x2e>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	e0d1      	b.n	8007d06 <_svfiprintf_r+0x1d2>
 8007b62:	2340      	movs	r3, #64	; 0x40
 8007b64:	616b      	str	r3, [r5, #20]
 8007b66:	2300      	movs	r3, #0
 8007b68:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6a:	2320      	movs	r3, #32
 8007b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b74:	2330      	movs	r3, #48	; 0x30
 8007b76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d20 <_svfiprintf_r+0x1ec>
 8007b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b7e:	f04f 0901 	mov.w	r9, #1
 8007b82:	4623      	mov	r3, r4
 8007b84:	469a      	mov	sl, r3
 8007b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b8a:	b10a      	cbz	r2, 8007b90 <_svfiprintf_r+0x5c>
 8007b8c:	2a25      	cmp	r2, #37	; 0x25
 8007b8e:	d1f9      	bne.n	8007b84 <_svfiprintf_r+0x50>
 8007b90:	ebba 0b04 	subs.w	fp, sl, r4
 8007b94:	d00b      	beq.n	8007bae <_svfiprintf_r+0x7a>
 8007b96:	465b      	mov	r3, fp
 8007b98:	4622      	mov	r2, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f7ff ff6e 	bl	8007a7e <__ssputs_r>
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	f000 80aa 	beq.w	8007cfc <_svfiprintf_r+0x1c8>
 8007ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007baa:	445a      	add	r2, fp
 8007bac:	9209      	str	r2, [sp, #36]	; 0x24
 8007bae:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 80a2 	beq.w	8007cfc <_svfiprintf_r+0x1c8>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f04f 32ff 	mov.w	r2, #4294967295
 8007bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bc2:	f10a 0a01 	add.w	sl, sl, #1
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	9307      	str	r3, [sp, #28]
 8007bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bce:	931a      	str	r3, [sp, #104]	; 0x68
 8007bd0:	4654      	mov	r4, sl
 8007bd2:	2205      	movs	r2, #5
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	4851      	ldr	r0, [pc, #324]	; (8007d20 <_svfiprintf_r+0x1ec>)
 8007bda:	f7f8 fb11 	bl	8000200 <memchr>
 8007bde:	9a04      	ldr	r2, [sp, #16]
 8007be0:	b9d8      	cbnz	r0, 8007c1a <_svfiprintf_r+0xe6>
 8007be2:	06d0      	lsls	r0, r2, #27
 8007be4:	bf44      	itt	mi
 8007be6:	2320      	movmi	r3, #32
 8007be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bec:	0711      	lsls	r1, r2, #28
 8007bee:	bf44      	itt	mi
 8007bf0:	232b      	movmi	r3, #43	; 0x2b
 8007bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfc:	d015      	beq.n	8007c2a <_svfiprintf_r+0xf6>
 8007bfe:	9a07      	ldr	r2, [sp, #28]
 8007c00:	4654      	mov	r4, sl
 8007c02:	2000      	movs	r0, #0
 8007c04:	f04f 0c0a 	mov.w	ip, #10
 8007c08:	4621      	mov	r1, r4
 8007c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c0e:	3b30      	subs	r3, #48	; 0x30
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	d94e      	bls.n	8007cb2 <_svfiprintf_r+0x17e>
 8007c14:	b1b0      	cbz	r0, 8007c44 <_svfiprintf_r+0x110>
 8007c16:	9207      	str	r2, [sp, #28]
 8007c18:	e014      	b.n	8007c44 <_svfiprintf_r+0x110>
 8007c1a:	eba0 0308 	sub.w	r3, r0, r8
 8007c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c22:	4313      	orrs	r3, r2
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	46a2      	mov	sl, r4
 8007c28:	e7d2      	b.n	8007bd0 <_svfiprintf_r+0x9c>
 8007c2a:	9b03      	ldr	r3, [sp, #12]
 8007c2c:	1d19      	adds	r1, r3, #4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	9103      	str	r1, [sp, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	bfbb      	ittet	lt
 8007c36:	425b      	neglt	r3, r3
 8007c38:	f042 0202 	orrlt.w	r2, r2, #2
 8007c3c:	9307      	strge	r3, [sp, #28]
 8007c3e:	9307      	strlt	r3, [sp, #28]
 8007c40:	bfb8      	it	lt
 8007c42:	9204      	strlt	r2, [sp, #16]
 8007c44:	7823      	ldrb	r3, [r4, #0]
 8007c46:	2b2e      	cmp	r3, #46	; 0x2e
 8007c48:	d10c      	bne.n	8007c64 <_svfiprintf_r+0x130>
 8007c4a:	7863      	ldrb	r3, [r4, #1]
 8007c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c4e:	d135      	bne.n	8007cbc <_svfiprintf_r+0x188>
 8007c50:	9b03      	ldr	r3, [sp, #12]
 8007c52:	1d1a      	adds	r2, r3, #4
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	9203      	str	r2, [sp, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	bfb8      	it	lt
 8007c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c60:	3402      	adds	r4, #2
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d30 <_svfiprintf_r+0x1fc>
 8007c68:	7821      	ldrb	r1, [r4, #0]
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	f7f8 fac7 	bl	8000200 <memchr>
 8007c72:	b140      	cbz	r0, 8007c86 <_svfiprintf_r+0x152>
 8007c74:	2340      	movs	r3, #64	; 0x40
 8007c76:	eba0 000a 	sub.w	r0, r0, sl
 8007c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c7e:	9b04      	ldr	r3, [sp, #16]
 8007c80:	4303      	orrs	r3, r0
 8007c82:	3401      	adds	r4, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4826      	ldr	r0, [pc, #152]	; (8007d24 <_svfiprintf_r+0x1f0>)
 8007c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c90:	2206      	movs	r2, #6
 8007c92:	f7f8 fab5 	bl	8000200 <memchr>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d038      	beq.n	8007d0c <_svfiprintf_r+0x1d8>
 8007c9a:	4b23      	ldr	r3, [pc, #140]	; (8007d28 <_svfiprintf_r+0x1f4>)
 8007c9c:	bb1b      	cbnz	r3, 8007ce6 <_svfiprintf_r+0x1b2>
 8007c9e:	9b03      	ldr	r3, [sp, #12]
 8007ca0:	3307      	adds	r3, #7
 8007ca2:	f023 0307 	bic.w	r3, r3, #7
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cac:	4433      	add	r3, r6
 8007cae:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb0:	e767      	b.n	8007b82 <_svfiprintf_r+0x4e>
 8007cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	2001      	movs	r0, #1
 8007cba:	e7a5      	b.n	8007c08 <_svfiprintf_r+0xd4>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	3401      	adds	r4, #1
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	f04f 0c0a 	mov.w	ip, #10
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cce:	3a30      	subs	r2, #48	; 0x30
 8007cd0:	2a09      	cmp	r2, #9
 8007cd2:	d903      	bls.n	8007cdc <_svfiprintf_r+0x1a8>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d0c5      	beq.n	8007c64 <_svfiprintf_r+0x130>
 8007cd8:	9105      	str	r1, [sp, #20]
 8007cda:	e7c3      	b.n	8007c64 <_svfiprintf_r+0x130>
 8007cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e7f0      	b.n	8007cc8 <_svfiprintf_r+0x194>
 8007ce6:	ab03      	add	r3, sp, #12
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	462a      	mov	r2, r5
 8007cec:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <_svfiprintf_r+0x1f8>)
 8007cee:	a904      	add	r1, sp, #16
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7fd fd21 	bl	8005738 <_printf_float>
 8007cf6:	1c42      	adds	r2, r0, #1
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	d1d6      	bne.n	8007caa <_svfiprintf_r+0x176>
 8007cfc:	89ab      	ldrh	r3, [r5, #12]
 8007cfe:	065b      	lsls	r3, r3, #25
 8007d00:	f53f af2c 	bmi.w	8007b5c <_svfiprintf_r+0x28>
 8007d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d06:	b01d      	add	sp, #116	; 0x74
 8007d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0c:	ab03      	add	r3, sp, #12
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	462a      	mov	r2, r5
 8007d12:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <_svfiprintf_r+0x1f8>)
 8007d14:	a904      	add	r1, sp, #16
 8007d16:	4638      	mov	r0, r7
 8007d18:	f7fd ffb2 	bl	8005c80 <_printf_i>
 8007d1c:	e7eb      	b.n	8007cf6 <_svfiprintf_r+0x1c2>
 8007d1e:	bf00      	nop
 8007d20:	08062d1c 	.word	0x08062d1c
 8007d24:	08062d26 	.word	0x08062d26
 8007d28:	08005739 	.word	0x08005739
 8007d2c:	08007a7f 	.word	0x08007a7f
 8007d30:	08062d22 	.word	0x08062d22

08007d34 <__sfputc_r>:
 8007d34:	6893      	ldr	r3, [r2, #8]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	b410      	push	{r4}
 8007d3c:	6093      	str	r3, [r2, #8]
 8007d3e:	da08      	bge.n	8007d52 <__sfputc_r+0x1e>
 8007d40:	6994      	ldr	r4, [r2, #24]
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	db01      	blt.n	8007d4a <__sfputc_r+0x16>
 8007d46:	290a      	cmp	r1, #10
 8007d48:	d103      	bne.n	8007d52 <__sfputc_r+0x1e>
 8007d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d4e:	f7fe b97b 	b.w	8006048 <__swbuf_r>
 8007d52:	6813      	ldr	r3, [r2, #0]
 8007d54:	1c58      	adds	r0, r3, #1
 8007d56:	6010      	str	r0, [r2, #0]
 8007d58:	7019      	strb	r1, [r3, #0]
 8007d5a:	4608      	mov	r0, r1
 8007d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <__sfputs_r>:
 8007d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	4614      	mov	r4, r2
 8007d6a:	18d5      	adds	r5, r2, r3
 8007d6c:	42ac      	cmp	r4, r5
 8007d6e:	d101      	bne.n	8007d74 <__sfputs_r+0x12>
 8007d70:	2000      	movs	r0, #0
 8007d72:	e007      	b.n	8007d84 <__sfputs_r+0x22>
 8007d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d78:	463a      	mov	r2, r7
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7ff ffda 	bl	8007d34 <__sfputc_r>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d1f3      	bne.n	8007d6c <__sfputs_r+0xa>
 8007d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d88 <_vfiprintf_r>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	460d      	mov	r5, r1
 8007d8e:	b09d      	sub	sp, #116	; 0x74
 8007d90:	4614      	mov	r4, r2
 8007d92:	4698      	mov	r8, r3
 8007d94:	4606      	mov	r6, r0
 8007d96:	b118      	cbz	r0, 8007da0 <_vfiprintf_r+0x18>
 8007d98:	6983      	ldr	r3, [r0, #24]
 8007d9a:	b90b      	cbnz	r3, 8007da0 <_vfiprintf_r+0x18>
 8007d9c:	f7ff f9a6 	bl	80070ec <__sinit>
 8007da0:	4b89      	ldr	r3, [pc, #548]	; (8007fc8 <_vfiprintf_r+0x240>)
 8007da2:	429d      	cmp	r5, r3
 8007da4:	d11b      	bne.n	8007dde <_vfiprintf_r+0x56>
 8007da6:	6875      	ldr	r5, [r6, #4]
 8007da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007daa:	07d9      	lsls	r1, r3, #31
 8007dac:	d405      	bmi.n	8007dba <_vfiprintf_r+0x32>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	059a      	lsls	r2, r3, #22
 8007db2:	d402      	bmi.n	8007dba <_vfiprintf_r+0x32>
 8007db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007db6:	f7ff fa3c 	bl	8007232 <__retarget_lock_acquire_recursive>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	071b      	lsls	r3, r3, #28
 8007dbe:	d501      	bpl.n	8007dc4 <_vfiprintf_r+0x3c>
 8007dc0:	692b      	ldr	r3, [r5, #16]
 8007dc2:	b9eb      	cbnz	r3, 8007e00 <_vfiprintf_r+0x78>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7fe f990 	bl	80060ec <__swsetup_r>
 8007dcc:	b1c0      	cbz	r0, 8007e00 <_vfiprintf_r+0x78>
 8007dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd0:	07dc      	lsls	r4, r3, #31
 8007dd2:	d50e      	bpl.n	8007df2 <_vfiprintf_r+0x6a>
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	b01d      	add	sp, #116	; 0x74
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	4b7b      	ldr	r3, [pc, #492]	; (8007fcc <_vfiprintf_r+0x244>)
 8007de0:	429d      	cmp	r5, r3
 8007de2:	d101      	bne.n	8007de8 <_vfiprintf_r+0x60>
 8007de4:	68b5      	ldr	r5, [r6, #8]
 8007de6:	e7df      	b.n	8007da8 <_vfiprintf_r+0x20>
 8007de8:	4b79      	ldr	r3, [pc, #484]	; (8007fd0 <_vfiprintf_r+0x248>)
 8007dea:	429d      	cmp	r5, r3
 8007dec:	bf08      	it	eq
 8007dee:	68f5      	ldreq	r5, [r6, #12]
 8007df0:	e7da      	b.n	8007da8 <_vfiprintf_r+0x20>
 8007df2:	89ab      	ldrh	r3, [r5, #12]
 8007df4:	0598      	lsls	r0, r3, #22
 8007df6:	d4ed      	bmi.n	8007dd4 <_vfiprintf_r+0x4c>
 8007df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dfa:	f7ff fa1b 	bl	8007234 <__retarget_lock_release_recursive>
 8007dfe:	e7e9      	b.n	8007dd4 <_vfiprintf_r+0x4c>
 8007e00:	2300      	movs	r3, #0
 8007e02:	9309      	str	r3, [sp, #36]	; 0x24
 8007e04:	2320      	movs	r3, #32
 8007e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e0e:	2330      	movs	r3, #48	; 0x30
 8007e10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007fd4 <_vfiprintf_r+0x24c>
 8007e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e18:	f04f 0901 	mov.w	r9, #1
 8007e1c:	4623      	mov	r3, r4
 8007e1e:	469a      	mov	sl, r3
 8007e20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e24:	b10a      	cbz	r2, 8007e2a <_vfiprintf_r+0xa2>
 8007e26:	2a25      	cmp	r2, #37	; 0x25
 8007e28:	d1f9      	bne.n	8007e1e <_vfiprintf_r+0x96>
 8007e2a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e2e:	d00b      	beq.n	8007e48 <_vfiprintf_r+0xc0>
 8007e30:	465b      	mov	r3, fp
 8007e32:	4622      	mov	r2, r4
 8007e34:	4629      	mov	r1, r5
 8007e36:	4630      	mov	r0, r6
 8007e38:	f7ff ff93 	bl	8007d62 <__sfputs_r>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	f000 80aa 	beq.w	8007f96 <_vfiprintf_r+0x20e>
 8007e42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e44:	445a      	add	r2, fp
 8007e46:	9209      	str	r2, [sp, #36]	; 0x24
 8007e48:	f89a 3000 	ldrb.w	r3, [sl]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80a2 	beq.w	8007f96 <_vfiprintf_r+0x20e>
 8007e52:	2300      	movs	r3, #0
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e5c:	f10a 0a01 	add.w	sl, sl, #1
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	9307      	str	r3, [sp, #28]
 8007e64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e68:	931a      	str	r3, [sp, #104]	; 0x68
 8007e6a:	4654      	mov	r4, sl
 8007e6c:	2205      	movs	r2, #5
 8007e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e72:	4858      	ldr	r0, [pc, #352]	; (8007fd4 <_vfiprintf_r+0x24c>)
 8007e74:	f7f8 f9c4 	bl	8000200 <memchr>
 8007e78:	9a04      	ldr	r2, [sp, #16]
 8007e7a:	b9d8      	cbnz	r0, 8007eb4 <_vfiprintf_r+0x12c>
 8007e7c:	06d1      	lsls	r1, r2, #27
 8007e7e:	bf44      	itt	mi
 8007e80:	2320      	movmi	r3, #32
 8007e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e86:	0713      	lsls	r3, r2, #28
 8007e88:	bf44      	itt	mi
 8007e8a:	232b      	movmi	r3, #43	; 0x2b
 8007e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e90:	f89a 3000 	ldrb.w	r3, [sl]
 8007e94:	2b2a      	cmp	r3, #42	; 0x2a
 8007e96:	d015      	beq.n	8007ec4 <_vfiprintf_r+0x13c>
 8007e98:	9a07      	ldr	r2, [sp, #28]
 8007e9a:	4654      	mov	r4, sl
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f04f 0c0a 	mov.w	ip, #10
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ea8:	3b30      	subs	r3, #48	; 0x30
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d94e      	bls.n	8007f4c <_vfiprintf_r+0x1c4>
 8007eae:	b1b0      	cbz	r0, 8007ede <_vfiprintf_r+0x156>
 8007eb0:	9207      	str	r2, [sp, #28]
 8007eb2:	e014      	b.n	8007ede <_vfiprintf_r+0x156>
 8007eb4:	eba0 0308 	sub.w	r3, r0, r8
 8007eb8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	46a2      	mov	sl, r4
 8007ec2:	e7d2      	b.n	8007e6a <_vfiprintf_r+0xe2>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	1d19      	adds	r1, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	9103      	str	r1, [sp, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	bfbb      	ittet	lt
 8007ed0:	425b      	neglt	r3, r3
 8007ed2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ed6:	9307      	strge	r3, [sp, #28]
 8007ed8:	9307      	strlt	r3, [sp, #28]
 8007eda:	bfb8      	it	lt
 8007edc:	9204      	strlt	r2, [sp, #16]
 8007ede:	7823      	ldrb	r3, [r4, #0]
 8007ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ee2:	d10c      	bne.n	8007efe <_vfiprintf_r+0x176>
 8007ee4:	7863      	ldrb	r3, [r4, #1]
 8007ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee8:	d135      	bne.n	8007f56 <_vfiprintf_r+0x1ce>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	1d1a      	adds	r2, r3, #4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	9203      	str	r2, [sp, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bfb8      	it	lt
 8007ef6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007efa:	3402      	adds	r4, #2
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fe4 <_vfiprintf_r+0x25c>
 8007f02:	7821      	ldrb	r1, [r4, #0]
 8007f04:	2203      	movs	r2, #3
 8007f06:	4650      	mov	r0, sl
 8007f08:	f7f8 f97a 	bl	8000200 <memchr>
 8007f0c:	b140      	cbz	r0, 8007f20 <_vfiprintf_r+0x198>
 8007f0e:	2340      	movs	r3, #64	; 0x40
 8007f10:	eba0 000a 	sub.w	r0, r0, sl
 8007f14:	fa03 f000 	lsl.w	r0, r3, r0
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	4303      	orrs	r3, r0
 8007f1c:	3401      	adds	r4, #1
 8007f1e:	9304      	str	r3, [sp, #16]
 8007f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f24:	482c      	ldr	r0, [pc, #176]	; (8007fd8 <_vfiprintf_r+0x250>)
 8007f26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f2a:	2206      	movs	r2, #6
 8007f2c:	f7f8 f968 	bl	8000200 <memchr>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d03f      	beq.n	8007fb4 <_vfiprintf_r+0x22c>
 8007f34:	4b29      	ldr	r3, [pc, #164]	; (8007fdc <_vfiprintf_r+0x254>)
 8007f36:	bb1b      	cbnz	r3, 8007f80 <_vfiprintf_r+0x1f8>
 8007f38:	9b03      	ldr	r3, [sp, #12]
 8007f3a:	3307      	adds	r3, #7
 8007f3c:	f023 0307 	bic.w	r3, r3, #7
 8007f40:	3308      	adds	r3, #8
 8007f42:	9303      	str	r3, [sp, #12]
 8007f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f46:	443b      	add	r3, r7
 8007f48:	9309      	str	r3, [sp, #36]	; 0x24
 8007f4a:	e767      	b.n	8007e1c <_vfiprintf_r+0x94>
 8007f4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f50:	460c      	mov	r4, r1
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7a5      	b.n	8007ea2 <_vfiprintf_r+0x11a>
 8007f56:	2300      	movs	r3, #0
 8007f58:	3401      	adds	r4, #1
 8007f5a:	9305      	str	r3, [sp, #20]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f04f 0c0a 	mov.w	ip, #10
 8007f62:	4620      	mov	r0, r4
 8007f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f68:	3a30      	subs	r2, #48	; 0x30
 8007f6a:	2a09      	cmp	r2, #9
 8007f6c:	d903      	bls.n	8007f76 <_vfiprintf_r+0x1ee>
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0c5      	beq.n	8007efe <_vfiprintf_r+0x176>
 8007f72:	9105      	str	r1, [sp, #20]
 8007f74:	e7c3      	b.n	8007efe <_vfiprintf_r+0x176>
 8007f76:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e7f0      	b.n	8007f62 <_vfiprintf_r+0x1da>
 8007f80:	ab03      	add	r3, sp, #12
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	462a      	mov	r2, r5
 8007f86:	4b16      	ldr	r3, [pc, #88]	; (8007fe0 <_vfiprintf_r+0x258>)
 8007f88:	a904      	add	r1, sp, #16
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7fd fbd4 	bl	8005738 <_printf_float>
 8007f90:	4607      	mov	r7, r0
 8007f92:	1c78      	adds	r0, r7, #1
 8007f94:	d1d6      	bne.n	8007f44 <_vfiprintf_r+0x1bc>
 8007f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f98:	07d9      	lsls	r1, r3, #31
 8007f9a:	d405      	bmi.n	8007fa8 <_vfiprintf_r+0x220>
 8007f9c:	89ab      	ldrh	r3, [r5, #12]
 8007f9e:	059a      	lsls	r2, r3, #22
 8007fa0:	d402      	bmi.n	8007fa8 <_vfiprintf_r+0x220>
 8007fa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fa4:	f7ff f946 	bl	8007234 <__retarget_lock_release_recursive>
 8007fa8:	89ab      	ldrh	r3, [r5, #12]
 8007faa:	065b      	lsls	r3, r3, #25
 8007fac:	f53f af12 	bmi.w	8007dd4 <_vfiprintf_r+0x4c>
 8007fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fb2:	e711      	b.n	8007dd8 <_vfiprintf_r+0x50>
 8007fb4:	ab03      	add	r3, sp, #12
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <_vfiprintf_r+0x258>)
 8007fbc:	a904      	add	r1, sp, #16
 8007fbe:	4630      	mov	r0, r6
 8007fc0:	f7fd fe5e 	bl	8005c80 <_printf_i>
 8007fc4:	e7e4      	b.n	8007f90 <_vfiprintf_r+0x208>
 8007fc6:	bf00      	nop
 8007fc8:	08062b80 	.word	0x08062b80
 8007fcc:	08062ba0 	.word	0x08062ba0
 8007fd0:	08062b60 	.word	0x08062b60
 8007fd4:	08062d1c 	.word	0x08062d1c
 8007fd8:	08062d26 	.word	0x08062d26
 8007fdc:	08005739 	.word	0x08005739
 8007fe0:	08007d63 	.word	0x08007d63
 8007fe4:	08062d22 	.word	0x08062d22

08007fe8 <__sread>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	460c      	mov	r4, r1
 8007fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff0:	f000 f8f8 	bl	80081e4 <_read_r>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	bfab      	itete	ge
 8007ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8007ffc:	181b      	addge	r3, r3, r0
 8007ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008002:	bfac      	ite	ge
 8008004:	6563      	strge	r3, [r4, #84]	; 0x54
 8008006:	81a3      	strhlt	r3, [r4, #12]
 8008008:	bd10      	pop	{r4, pc}

0800800a <__swrite>:
 800800a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800e:	461f      	mov	r7, r3
 8008010:	898b      	ldrh	r3, [r1, #12]
 8008012:	05db      	lsls	r3, r3, #23
 8008014:	4605      	mov	r5, r0
 8008016:	460c      	mov	r4, r1
 8008018:	4616      	mov	r6, r2
 800801a:	d505      	bpl.n	8008028 <__swrite+0x1e>
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2302      	movs	r3, #2
 8008022:	2200      	movs	r2, #0
 8008024:	f000 f898 	bl	8008158 <_lseek_r>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800802e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	4632      	mov	r2, r6
 8008036:	463b      	mov	r3, r7
 8008038:	4628      	mov	r0, r5
 800803a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	f000 b817 	b.w	8008070 <_write_r>

08008042 <__sseek>:
 8008042:	b510      	push	{r4, lr}
 8008044:	460c      	mov	r4, r1
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 f885 	bl	8008158 <_lseek_r>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	bf15      	itete	ne
 8008054:	6560      	strne	r0, [r4, #84]	; 0x54
 8008056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800805a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800805e:	81a3      	strheq	r3, [r4, #12]
 8008060:	bf18      	it	ne
 8008062:	81a3      	strhne	r3, [r4, #12]
 8008064:	bd10      	pop	{r4, pc}

08008066 <__sclose>:
 8008066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806a:	f000 b831 	b.w	80080d0 <_close_r>
	...

08008070 <_write_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_write_r+0x20>)
 8008074:	4604      	mov	r4, r0
 8008076:	4608      	mov	r0, r1
 8008078:	4611      	mov	r1, r2
 800807a:	2200      	movs	r2, #0
 800807c:	602a      	str	r2, [r5, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	f7fb fd76 	bl	8003b70 <_write>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_write_r+0x1e>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_write_r+0x1e>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	20001fb8 	.word	0x20001fb8

08008094 <__assert_func>:
 8008094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008096:	4614      	mov	r4, r2
 8008098:	461a      	mov	r2, r3
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <__assert_func+0x2c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4605      	mov	r5, r0
 80080a0:	68d8      	ldr	r0, [r3, #12]
 80080a2:	b14c      	cbz	r4, 80080b8 <__assert_func+0x24>
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <__assert_func+0x30>)
 80080a6:	9100      	str	r1, [sp, #0]
 80080a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080ac:	4906      	ldr	r1, [pc, #24]	; (80080c8 <__assert_func+0x34>)
 80080ae:	462b      	mov	r3, r5
 80080b0:	f000 f81e 	bl	80080f0 <fiprintf>
 80080b4:	f000 f8b5 	bl	8008222 <abort>
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <__assert_func+0x38>)
 80080ba:	461c      	mov	r4, r3
 80080bc:	e7f3      	b.n	80080a6 <__assert_func+0x12>
 80080be:	bf00      	nop
 80080c0:	20000648 	.word	0x20000648
 80080c4:	08062d2d 	.word	0x08062d2d
 80080c8:	08062d3a 	.word	0x08062d3a
 80080cc:	08062d68 	.word	0x08062d68

080080d0 <_close_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d06      	ldr	r5, [pc, #24]	; (80080ec <_close_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7fb fd74 	bl	8003bc8 <_close>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_close_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_close_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20001fb8 	.word	0x20001fb8

080080f0 <fiprintf>:
 80080f0:	b40e      	push	{r1, r2, r3}
 80080f2:	b503      	push	{r0, r1, lr}
 80080f4:	4601      	mov	r1, r0
 80080f6:	ab03      	add	r3, sp, #12
 80080f8:	4805      	ldr	r0, [pc, #20]	; (8008110 <fiprintf+0x20>)
 80080fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fe:	6800      	ldr	r0, [r0, #0]
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	f7ff fe41 	bl	8007d88 <_vfiprintf_r>
 8008106:	b002      	add	sp, #8
 8008108:	f85d eb04 	ldr.w	lr, [sp], #4
 800810c:	b003      	add	sp, #12
 800810e:	4770      	bx	lr
 8008110:	20000648 	.word	0x20000648

08008114 <_fstat_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	; (8008134 <_fstat_r+0x20>)
 8008118:	2300      	movs	r3, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	f7fb fd54 	bl	8003bce <_fstat>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d102      	bne.n	8008130 <_fstat_r+0x1c>
 800812a:	682b      	ldr	r3, [r5, #0]
 800812c:	b103      	cbz	r3, 8008130 <_fstat_r+0x1c>
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	bd38      	pop	{r3, r4, r5, pc}
 8008132:	bf00      	nop
 8008134:	20001fb8 	.word	0x20001fb8

08008138 <_isatty_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d06      	ldr	r5, [pc, #24]	; (8008154 <_isatty_r+0x1c>)
 800813c:	2300      	movs	r3, #0
 800813e:	4604      	mov	r4, r0
 8008140:	4608      	mov	r0, r1
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	f7fb fd48 	bl	8003bd8 <_isatty>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_isatty_r+0x1a>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_isatty_r+0x1a>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	20001fb8 	.word	0x20001fb8

08008158 <_lseek_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d07      	ldr	r5, [pc, #28]	; (8008178 <_lseek_r+0x20>)
 800815c:	4604      	mov	r4, r0
 800815e:	4608      	mov	r0, r1
 8008160:	4611      	mov	r1, r2
 8008162:	2200      	movs	r2, #0
 8008164:	602a      	str	r2, [r5, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	f7fb fd38 	bl	8003bdc <_lseek>
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	d102      	bne.n	8008176 <_lseek_r+0x1e>
 8008170:	682b      	ldr	r3, [r5, #0]
 8008172:	b103      	cbz	r3, 8008176 <_lseek_r+0x1e>
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	bd38      	pop	{r3, r4, r5, pc}
 8008178:	20001fb8 	.word	0x20001fb8

0800817c <__ascii_mbtowc>:
 800817c:	b082      	sub	sp, #8
 800817e:	b901      	cbnz	r1, 8008182 <__ascii_mbtowc+0x6>
 8008180:	a901      	add	r1, sp, #4
 8008182:	b142      	cbz	r2, 8008196 <__ascii_mbtowc+0x1a>
 8008184:	b14b      	cbz	r3, 800819a <__ascii_mbtowc+0x1e>
 8008186:	7813      	ldrb	r3, [r2, #0]
 8008188:	600b      	str	r3, [r1, #0]
 800818a:	7812      	ldrb	r2, [r2, #0]
 800818c:	1e10      	subs	r0, r2, #0
 800818e:	bf18      	it	ne
 8008190:	2001      	movne	r0, #1
 8008192:	b002      	add	sp, #8
 8008194:	4770      	bx	lr
 8008196:	4610      	mov	r0, r2
 8008198:	e7fb      	b.n	8008192 <__ascii_mbtowc+0x16>
 800819a:	f06f 0001 	mvn.w	r0, #1
 800819e:	e7f8      	b.n	8008192 <__ascii_mbtowc+0x16>

080081a0 <memmove>:
 80081a0:	4288      	cmp	r0, r1
 80081a2:	b510      	push	{r4, lr}
 80081a4:	eb01 0402 	add.w	r4, r1, r2
 80081a8:	d902      	bls.n	80081b0 <memmove+0x10>
 80081aa:	4284      	cmp	r4, r0
 80081ac:	4623      	mov	r3, r4
 80081ae:	d807      	bhi.n	80081c0 <memmove+0x20>
 80081b0:	1e43      	subs	r3, r0, #1
 80081b2:	42a1      	cmp	r1, r4
 80081b4:	d008      	beq.n	80081c8 <memmove+0x28>
 80081b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081be:	e7f8      	b.n	80081b2 <memmove+0x12>
 80081c0:	4402      	add	r2, r0
 80081c2:	4601      	mov	r1, r0
 80081c4:	428a      	cmp	r2, r1
 80081c6:	d100      	bne.n	80081ca <memmove+0x2a>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081d2:	e7f7      	b.n	80081c4 <memmove+0x24>

080081d4 <_malloc_usable_size_r>:
 80081d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d8:	1f18      	subs	r0, r3, #4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	bfbc      	itt	lt
 80081de:	580b      	ldrlt	r3, [r1, r0]
 80081e0:	18c0      	addlt	r0, r0, r3
 80081e2:	4770      	bx	lr

080081e4 <_read_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4d07      	ldr	r5, [pc, #28]	; (8008204 <_read_r+0x20>)
 80081e8:	4604      	mov	r4, r0
 80081ea:	4608      	mov	r0, r1
 80081ec:	4611      	mov	r1, r2
 80081ee:	2200      	movs	r2, #0
 80081f0:	602a      	str	r2, [r5, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f7fb fcac 	bl	8003b50 <_read>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_read_r+0x1e>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_read_r+0x1e>
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	20001fb8 	.word	0x20001fb8

08008208 <__ascii_wctomb>:
 8008208:	b149      	cbz	r1, 800821e <__ascii_wctomb+0x16>
 800820a:	2aff      	cmp	r2, #255	; 0xff
 800820c:	bf85      	ittet	hi
 800820e:	238a      	movhi	r3, #138	; 0x8a
 8008210:	6003      	strhi	r3, [r0, #0]
 8008212:	700a      	strbls	r2, [r1, #0]
 8008214:	f04f 30ff 	movhi.w	r0, #4294967295
 8008218:	bf98      	it	ls
 800821a:	2001      	movls	r0, #1
 800821c:	4770      	bx	lr
 800821e:	4608      	mov	r0, r1
 8008220:	4770      	bx	lr

08008222 <abort>:
 8008222:	b508      	push	{r3, lr}
 8008224:	2006      	movs	r0, #6
 8008226:	f000 f82b 	bl	8008280 <raise>
 800822a:	2001      	movs	r0, #1
 800822c:	f7fb fc8a 	bl	8003b44 <_exit>

08008230 <_raise_r>:
 8008230:	291f      	cmp	r1, #31
 8008232:	b538      	push	{r3, r4, r5, lr}
 8008234:	4604      	mov	r4, r0
 8008236:	460d      	mov	r5, r1
 8008238:	d904      	bls.n	8008244 <_raise_r+0x14>
 800823a:	2316      	movs	r3, #22
 800823c:	6003      	str	r3, [r0, #0]
 800823e:	f04f 30ff 	mov.w	r0, #4294967295
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008246:	b112      	cbz	r2, 800824e <_raise_r+0x1e>
 8008248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800824c:	b94b      	cbnz	r3, 8008262 <_raise_r+0x32>
 800824e:	4620      	mov	r0, r4
 8008250:	f000 f830 	bl	80082b4 <_getpid_r>
 8008254:	462a      	mov	r2, r5
 8008256:	4601      	mov	r1, r0
 8008258:	4620      	mov	r0, r4
 800825a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825e:	f000 b817 	b.w	8008290 <_kill_r>
 8008262:	2b01      	cmp	r3, #1
 8008264:	d00a      	beq.n	800827c <_raise_r+0x4c>
 8008266:	1c59      	adds	r1, r3, #1
 8008268:	d103      	bne.n	8008272 <_raise_r+0x42>
 800826a:	2316      	movs	r3, #22
 800826c:	6003      	str	r3, [r0, #0]
 800826e:	2001      	movs	r0, #1
 8008270:	e7e7      	b.n	8008242 <_raise_r+0x12>
 8008272:	2400      	movs	r4, #0
 8008274:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008278:	4628      	mov	r0, r5
 800827a:	4798      	blx	r3
 800827c:	2000      	movs	r0, #0
 800827e:	e7e0      	b.n	8008242 <_raise_r+0x12>

08008280 <raise>:
 8008280:	4b02      	ldr	r3, [pc, #8]	; (800828c <raise+0xc>)
 8008282:	4601      	mov	r1, r0
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	f7ff bfd3 	b.w	8008230 <_raise_r>
 800828a:	bf00      	nop
 800828c:	20000648 	.word	0x20000648

08008290 <_kill_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d07      	ldr	r5, [pc, #28]	; (80082b0 <_kill_r+0x20>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	f7fb fc49 	bl	8003b34 <_kill>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	d102      	bne.n	80082ac <_kill_r+0x1c>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	b103      	cbz	r3, 80082ac <_kill_r+0x1c>
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
 80082ae:	bf00      	nop
 80082b0:	20001fb8 	.word	0x20001fb8

080082b4 <_getpid_r>:
 80082b4:	f7fb bc3c 	b.w	8003b30 <_getpid>

080082b8 <_init>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr

080082c4 <_fini>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	bf00      	nop
 80082c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ca:	bc08      	pop	{r3}
 80082cc:	469e      	mov	lr, r3
 80082ce:	4770      	bx	lr
